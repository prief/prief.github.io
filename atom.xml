<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prief</title>
  
  <subtitle>about share and go on</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://prief.github.io/"/>
  <updated>2019-08-19T15:01:02.652Z</updated>
  <id>https://prief.github.io/</id>
  
  <author>
    <name>prief</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cli</title>
    <link href="https://prief.github.io/2019/08/17/cli/"/>
    <id>https://prief.github.io/2019/08/17/cli/</id>
    <published>2019-08-17T08:46:23.000Z</published>
    <updated>2019-08-19T15:01:02.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><ul><li>三种使用方式<ul><li>webpack.config.js</li><li>内联在import语句中</li><li>在cli命令中指定</li></ul></li><li>常用loader<ul><li>babel-loader</li><li>style-loader 在html中注入style标签</li><li>css-loader 解析@import url()等</li><li>postcss-loader</li><li>sass-loader</li><li>html-loader</li><li>vue-loader</li><li>file-loader</li><li>url-loader</li></ul></li></ul><h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><ul><li>常用plugin<ul><li>HtmlWebpackPlugin</li><li>CommonsChunkPlugin</li><li>DefinePlugin</li><li>DllPlugin</li><li>ExtractTextWebpackPlugin</li><li>HotModuleReplacementPlugin</li><li>UglifyjsWebpackPlugin</li><li>CopyWebpackPlugin</li></ul></li></ul><h1 id="工程化模版"><a href="#工程化模版" class="headerlink" title="工程化模版"></a>工程化模版</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>mkdir template &amp;&amp; cd template &amp;&amp; npm init -y</li><li>npm i -D webpack webpack-cli vue-loader vue-template-compiler html-webpack-plugin css-loader style-loader sass-loader sass postcss-loader  postcss-preset-env url-loader file-loader @babel/core @babel/preset-env babel-loader webpack-dev-server connect-multiparty mockjs concurrently</li><li>npm i vue vue-router @babel/polyfill axios</li><li>浏览器支持列表<ul><li>package.json.browserslist</li><li>.browserlistrc</li><li>browserlist</li><li>环境变量BROWSERLIST </li></ul></li><li>.babelrc</li><li>postcss.config.js</li><li>webpack.config.js</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>意义<ul><li>避免命名/变量冲突</li><li>更清晰的依赖关系</li><li>可维护</li><li>可复用</li><li>降低复杂度</li></ul></li><li>主流实现<ul><li>AMD<ul><li>异步加载，适合浏览器端</li><li>require</li><li>define([deps…],(deps…)=&gt;{return {}})</li></ul></li><li>CommonJS<ul><li>同步加载，适合服务端，因为大都在本地</li><li>require</li><li>module.exports | exports.</li></ul></li><li>ES6<ul><li>js语言层面支持的模块化，可做静态依赖分析，适合多端</li><li>import</li><li>export</li></ul></li></ul></li></ul><h2 id="本地开发环境"><a href="#本地开发环境" class="headerlink" title="本地开发环境"></a>本地开发环境</h2><ul><li><p>npm install –save-dev webpack-dev-server</p></li><li><p>“start”: “webpack-dev-server –open”</p></li><li><p>HMR</p><ul><li>hotModuleReplacement</li><li>能生效是因为模块实现了HMR接口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (module.hot) &#123;</span><br><span class="line">  module.hot.accept(&quot;./print.js&quot;, function() &#123;</span><br><span class="line">    console.log(&quot;接收更新后的模块&quot;);</span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sourceMap</p><ul><li>source-map 适合生产环境，映射关系完整但运行慢</li><li>eval-source-map 适合开发环境，只映射到行但运行快</li></ul></li></ul><h2 id="本地mock"><a href="#本地mock" class="headerlink" title="本地mock"></a>本地mock</h2><ul><li>服务 express</li><li>路由 url与数据的路由绑定</li><li>数据模拟 mockjs<ul><li>数据模版定义规范DTD(data template definition)<ul><li>属性名 与规则之间用|分割</li><li>生成规则 依赖属性值的类型，是可选的</li><li>属性值 可以有@占位符，指定了最终值的类型和初始值</li><li>例如：’name|rule’: value</li></ul></li><li>数据占位符定义规范DPD(data placeholder definition)</li><li>核心api<ul><li>mock 将模版输出为最终的数据</li><li>random 生成随机数据</li></ul></li></ul></li><li>concurrently<ul><li>同一终端同时运行多个npm命令，不管是否同一进程</li></ul></li></ul><h2 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h2><ul><li>eslint<ul><li>npm install -D eslint eslint-loader eslint-plugin-vue babel-eslint eslint-friendly-formatter</li><li>plugins指定需要的插件名称，可以忽略eslint-plugin-</li><li>默认使用espree解析器，因为有新的语言特性需要指定为babel-eslint</li><li>换解析器需要在parserOptions中，防止全局替换导致其他插件失败</li><li>es6模块的sourceType为module</li><li>禁用eslint规则<ul><li>文件开头/* eslint-disable */禁用整个文件的检查</li><li>行// eslint-disable-line 禁用行检查</li><li>行// eslint-disable-line no-console 禁用console规则</li></ul></li><li>自定义规则<ul><li>extends: eslint:recommended</li><li>rules:{ no-console: off, quotes:[“wanr”,”single”],indent:[“error”,2]}</li><li>数组值第一项表示级别，默认是error</li></ul></li></ul></li><li>stylelint<ul><li>npm install -D stylelint stylelint-webpack-plugin</li><li>.stylelintrc.js</li><li>禁用规则<ul><li>/* stylelint-disable unit-whitelist*/ 禁用unit规则校验</li><li>/* stylelint-disable */ 禁用所有规则校验</li></ul></li><li>自定义规则<ul><li>extends: “stylelint-config-standard”</li><li>rules: {“color-no-invalid-hex”: true}</li></ul></li></ul></li></ul><h2 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h2><ul><li>npm install -D webpack-spritesmith</li><li>resolve.modules如果是相对路径则按照规则一级一级向上查找，如果是绝对路径不会向上查找</li><li>使用<ul><li>@import “~sprite.scss”</li><li>.icon-picName{@include sprite($picName)}</li></ul></li><li>自定义生成2x样式表<ul><li>官网的templateFunction</li><li>customTemplates: {function_based_template: templateFunction},</li><li>target.css = [[],path.resolve(__dirname, “src/assets/generated/sprite.scss”)]</li><li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@import &apos;~sprite2.scss&apos;;</span><br><span class="line">&lt;li class=&quot;ico ico-picName&quot;&gt;&lt;/li&gt; </span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="按浏览器构建"><a href="#按浏览器构建" class="headerlink" title="按浏览器构建"></a>按浏览器构建</h2><ul><li>新版本浏览器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot;&gt;&lt;/script&gt; 可直接加载ES6</span><br><span class="line">&lt;link rel=&quot;modulepreload&quot;&gt;&lt;/link&gt; 预加载</span><br></pre></td></tr></table></figure></li><li>老版本浏览器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script nomodule&gt;加载旧版本js，新版本浏览器会忽略该引用</span><br></pre></td></tr></table></figure></li></ul><h2 id="按环境构建"><a href="#按环境构建" class="headerlink" title="按环境构建"></a>按环境构建</h2><ul><li>development</li><li>test</li><li>production</li><li>插件<ul><li>npm install –save-dev extract-text-webpack-plugin</li><li>npm install –save-dev optimize-css-assets-webpack-plugin</li><li>npm install terser-webpack-plugin –save-dev</li><li>HashedModuleIdsPlugin 避免不必要的hash变化</li></ul></li></ul><h2 id="集成调试工具"><a href="#集成调试工具" class="headerlink" title="集成调试工具"></a>集成调试工具</h2><ul><li>weinre / spy-debugger</li><li>vconsole<ul><li>npm install vconsole</li><li>DebugPlugin.js里面去实现 debugtool插件</li><li>vconsole.js 里面去new Vconsole</li><li>可以单独发一个npm包 debugtool-webpack-plugin</li></ul></li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul><li>chai作为断言库</li><li>Mocha编写测试用例、测试框架</li><li>Karma测试过程管理TestRunner及启动浏览器和生成测试报告</li><li>npm install –save-dev karma mocha karma-mocha karma-chrome-launcher karma-webpack karma-sourcemap-loader karma-spec-reporter chai @vue/test-utils karma-coverage babel-plugin-istanbul cross-env</li><li>覆盖率<ul><li>语句覆盖率</li><li>分支覆盖率</li><li>函数覆盖率</li><li>行覆盖率</li></ul></li></ul><h2 id="e2e测试"><a href="#e2e测试" class="headerlink" title="e2e测试"></a>e2e测试</h2><ul><li>npm install –save-dev nightwatch chromedriver</li><li>npm install –save-dev geckodriver # firefox</li><li>npm install –save-dev cross-spawn # 启动子进程</li><li>npm install –save-dev nightwatch-html-reporter</li><li>nightwatch接口<ul><li>断言相关<ul><li>expect.element()</li><li>.value</li><li>.text</li><li>.equal(val)/.contain(val)/.match(val)</li></ul></li><li>协议映射相关<ul><li>.click()</li><li>.url()</li><li>.setValue()</li><li>.pause()</li><li>.waitForElementVisible()</li></ul></li></ul></li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>缓存<ul><li>开启cache后，模块和生成的chunk如果内容不变则直接用cache，主要解决增量构建过程的性能</li><li>HardSourceWebpackPlugin，缓存编译过程中间结果 npm i -D hard-source-webpack-plugin</li></ul></li><li>多线程<ul><li>HappyPack</li><li>thread-loader #官方推荐</li></ul></li><li>预先编译<ul><li>DllPlugin 把基本不变的预先打包出单独dll文件</li><li>DllReferencePlugin 配置在文件中引用dll文件</li><li>运行一次npm run dll后不需在运行除非dll包有更新</li><li>npm i -D add-asset-html-webpack-plugin dll文件提前插入html</li><li>与splitChunks功能类似，可以去除splitChunks</li></ul></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li>ecs<ul><li>const { spawn } = require(“child_process”);</li><li>ssh免密登陆</li></ul></li><li>oss<ul><li>vinyl-fs</li><li>vinyl-ftp</li></ul></li></ul><h1 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h1><h2 id="聚合配置并模版化"><a href="#聚合配置并模版化" class="headerlink" title="聚合配置并模版化"></a>聚合配置并模版化</h2><ul><li>app.config.js 聚合用户自定义配置</li><li>响应的配置都要从app.config.js中获取</li></ul><h2 id="handlebars模版化"><a href="#handlebars模版化" class="headerlink" title="handlebars模版化"></a>handlebars模版化</h2><ul><li>template 存放模版</li><li>meta.js 配置入口<ul><li>helpers<ul><li>语法{{#helperName}}...{{/helperName}}</li><li>内置helper if,上面都语法可根据helperName的truthy进行判断</li><li>自定义registerHelper</li></ul></li><li>prompts</li><li>filters</li><li>completeMessage</li></ul></li></ul><h2 id="cli-1"><a href="#cli-1" class="headerlink" title="cli"></a>cli</h2><ul><li>工作流程<ul><li>运行命令 mc init weex pro</li><li>下载模版 </li><li>交互配置信息</li><li>渲染模版</li></ul></li><li>mc<ul><li>1个主命令</li><li>2个子命令<ul><li>mc init</li><li>mc help 默认子命令</li></ul></li></ul></li><li>主命令开发<ul><li>npm i commander</li><li>npm link #将包链接到全局</li></ul></li><li>子命令模块<ul><li>commander</li><li>chalk</li><li>inquirer</li><li>download-git-repo</li><li>rimraf</li><li>user-home</li><li>ora</li><li>metalsmith  <ul><li>文件处理工具,从哪里读，做什么处理，写到哪里去</li><li>use方法绑定插件</li><li>source设定源文件目录</li><li>destination指定文件写入的目录</li><li>clean(true|false)写入前是否删除原来已经存在的文件</li><li>build完成对文件的处理接收回调</li><li>metadata读取全局数据对象</li></ul></li><li>handlebars </li><li>async </li><li>consolidate<ul><li>各种模版引擎的整合库</li><li>还需要引用需要的模版引擎库</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin/mc</span><br><span class="line"></span><br><span class="line">#!/usr/bin/env node</span><br><span class="line">const program = require(&apos;commander&apos;);</span><br><span class="line">program</span><br><span class="line">  .version(require(&apos;../package&apos;).version)</span><br><span class="line">  .usage(&apos;&lt;command&gt; [options]&apos;)</span><br><span class="line">  .command(&apos;init&apos;, &apos;generate a new fe project&apos;);</span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h1&gt;&lt;h2 id=&quot;loader&quot;&gt;&lt;a href=&quot;#loader&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://prief.github.io/2019/08/17/webpack/"/>
    <id>https://prief.github.io/2019/08/17/webpack/</id>
    <published>2019-08-17T08:29:05.000Z</published>
    <updated>2019-09-02T16:22:50.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="webpack及发展历史"><a href="#webpack及发展历史" class="headerlink" title="webpack及发展历史"></a>webpack及发展历史</h2><ul><li>目的<ul><li>css的预处理</li><li>ES6等的支持</li><li>图片压缩</li><li>发布产物的压缩混淆</li></ul></li><li>同类<ul><li>rollup</li><li>parcel</li></ul></li><li>安装准备<ul><li>brew install nvm , windows可以安装nvm-windows</li><li>nvm install v10.16.3</li><li>node -v</li><li>npm -v</li><li>mkdir webpack-demo &amp;&amp; cd webpack-demo</li><li>npm init -y</li><li>npm i -D webpack webpack-cli</li><li>./node_modules/.bin/webpack -v</li></ul></li></ul><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ul><li>基础<ul><li>mode</li><li>entry</li><li>output</li><li>module</li><li>plugins</li></ul></li><li>mode<ul><li>production 默认</li><li>development</li><li>none</li></ul></li><li>entry<ul><li>单入口 “path”</li><li>多入口 {name:path}</li></ul></li><li>output<ul><li>path 输出路径</li><li>filename 构建文件名称<ul><li>‘[name]’ 对应入口中的name</li><li>‘[hash]’ 对应文件的hash</li></ul></li></ul></li><li>loaders<ul><li>本质是一个函数，接收源文件作为参数输出转换后的结果</li><li>babel-loader<ul><li>解析ES6/7</li><li>需要安装@babel/core @babel/preset-env @babel/proposal-class-properties等</li><li>配置文件.babelrc中增加presets和plugins</li></ul></li><li>style-loader<ul><li>将css插入head的style标签</li></ul></li><li>css-loader<ul><li>解析.css文件转换成commonjs对象</li></ul></li><li>less-loader<ul><li>解析less代码成css，依赖less</li></ul></li><li>file-loader<ul><li>解析各种文件资源（图片/字体等）</li><li>如果希望能把小资源转成base64可以使用url-loader的limit</li><li>把二进制文件转成base64后文件大小会增加二进制文件的1/3左右</li></ul></li><li>raw-loader 将文件以字符串内容形式导入</li><li>thread-loader</li></ul></li><li>plugins<ul><li>本质是一个类，实现了apply方法</li><li>CommonsChunkPlugin chunk相同代码抽取成公共js</li><li>CleanWebpackPlugin 清理构建目录</li><li>CopyWebpackPlugin</li><li>ZipWebpackPlugin 将打包出的资源生成一个zip包</li><li>HtmlWebpackPlugin </li><li>ExtractTextWebpackPlugin</li><li>MiniCssExtractPlugin 需要配合.loader替换style-loader进行css文件提取</li><li>OptimizeCssAssetsWebpackPlugin</li><li>UglifyjsWebpackPlugin</li></ul></li></ul><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><ul><li><p>构建监听</p><ul><li>webpack 命令行传 –watch</li><li>webpack.config.js中 watch:true</li><li>是通过轮询文件最后修改时间进行的，同时也有aggregateTimeout防止短时间多次修改，有poll指定每秒轮询多少次，ignore指定忽略，这些属性在watchOptions中</li></ul></li><li><p>WDS</p><ul><li>webpack-dev-server</li><li>WDS不输出文件都是存在内存中，所以不用手动刷新浏览器可实现HMR</li><li>dev: “webpack-dev-server –open”</li><li>webpack.config.js<ul><li>mode: ‘development’</li><li>plugins: [new webpack.HotModuleReplacementPlugin()]</li><li>devServer:{hot:true,contentBase:’./dist’}</li></ul></li><li>WDS灵活定制版WDM webapck-dev-middleware</li><li>HMR <ul><li>由compiler把源码编译成bundle和HMR的patch</li><li>bundle由本地的bundleServer返回给浏览器</li><li>HMR的patch由本地的HMRServer(WebSockt)返回浏览器的HMRRuntime</li><li>浏览器执行bundle和patch执行代码</li></ul></li></ul></li><li><p>文件指纹</p><ul><li>hash 和整个项目有关，只要项目内有变化hash就变，文件处理也可以用[hash:8]</li><li>chunkhash 不同的entry会生成不同的chunkhash，常用于js，常设置在output.filename中[chunkhash:8]</li><li>contenthash 文件内容不变contenthash不变，常用于css，常设置在MiniCssExtractPlugin的filename中[contenthash:8]</li></ul></li><li><p>代码压缩</p><ul><li>html 使用html-webpack-plugin的minify对象属性</li><li>css 使用optimize-css-assets-webpack-plugin和cssnano</li><li>js 内置了uglifyjs-webpack-plugin</li></ul></li><li><p>postcss</p><ul><li>autoprefixer<ul><li>o presto</li><li>ms trident</li><li>moz gecko</li><li>webkit webkit</li></ul></li><li>npm i -D postcss-loader autoprefixer</li></ul></li><li><p>屏幕分辨率</p><ul><li>rem: font-size of the root element，是相对单位</li><li>npm i -D px2rem-loader</li><li>options:{remUnit:75,remPrecision:8}</li><li>npm i lib-flexible lib-flexible在页面渲染时计算rem的值</li></ul></li><li><p>内联资源到html</p><ul><li>内联html/js<ul><li>raw-loader </li><li>html模版里写${ require(‘raw-loader!./meta.html’)} 直接内联html</li><li>script里写${ require(‘raw-loader!babel-loader!../node_modules/lib-flexible/flexible.js’) }内联js</li></ul></li><li>内联css<ul><li>style-loader options:{insertAt:’top’,singleton:true //所有style合并成1个 }</li><li>html-inline-css-webpack-plugin 将打包好的css内联</li></ul></li></ul></li><li><p>MPA</p><ul><li>手动的可增加1个entry，然后增加1个对应的htmlWP，不方便维护</li><li>通用的动态设置entry:glob.sync(path.join(__dirname,’./src/*/index.js’))和对应的htmlWP<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const setMPA = () =&gt; &#123;</span><br><span class="line">    const entry = &#123;&#125;;</span><br><span class="line">    const htmlWebpackPlugins = [];</span><br><span class="line">    const entryFiles = glob.sync(path.join(__dirname, &apos;./src/*/index.js&apos;));</span><br><span class="line">    Object.keys(entryFiles)</span><br><span class="line">        .map((index) =&gt; &#123;</span><br><span class="line">            const entryFile = entryFiles[index];</span><br><span class="line">            const match = entryFile.match(/src\/(.*)\/index\.js/);</span><br><span class="line">            const pageName = match &amp;&amp; match[1];</span><br><span class="line"></span><br><span class="line">            entry[pageName] = entryFile;</span><br><span class="line">            htmlWebpackPlugins.push(</span><br><span class="line">                new HtmlWP(&#123;</span><br><span class="line">                    inlineSource: &apos;.css$&apos;,</span><br><span class="line">                    template: path.join(__dirname, `src/$&#123;pageName&#125;/index.html`),</span><br><span class="line">                    filename: `$&#123;pageName&#125;.html`,</span><br><span class="line">                    chunks: [&apos;vendors&apos;, pageName],</span><br><span class="line">                    inject: true,</span><br><span class="line">                    minify: &#123;</span><br><span class="line">                        html5: true,</span><br><span class="line">                        collapseWhitespace: true,</span><br><span class="line">                        preserveLineBreaks: false,</span><br><span class="line">                        minifyCSS: true,</span><br><span class="line">                        minifyJS: true,</span><br><span class="line">                        removeComments: false</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        entry,</span><br><span class="line">        htmlWebpackPlugins</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123;entry,htmlWebpackPlugins&#125; = setMPA()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sourceMap</p><ul><li>开发环境使用，生产环境只需要传到监控平台</li><li>关键字<ul><li>eval 使用eval包裹模块代码，最后面制定对应的源文件，不生成单独的map文件</li><li>cheap 不包含列信息</li><li>source-map 生成.map文件</li><li>inline 将.map作为DataURI嵌入，不单独生成.map</li><li>module 包含loader的source-map,可对依赖分析</li></ul></li><li>类型<ul><li>生产环境使用source-map，map文件上传到监控平台</li><li>开发环境使用eval-source-map，加速打包</li></ul></li></ul></li><li><p>提取公共资源</p><ul><li>基础库(vue/react/react-dom)分离到cdn，可使用html-webpack-externals-plugin</li><li>也可以用webpack4内置的splitChunksPlugin代替CommonsChunkPlugin</li><li>chunks说明<ul><li>async 默认选项，表示异步引入的库进行分离</li><li>initial 同步引入的库进行分离</li><li>all 推荐使用，所有引入的库都进行分离</li></ul></li><li>chunks分离后需要把分离出的name添加到htmlWP中的chunks<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">       splitChunks:&#123;</span><br><span class="line">           minSize: 0,</span><br><span class="line">           maxSize:1000,</span><br><span class="line">           minChunks: 2,</span><br><span class="line">           cacheGroups:&#123;</span><br><span class="line">               vendors:&#123;</span><br><span class="line">                   test:/(react|react-dom)/,</span><br><span class="line">                   name:&quot;vendors&quot;,</span><br><span class="line">                   chunks:&quot;all&quot;</span><br><span class="line">               &#125;,</span><br><span class="line">               commons:&#123;</span><br><span class="line">                 name:&quot;commons&quot;,</span><br><span class="line">                 chunks:&quot;all&quot;,</span><br><span class="line">                 minChunks:2</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>treeShaking</p><ul><li>把模块中没被引用的方法在uglify阶段去除掉</li><li>使用<ul><li>必须是ES6的语法，不能用在CommonJS，ES6可以静态分析</li><li>在.babelrc里设置module:false即可</li><li>mode为production情况下默认开启了此功能</li><li>要求导出的函数不能有副作用，否则也会失效</li></ul></li><li>原理<ul><li>DCE dead code elimination 无用代码擦除<ul><li>代码不可到达</li><li>代码执行的结果不会被用到</li><li>只写不读的代码</li></ul></li><li>ES6模块特点<ul><li>import只能出现在代码顶层</li><li>import的模块名只能是字符串常量</li><li>import的binding是immutable的</li></ul></li></ul></li></ul></li><li><p>ScopeHoisting</p><ul><li>问题<ul><li>构建后的模块代码都是通过闭包实现IIFE</li><li>大量的闭包导致代码体积增大，运行时内存开销增大</li></ul></li><li>分析<ul><li>把所有的模块都包裹一层函数形成IIFE</li><li>把import转换成_webpack_require,export转换成_webpack_exports</li><li>把所有模块都缓存到modules数组</li><li>通过WEBPACK_REQUIRE_METHOD(0) 启动程序</li></ul></li><li>scopeHoisting将模块代码按照引用顺序放在一个函数作用域，适当的做重命名防止变量冲突，达到减少函数声明和内存开销</li><li>使用时mode设置为production默认开启</li><li>手动开启使用 new webpack.optimize.ModuleConcatenationPlugin()</li></ul></li><li><p>动态import</p><ul><li>把相同的代码抽离到一个共享模块，在通过懒加载动态import使初始下载的代码更小</li><li>懒加载<ul><li>CommonJS使用方式require.ensure()</li><li>ES6使用方式 动态import目前还没有原生支持，需要babel插件<ul><li>npm i @babel/plugin-syntax-dynamic-import</li><li>.babelrc中plugins:[‘@babel/plugin-syntax-dynamic-import’]</li><li>代码中需要的地方用import(‘./dynamic.js’).then()</li></ul></li></ul></li></ul></li><li><p>ESLint</p><ul><li>制定规范<ul><li>基于eslint:recommmend配置进行改进，不重复造轮子</li><li>能够帮助发现错误的规则全部开启</li><li>保持风格统一，不要限制开发体验</li></ul></li><li>落地<ul><li>和CICD集成 如gitlab的pipline</li><li>和webpack集成</li></ul></li><li>本地开发增加precommit钩子(本地可以–no-verify绕过，所以CICD必须要有)<ul><li>npm i -D husky</li><li>“precommit”: “lint-staged”</li><li>“lint-staged”: {“linters”:”*.{js,scss}”:[“eslint –fix”, “git add”]}</li></ul></li><li>webpack集成ESLint<ul><li>.js文件先用eslint-loader再使用babel-loader</li><li>npm i -D eslint eslint-loader babel-eslint eslint-plugin-import …</li><li>.eslintrc.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    parser:&quot;babel-eslint&quot;,</span><br><span class="line">    extends:[&apos;&apos;],</span><br><span class="line">    env:&#123;</span><br><span class="line">        browser:true,</span><br><span class="line">        node:true</span><br><span class="line">    &#125;,</span><br><span class="line">    rules:&#123;</span><br><span class="line">        indent:[2,2]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>打包库和组件</p><ul><li>需求<ul><li>打包压缩版和非压缩版</li><li>支持AMD/CJS/ESM模块引入和script直接引入，统称UMD</li></ul></li><li>实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const TerserPlugin = require(&apos;terser-webpack-plugin&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode:&apos;none&apos;,</span><br><span class="line">  entry:&#123;</span><br><span class="line">    &apos;name&apos;:&apos;./src/index.js&apos;,</span><br><span class="line">    &apos;name.min&apos;:&apos;./src/index.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:&apos;[name].js&apos;,</span><br><span class="line">    library:&apos;libName&apos;, // 库的全局变量</span><br><span class="line">    libraryExport:&apos;default&apos;,</span><br><span class="line">    libraryTarget:&apos;umd&apos; // 库的引入方式</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    minimize:true,</span><br><span class="line">    minimizer:[</span><br><span class="line">      new TerserPlugin(&#123;</span><br><span class="line">        include:/\.min\.js$/, //只对.min压缩</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// package.json</span><br><span class="line">&quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">  &quot;prepublish&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// index.js</span><br><span class="line">if(process.env.NODE_ENV === &apos;production&apos;)&#123;</span><br><span class="line">  module.exports = require(&apos;./dist/name.min.js&apos;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  module.exports = require(&apos;./dist/name.js&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>SSR</p><ul><li>server side render</li><li>优势<ul><li>减少网络请求</li><li>减少白屏时间</li><li>对SEO友好</li></ul></li><li>实现思路<ul><li>服务端使用server的renderToString将组件渲染成字符串，路由返回对应的字符串模板</li><li>客户端进行环境判断请求对应的文件</li></ul></li><li>问题<ul><li>nodejs中没有浏览器的window需要hack：if(typeof window === ‘undefined’){ global.window = {} }</li><li>不兼容的组件需要根据打包环境进行适配</li><li>http请求需要改写成axios</li><li>css样式不显示可以采用浏览器端模板占位符替换的方式’<!--HTML_PLACEHOLDER-->‘</li><li>首屏业务数据也可用模板占位符替换的方式<!--INITIAL_DATA_PLACEHOLDER--></li></ul></li></ul></li><li><p>优化构建日志</p><ul><li>webpack.config.js中stats字段控制统计信息<ul><li>errors-only</li><li>minimal</li><li>none | false</li><li>normal | true</li><li>verbose </li></ul></li><li>friendly-errors-webpack-plugin<ul><li>stats: ‘errors-only’</li><li>new FriendlyErrorsWebpackPlugin()</li><li>日志提示<ul><li>success</li><li>warning</li><li>error</li></ul></li></ul></li></ul></li><li><p>构建异常和中断</p><ul><li>如果没有错误则process.exit(0)</li><li>如果有错误则process.exit(非0)，回调函数err.code则为非0数值</li><li>compiler每次构建结束后都会触发done这个hook</li><li>hook回调stats.compilation.errors错误对象</li></ul></li></ul><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="可维护的配置"><a href="#可维护的配置" class="headerlink" title="可维护的配置"></a>可维护的配置</h2><ul><li><p>抽离成npm包的意义</p><ul><li>通用性<ul><li>开发者无需关注构建配置</li><li>统一团队构建脚本</li></ul></li><li>可维护性<ul><li>构建配置合理拆分</li><li>README/CHANGELOG</li></ul></li><li>质量<ul><li>冒烟测试/单元测试/测试覆盖率</li><li>CI</li></ul></li></ul></li><li><p>构建配置管理的可选方案</p><ul><li>通过多个配置文件管理对应环境 webpack –config参数控制</li><li>构建配置设计成一个库 如neutrino webpack-blocks</li><li>设计成一个工具 如create-react-app nwb</li><li>配置放在一个文件，通过–env控制</li></ul></li><li><p>构建配置包设计</p><ul><li>通过多个配置文件管理对应环境<ul><li>webpack.base.js<ul><li>资源解析(es6/react/css/less/图片/字体)</li><li>样式增强(css前缀自动补齐/px2rem)</li><li>目录清理</li><li>多页面打包</li><li>构建过程日志优化</li><li>构建错误捕获和处理</li><li>css提取成一个单独的文件</li></ul></li><li>webpack.dev.js<ul><li>hmr</li><li>sourcemap</li></ul></li><li>webpack.prod.js<ul><li>代码压缩</li><li>文件指纹</li><li>treeShaking</li><li>scopeHoisting</li><li>速度优化 基础包放cdn</li><li>体积优化 代码分割动态import</li></ul></li><li>webpack.ssr.js<ul><li>output.libraryTarget</li><li>css解析</li></ul></li></ul></li><li>npm包<ul><li>规范(git commit/READMEESLINT/SemVer)</li><li>质量(冒烟测试/单元测试/测试覆盖率/CI)</li></ul></li><li>配置组合<ul><li>webpack-merge</li><li>module.exports=merge(baseConf,devConf)</li></ul></li><li>目录结构<ul><li>test/</li><li>lib/</li><li>README.md</li><li>CHANGELOG.md</li><li>.eslintrc.js</li><li>.gitignore</li><li>package.json</li><li>index.js</li></ul></li></ul></li><li><p>构建包使用ESLINT</p><ul><li>使用eslint-config-airbnb-base规则集</li><li>使用eslint –fix做自动修复</li><li>package.json “lint”:”eslint ./lib –fix”</li><li>.eslintrc.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends:[&apos;airbnb-base&apos;],</span><br><span class="line">  parser:&apos;babel-eslint&apos;,</span><br><span class="line">  env:&#123;</span><br><span class="line">    browser:true,</span><br><span class="line">    node:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>冒烟测试smoke testing</p><ul><li>指对提交测试的软件在进行详细测试前的预测试</li><li>主要目的是暴露基本功能失效的严重问题</li><li>执行<ul><li>构建是否成功 webpack(conf,(err,stats)=&gt;{})</li><li>是否生成对应文件 glob.sync([‘*.js’]).length</li></ul></li></ul></li><li><p>单元测试和测试覆盖率</p><ul><li>框架<ul><li>mocha(单纯的测试框架)+chai(断言库)</li><li>jasmine/jest 集成框架，开箱即用</li></ul></li><li>mocha接入<ul><li>npm i -D mocha chai</li><li>test.js中编写describe/it/expect</li><li>package.json中”test”:”mocha “</li><li>npm run test</li></ul></li><li>测试覆盖率<ul><li>npm i -D istanbul</li><li>package.json中”test”:”istanbul cover mocha”</li></ul></li></ul></li><li><p>CI</p><ul><li>作用<ul><li>快速发现错误</li><li>防止分支大幅偏离主干</li></ul></li><li>措施<ul><li>集成前必须跑通测试，否则不予集成</li></ul></li><li>排名<ul><li>travis-ci</li><li>circle-ci</li><li>jenkins-ci</li></ul></li></ul></li><li><p>发布npm包</p><ul><li>npm login</li><li>npm version patch|minor|major(自动git提交和tag)</li><li>npm publish</li></ul></li><li><p>git提交规范和changeLog生成</p><ul><li>提交规范优势<ul><li>加快review流程</li><li>根据提交生成changeLog</li><li>可追溯可回顾</li></ul></li><li>技术方案<ul><li>目地统一提交日志标准</li><li>使用angular的git commit规范<ul><li>信息分3部分，空行分割<ul><li>标题(首字母不大写，末尾不要标点)<ul><li>type(scope): subject</li></ul></li><li>主题内容</li><li>尾注</li></ul></li><li>提交类型type限制<ul><li>feat：新增feature</li><li>fix：修复bug</li><li>docs：仅仅修改了文档</li><li>style：仅仅修改文件样式，不改变逻辑</li><li>perf：优化相关，提升体验性能等</li><li>refactor：代码重构无新功能或bug修复</li><li>test：测试用例</li><li>chore：改变构建流程或增加依赖库工具</li><li>revert：回滚到上一版本</li></ul></li><li>scope(可根项目分成大类如docs/components)</li><li>主题内容可以详细列明每个修改点影响点</li><li>尾注可以增加链接或关闭issue等</li></ul></li><li>日志提交时友好的提示工具:commitize</li><li>不符合要求的拒绝提交:validate-commit-msg</li><li>统一changeLog文档信息生成:conventional-changelog-cli</li></ul></li><li>本地增加precommit钩子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i -D husky validate-commit-msg conventional-changelog-cli</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">  &quot;commitmsg&quot;:&quot;validate-commit-msg&quot;,</span><br><span class="line">  &quot;changelog&quot;:&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语义化版本号</p><ul><li>semantic versioning<ul><li>major 做了不兼容api的修改</li><li>minor 做了向下兼容的功能新增</li><li>patch 做了向下兼容的问题修正</li><li>major.minor.patch版本号严格递增</li></ul></li><li>优势<ul><li>避免出现循环依赖</li><li>减少依赖冲突</li></ul></li><li>发布重要版本时可以发先行版本<ul><li>alpha 内测版</li><li>beta 外部小范围测试版，可以加新功能</li><li>rc 公测版release candidate不会加新功能，主要用排错</li><li>major.minor.patch-alpha.2</li></ul></li></ul></li></ul><h2 id="构建速度和体积优化"><a href="#构建速度和体积优化" class="headerlink" title="构建速度和体积优化"></a>构建速度和体积优化</h2><ul><li><p>初级分析</p><ul><li>使用webpack内置的stats<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">  &quot;build:stats&quot;:&quot;webpack --env production --json &gt; stats.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>速度分析</p><ul><li>使用speed-measure-webpack-plugin插件</li><li>可以看到每个loader和插件执行耗时和总耗时<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i -D speed-measure-webpack-plugin</span><br><span class="line"></span><br><span class="line">const SMWP = require(&apos;speed-measure-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">const smp = new SMWP();</span><br><span class="line"></span><br><span class="line">module.exports = smp.wrap(WEBPACK_CONFIG)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>体积分析</p><ul><li>使用webpack-bundle-analyzer插件</li><li>构建完毕自动在8888端口展示结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-bundle-analyzer</span><br><span class="line"></span><br><span class="line">const &#123; BundleAnalyzerPlugin&#125; = require(&apos;webpack-bundle-analyzer&apos;);</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">  new webpack-bundle-analyzer()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>速度提升</p><ul><li>使用高版本nodejs和webpack，从底层做了优化</li><li>多进程多实例构建 thread-loader </li><li>多进程多实例并行压缩terser-webpack-plugin<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">npm i -D thread-loader terser-webpack-plugin</span><br><span class="line"></span><br><span class="line">use:[</span><br><span class="line">  &#123;</span><br><span class="line">    loader:&quot;thread-loader&quot;,</span><br><span class="line">    options:&#123;</span><br><span class="line">      workers:3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;babel-loader&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">optimization:&#123;</span><br><span class="line">  minimizer:[</span><br><span class="line">    new TerserWebpackPlugin(&#123;</span><br><span class="line">      parallel:true // 默认cpu核心2倍-1</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进一步分包</p><ul><li>htmlWebpackExternalsPlugin将基础包分离到cdn引入的缺点是可能有很多基础包很多script请求</li><li>splitChunks缺点是每次都要分析依赖的基础包</li><li>DLLPlugin分包可以把框架基础包和业务基础包进行预编译，打包成一个文件，然后通过DLLReferencePlugin对manifest.json引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// webpack.dll.js</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">    library:[</span><br><span class="line">      &apos;react&apos;,</span><br><span class="line">      &apos;react-dom&apos;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:&quot;[name]_[chunkhash]_dll.js&quot;,</span><br><span class="line">    path:path.join(__dirname,&apos;dll&apos;),</span><br><span class="line">    library:&quot;[name]&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    new webpack.DllPlugin(&#123;</span><br><span class="line">      name:&quot;[name]_[hash]&quot;,</span><br><span class="line">      path:path.join(__dirname,&apos;dll/[name].json&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// package.json</span><br><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">  &quot;dll&quot;:&quot;webpack --config webpack.dll.js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// webpack.prod.js</span><br><span class="line"></span><br><span class="line">new webpack.DllReferencePlugin(&#123;</span><br><span class="line">  manifest: require(&apos;./dll/library.json&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>缓存</p><ul><li>提升二次构建速度</li><li>思路<ul><li>babel-loader开启缓存</li><li>terser-webpack-plugin开启缓存</li><li>hard-source-webpack-plugin开启缓存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// babel-loader</span><br><span class="line">&apos;babel-loader?cacheDirectory=true&apos;</span><br><span class="line"></span><br><span class="line">// terser-webpack-plugin</span><br><span class="line">optimization:&#123;</span><br><span class="line">  minimizer:[</span><br><span class="line">    new TerserWebpackPlugin(&#123;</span><br><span class="line">      parallel:true,</span><br><span class="line">      cache:true</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// hard-source-webpack-plugin</span><br><span class="line">let HSWP= require(&apos;hard-source-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">  new HSWP()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>缩小构建目标</p><ul><li>尽可能少的构建模块 exclude:’node_modules’</li><li>减少文件搜索范围<ul><li>优化resolve.modules [path.resolve(__dirname,’node_modules’)]</li><li>优化resolve.mainFields [‘main’]</li><li>优化resolve.extensions [‘.js’,’.json’]</li><li>优化resolve.alias {react:path.resolve(__dirname,’node_modules/….js’)}</li></ul></li></ul></li><li><p>图片压缩</p><ul><li>基于nodejs的imagemin或tinypng的api，使用image-webpack-loader</li><li>imagemin优势<ul><li>很多可配置项目</li><li>可引入第三方优化插件</li><li>可处理多种图片格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  loader: &apos;image-webpack-loader&apos;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    mozjpeg: &#123;</span><br><span class="line">      progressive: true,</span><br><span class="line">      quality: 65</span><br><span class="line">    &#125;,</span><br><span class="line">    // optipng.enabled: false will disable optipng</span><br><span class="line">    optipng: &#123;</span><br><span class="line">      enabled: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    pngquant: &#123;</span><br><span class="line">      quality: &apos;65-90&apos;,</span><br><span class="line">      speed: 4</span><br><span class="line">    &#125;,</span><br><span class="line">    gifsicle: &#123;</span><br><span class="line">      interlaced: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    // the webp option will enable WEBP</span><br><span class="line">    webp: &#123;</span><br><span class="line">      quality: 75</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>treeShaking擦除无用css</p><ul><li>默认模块中只要有一个方法被引用整个文件会被打入bundle中，treeShaking是在uglify阶段擦除无用</li><li>webpack4中production默认开启treeShaking</li><li>前提必须是ESM语法，CJS不支持</li><li>手动开启需要在.babelrc中设置modules:false</li><li>删除无用css2种方案<ul><li>purifyCSS 遍历代码，识别已经用到的css</li><li>uncss 通过document.querySelector进行识别</li></ul></li><li>实践<ul><li>purgecss-webpack-plugin + mini-css-extract-plugin</li></ul></li></ul></li><li><p>动态polyfill</p><ul><li>减少构建体积</li><li>polyfill是根据UA下发需要的polyfill来按需加载</li><li>可以直接script[src=’’]来引用polyfill.io服务</li><li>也可以基于官方开源的方案自建polyfill的cdn服务</li><li>ua篡改也可以根据代码结果降级为获取全部polyfill</li></ul></li></ul><h1 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h1><h2 id="源码掌握原理"><a href="#源码掌握原理" class="headerlink" title="源码掌握原理"></a>源码掌握原理</h2><h2 id="自定义loader"><a href="#自定义loader" class="headerlink" title="自定义loader"></a>自定义loader</h2><h2 id="自定义plugin"><a href="#自定义plugin" class="headerlink" title="自定义plugin"></a>自定义plugin</h2><h1 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h1><h2 id="react全家桶"><a href="#react全家桶" class="headerlink" title="react全家桶"></a>react全家桶</h2><h2 id="商城项目"><a href="#商城项目" class="headerlink" title="商城项目"></a>商城项目</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h1&gt;&lt;h2 id=&quot;webpack及发展历史&quot;&gt;&lt;a href=&quot;#webpack及发展历史&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="webpack" scheme="https://prief.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vscode</title>
    <link href="https://prief.github.io/2019/08/15/vscode/"/>
    <id>https://prief.github.io/2019/08/15/vscode/</id>
    <published>2019-08-15T14:44:49.000Z</published>
    <updated>2019-08-17T08:08:19.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul><li>cmd + shift + P<ul><li>shell &amp;&amp; install code in PATH</li><li>transfrom upper|lower</li></ul></li><li>cmd + P<ul><li>快速搜索打开文件</li></ul></li><li>cmd<ul><li>code –help</li><li>code -r reuseWindow folder|file</li><li>code -r -g package.json:128 #打开文件128行</li><li>code -r -d file1 file2 #对比2个文件</li><li>ls | code -r - #接受管道数据</li></ul></li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h2><ul><li>option + 左箭头 #单词为单位向左跳动</li><li>option + 右箭头 #单词为单位向右跳动</li><li>cmd + 左箭头  #直接跳到行首</li><li>cmd + 右箭头  #直接跳到行尾</li><li>cmd + 上箭头  #直接跳到文件头部</li><li>cmd + 下箭头  #直接跳到文件尾部</li><li>cmd + Enter  #下面开始一行</li><li>cmd + option + 上下 # 创建多光标</li><li>ctrl + g #跳到指定行</li><li>cmd + shift + O #跳到指定符号</li></ul><h2 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h2><ul><li>移动光标的同时按住shift进行文本的选择</li><li>cmd + D #多文本选择</li></ul><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ul><li>option + 上下 #移动当前行</li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ul><li>option + shift + 上下 #复制当前行</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul><li>cmd + delete #删除光标到行首</li><li>cmd + shift + K #删除当前行</li><li>cmd + X #剪切</li></ul><h2 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h2><ul><li>option + shift + F </li></ul><h1 id="vscode相关"><a href="#vscode相关" class="headerlink" title="vscode相关"></a>vscode相关</h1><h2 id="创建codeSnippets"><a href="#创建codeSnippets" class="headerlink" title="创建codeSnippets"></a>创建codeSnippets</h2><ul><li>cmd + shift + P</li><li>user snippets<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &quot;Print to console&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &quot;log&quot;,</span><br><span class="line">    &quot;body&quot;: [</span><br><span class="line">        &quot;console.log($&#123;1:i&#125;);&quot;,</span><br><span class="line">        &quot;console.log($&#123;1:i&#125; + 1); // $&#123;1:i&#125; + 1&quot;,</span><br><span class="line">        &quot;$2&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;description&quot;: &quot;Log output to console&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="vscode"><a href="#vscode" class="headerlink" title=".vscode"></a>.vscode</h2><ul><li>settings.json</li><li>tasks.json</li><li>launch.json</li><li>extensions.json</li></ul><h2 id="语言支持"><a href="#语言支持" class="headerlink" title="语言支持"></a>语言支持</h2><ul><li>json<ul><li>可自己定义jsonSchema做智能提示</li></ul></li><li>markdown<ul><li>open preview</li></ul></li><li>js<ul><li>jsDoc(可做接口文档/编码提示)</li><li>d.ts(ts接口定义)</li><li>// @ts-check 开启ts校验逐步过度到ts</li><li>logpoint 把原本调试时需要的console.log与断点结合 { str + “” }</li></ul></li><li>emmet<ul><li>emmet.triggerExpansionOnTab: true #输入后按tab自动展开</li><li>“emmet.includeLanguages”: {“vue-html”: “html”}</li><li>ui&gt;li*3</li><li>div+p</li><li>div#list&gt;li.list-item</li><li>#page&gt;div.logo+ul#navigation&gt;li*5&gt;a{Item $}</li><li>转到匹配对/删除节点(自动删除开闭节点)</li></ul></li></ul><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><ul><li>是一个nodejs应用</li><li>可以操作vscodeAPI进行插件功能实现</li></ul><h2 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h2><ul><li>npm i -g yeoman generator-code</li><li>yo code myExtName</li><li>extension.js<ul><li>const vscode = require(“vscode”);</li><li>exports.activate = function activate(ctx){}</li><li>exports.deactivate = function deactivate(){}</li></ul></li><li>package.json<ul><li>engines : { “vscode”: “^1.29.0” }</li><li>“activationEvents”: [ “onCommand:extension.sayHello” ]</li><li>“contributes”: { “commands”: [ {“command”: “extension.sayHello”, “title”: “Hello World” }]}</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令面板&quot;&gt;&lt;a href=&quot;#命令面板&quot; class=&quot;headerlink&quot; title=&quot;命令面板&quot;&gt;&lt;/a&gt;命令面板&lt;/h1&gt;&lt;h2 id=&quot;常用&quot;&gt;&lt;a href=&quot;#常用&quot; class=&quot;headerlink&quot; title=&quot;常用&quot;&gt;&lt;/a&gt;常用&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my tools</title>
    <link href="https://prief.github.io/2019/08/11/my-tools/"/>
    <id>https://prief.github.io/2019/08/11/my-tools/</id>
    <published>2019-08-11T03:13:12.000Z</published>
    <updated>2019-08-17T06:45:33.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><ul><li>git</li><li>iterm</li><li>wireshark</li></ul><h1 id="fe"><a href="#fe" class="headerlink" title="fe"></a>fe</h1><ul><li>chrome</li><li>vscode<ul><li>vscode-icons</li><li>markdown TOC</li><li>gitlens</li><li>debugger for chrome</li><li>code runner</li><li>Java Extension Pack</li><li>go</li><li>python</li></ul></li><li>node<ul><li></li></ul></li></ul><h1 id="android"><a href="#android" class="headerlink" title="android"></a>android</h1><ul><li>as</li></ul><h1 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h1><ul><li>homebrew</li><li>xcode</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;os&quot;&gt;&lt;a href=&quot;#os&quot; class=&quot;headerlink&quot; title=&quot;os&quot;&gt;&lt;/a&gt;os&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;iterm&lt;/li&gt;
&lt;li&gt;wireshark&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;fe&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="tools" scheme="https://prief.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>net protocol &amp; capature packets</title>
    <link href="https://prief.github.io/2019/08/11/net-protocol-capature-packets/"/>
    <id>https://prief.github.io/2019/08/11/net-protocol-capature-packets/</id>
    <published>2019-08-10T23:30:55.000Z</published>
    <updated>2019-08-15T13:54:34.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="协议栈"><a href="#协议栈" class="headerlink" title="协议栈"></a>协议栈</h2><ul><li>应用层<ul><li>http/1.1</li><li>websocket</li><li>http/2.0</li></ul></li><li>表示层<ul><li>tls/ssl</li></ul></li><li>传输层<ul><li>tcp</li></ul></li><li>网络层<ul><li>ip</li></ul></li><li>链路层<ul><li>以太网</li></ul></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>chrome</li><li>wireshark</li><li>dig</li><li>tcpdump</li></ul><h1 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http/1.1"></a>http/1.1</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>RFC: request for comments</li><li>http/1.1<ul><li>无状态</li><li>请求/响应模式</li><li>可扩展的语义</li><li>自描述的消息格式</li></ul></li><li>ABNF: 扩充巴科斯-瑙尔范式<ul><li>空白字符SP来分割各个元素</li><li>/表示可供选择的规则</li><li>%x##-##表示值的范围</li><li>()组合，视为一个元素</li><li>m*n表示重复m-n次</li><li>[]表示可选序列</li><li>DIGIT表示数字</li><li>HEXDIG表示十六进制数字</li><li>SP表示空格</li><li>CRLF表示兼容的回车换行</li></ul></li><li>OSI: open system interconnection reference model概念模型<ul><li>应用层（http/email/dns/smtp/ftp/telnet）</li><li>表示层（ssl）</li><li>会话层（session）</li><li>传输层（tcp/udp）</li><li>网络层（ip，广域网路由器）</li><li>数据链路层（mac，局域网交换机）</li><li>物理层</li></ul></li><li>TCP/IP 事实实现方案<ul><li>应用层（http/email/dns/smtp/ftp/telnet）</li><li>传输层（tcp/udp）</li><li>网络层（ip/icmp/arp）</li><li>物理层（ethernet）</li></ul></li><li>评估web架构的关键属性<ul><li>性能performance<ul><li>网络性能 throughput吞吐量&lt;=bandwidth</li><li>用户感知性能</li><li>网络效率 缓存/cdn/减少交互次数</li></ul></li><li>可伸缩性scalability</li><li>简单性simplicity</li><li>可见性visiable</li><li>可移植性portablity</li><li>可靠性reliability</li><li>可修改性modifiability<ul><li>可进化</li><li>可定制</li><li>可扩展</li><li>可配置</li><li>可重用</li></ul></li></ul></li><li>URI<ul><li>URI是URL+URN的超集，统一掉概念</li><li>schema://user:pass@hostname:port/path?query#fragment</li></ul></li><li>method<ul><li>GET</li><li>HEAD</li><li>POST</li><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li></ul></li><li>status<ul><li>1xx 请求服务器已经收到，需要进一步处理<ul><li>100 Continue常用上传大文件前</li><li>101 Switch Protocols升级协议ws/h2</li><li>102 Processing webdav协议</li></ul></li><li>2xx 成功处理了请求，当接收到不认识的2xx时默认用200<ul><li>200 OK</li><li>201 Created成功创建</li><li>202 Accepted</li><li>206 Partial Content 使用range协议返回部分内容</li></ul></li><li>3xx 重定向<ul><li>301 Moved Permanently 永久重定向，可被缓存</li><li>302 Found 临时重定向，不能被缓存</li><li>304 Not Modified 可复用缓存</li></ul></li><li>4xx 客户端错误<ul><li>400 Bad Request</li><li>401 Unauthorized未认证</li><li>403 Forbidden</li><li>404 Not Found</li></ul></li><li>5xx 服务端错误<ul><li>500 Internel Server Error 内部服务器错误，当接收到不认识的5xx时默认用500</li><li>501 Not Implemented</li><li>502 Bad Gateway</li><li>503 Service Unavailable</li><li>504 Gateway Timeout</li></ul></li></ul></li><li>长短连接 <ul><li>Connection: Keep-Alive | Close</li><li>http/1.1默认支持长连接</li><li>如果Connection后面跟header字段则表示对代理服务器要求不做此header转发</li><li>Connection只表示tcp连接的两端，不能表示跨中间的服务器</li></ul></li><li>header<ul><li>X-Forwarded-For 用于传递ip，每走一层都会append一个ip</li><li>X-Real-IP 只记录用户外网ip</li><li>Referer 来源，通常做防盗链</li><li>User-Agent</li><li>From 通常是爬虫添加的后面跟邮件地址告诉server可通过邮件联系</li><li>Allow server支持的method</li><li>Accept* 协商资源表现形式<ul><li>Accept: MIME q=0.8;</li><li>Accept-Language: zh-CN,zh q=0.8</li><li>Accept-Encoding: gzip | br | deflate</li><li>Accept-Range: bytes | none 是否支持range请求</li></ul></li><li>Transer-Encoding: chunked | gzip 不定长包体传输格式</li><li>Content-Disposition: inline | attachment[; filename=xx.xx]</li></ul></li><li>MIME<ul><li>Multipurpose Internet Mail Extensions</li><li>格式：type/subType(;params)</li><li>type<ul><li>text</li><li>image</li><li>audio</li><li>video</li><li>application</li></ul></li><li>params<ul><li>attribute=value</li></ul></li></ul></li><li>Form关键属性<ul><li>action表示uri</li><li>method表示方法<ul><li>GET</li><li>POST</li></ul></li><li>enctype<ul><li>application/x-www-form-urlencoded 默认编码方式 k=v&amp;k=v 需要encode</li><li>multipart/form-data 有boundary做分割，一般用于文件传输</li></ul></li></ul></li><li>Range请求<ul><li>做多线程下载/断点续传/点播视频等</li><li>请求头部标明<ul><li>Range: bytes=0-499[,500-1000[,1001-]]</li><li>Range: bytes=-4 最后3个字节</li><li>If-Range: Etag | httpDate 验证已经下载的部分是否有变动</li></ul></li><li>响应头部标明<ul><li>Content-Range: bytes 0-100/2000 表示共2000长度，返回了前101字节</li><li>Content-Range: bytes 0-100/* 表示不知道总长度但返回了前101字节  </li><li>Content-Range: multipart/byterages; boundary=…</li></ul></li></ul></li><li>cookie<ul><li>Set-Cookie<ul><li>每一个Set-Cookie只能设置一个name=value，如需多个需要多个Set-Cookie</li><li>name=value; expires= httpDate; max-age=X; domain=X; path=/; secure; httpOnly;</li></ul></li><li>Cookie<ul><li>可以把多个Set-Cookie返回的name组合成一个进行请求</li><li>name=value;[ name=value;]</li></ul></li></ul></li><li>同源三要素<ul><li>schema</li><li>hostname</li><li>port</li></ul></li><li>跨域<ul><li>可跨域的组件（满足可扩展可用性）<ul><li>script</li><li>link</li><li>img</li><li>iframe</li><li>video</li><li>audio</li></ul></li><li>攻击与防护<ul><li>csrf <ul><li>cross-site request forgery</li><li>通过referer可做一层防护</li><li>通过csrfToken即服务器响应表单时添加隐藏的token信息已备后续验证也可做防护</li></ul></li><li>xss cross-site scripting</li></ul></li><li>cors<ul><li>cross origin resource sharing</li><li>简单请求三要素<ul><li>GET/HEAD/POST之一</li><li>Accepte/Accept-Language/Content-Type安全header之一</li><li>Content-Type是text/plain|application/x-www-form-urlencoded|multipart/form-data之一</li></ul></li><li>复杂请求<ul><li>简单请求之外的都是复杂请求</li><li>复杂请求必须先走一个OPTIONS请求</li></ul></li><li>请求相关头部<ul><li>Origin</li><li>Access-Control-Request-Method</li><li>Access-Control-Request-Headers</li></ul></li><li>响应相关头部<ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Methods</li><li>Access-Control-Allow-Headers</li><li>Access-Control-Allow-Credentials</li><li>Access-Control-Max-Age</li></ul></li></ul></li></ul></li><li>缓存<ul><li>优先级<ul><li>s-maxage</li><li>max-age</li><li>Expires</li><li>预估过期时间（浏览器实现实现的”10%算法”）</li></ul></li><li>Cache-Control<ul><li>请求中<ul><li>max-age=t | max-stale=t | min-fresh=t </li><li>no-store | no-cache | no-transform | only-if-cached</li></ul></li><li>响应中<ul><li>must-revalidate | proxy-revalidate</li><li>public | private </li><li>no-cache | no-store | no-transform</li></ul></li></ul></li></ul></li><li>重定向<ul><li>301 http/1.0 永久重定向，可以被缓存，重定向后的请求可以改变method，通常使用get</li><li>302 http/1.0 临时重定向，不可被缓存，重定向后的请求可以改变method，通常使用get</li><li>307 http/1.1 临时重定向，不可被缓存，重定向后的请求不能改变method</li><li>308 http/1.1 永久重定向，可以被缓存，重定向后的请求不能改变method</li></ul></li><li>隧道<ul><li>tunnel通过http连接来传输非http协议格式的数据</li><li>常用于穿越防火墙/传递ssl消息</li><li>通过connect建立连接后变为双向传输，不必遵守http协议</li></ul></li><li>爬虫<ul><li>robots.txt<ul><li>User-Agent 允许哪些机器人</li><li>Disallow 禁止哪些目录</li><li>Crawl-delay 访问间隔防止流量过大</li><li>Allow 允许哪些目录</li><li>Sitemap 站点地图</li></ul></li></ul></li></ul><h2 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h2><ul><li>域名与ip之间的映射数据库</li><li>查询方式<ul><li>迭代查询</li><li>递归查询</li></ul></li><li>query<ul><li>questions<ul><li>QNAME<ul><li>.分割多段，每段字节数打头再跟其ASCII编码</li><li>最终以 00 结尾</li></ul></li><li>QTYPE<ul><li>1 A ipv4地址</li><li>2 NS 权威域名服务器</li><li>5 CNAME 别名</li><li>28 AAAA ipv6地址</li></ul></li><li>QCLASS<ul><li>IN 表示internet</li></ul></li></ul></li></ul></li><li>response<ul><li>NAME</li><li>TTL time to live</li><li>RDLENGTH RDATA length</li><li>RDATA 查询值，如ip或CNAME值</li></ul></li></ul><h1 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h1><h2 id="BPF过滤器"><a href="#BPF过滤器" class="headerlink" title="BPF过滤器"></a>BPF过滤器</h2><ul><li>Berkeley Packet Filter</li><li>在设备驱动级别提供抓包接口</li><li>表达式<ul><li>原语<ul><li>Type: host port portrange…</li><li>Dir: dst src…</li><li>proto: tcp udp…</li></ul></li><li>操作符<ul><li>&amp;&amp; and</li><li>|| or</li><li>! not</li></ul></li></ul></li></ul><h2 id="独有的显示过滤器"><a href="#独有的显示过滤器" class="headerlink" title="独有的显示过滤器"></a>独有的显示过滤器</h2><ul><li>view -&gt; internels -&gt; support protocols</li><li>操作符<ul><li>eq ==</li><li>ne !=</li><li>gt &gt;</li><li>ge &gt;=</li><li>lt &lt;</li><li>le &lt;=</li><li>contains</li><li>matches ~</li></ul></li><li>函数<ul><li>upper</li><li>lower</li><li>len</li><li>count</li><li>string</li></ul></li></ul><h1 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><ul><li>demo页面：<a href="http://www.websocket.org" target="_blank" rel="noopener">http://www.websocket.org</a></li><li>客户端发送数据要进行掩码处理防止针对代理服务器的缓存污染攻击</li><li>pingpong心跳保持会话</li><li>优点<ul><li>浏览器支持率比较高</li><li>支持服务器推送</li></ul></li><li>不足<ul><li>设计比较简单，很多功能和性能上的问题没有真正解决</li></ul></li></ul><h2 id="握手"><a href="#握手" class="headerlink" title="握手"></a>握手</h2><img src="/2019/08/11/net-protocol-capature-packets/handshake.png" title="websocket握手包头"><h2 id="解密tls"><a href="#解密tls" class="headerlink" title="解密tls"></a>解密tls</h2><ul><li>通过浏览器DEBUG日志获得tls握手阶段生成的密钥</li><li>步骤<ul><li>配置环境变量SSLKEYLOGFILE=path2log使chrome输出DEBUG日志</li><li>wireshark配置解析DEBUG日志(编辑/首选项/protocols/tls)</li></ul></li></ul><h1 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h1><h2 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h2><ul><li>http1.1的问题<ul><li>高延迟<ul><li>带宽在增加，延迟却没办法降低</li><li>浏览器并发限制</li><li>同一连接串行处理请求</li></ul></li><li>无状态特性带来了巨大的http头部</li><li>不支持服务器推送</li></ul></li><li>h2主要特性<ul><li>传输数据量大幅减小<ul><li>标头压缩</li><li>二进制传输</li></ul></li><li>多路复用并支持优先级</li><li>服务器推送</li><li>必须使用tls</li></ul></li><li>tls握手通讯过程<ul><li>验证身份</li><li>达成安全套件共识</li><li>传递密钥</li><li>加密通讯</li></ul></li><li>h2核心概念<ul><li>连接connection</li><li>数据流stream<ul><li>通过stream实现多路复用</li></ul></li><li>消息message<ul><li>header帧</li><li>data帧</li></ul></li><li>数据帧frame</li></ul></li></ul><h2 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h2><ul><li>帧头部<img src="/2019/08/11/net-protocol-capature-packets/frameHeader.png" title="帧头部"></li><li>作用<ul><li>多路复用(同一stream内的frame必须是有序的，接收端根据streamID并发组装消息)</li><li>客户端建立的流必须是奇数，服务端建立的是偶数</li><li>状态管理的约束(ID不能复用，只能递增，超出最大值后必须断掉tcp连接重新建立)</li></ul></li><li>帧类型type<ul><li>DATA</li><li>HEADERS</li><li>PRIORITY</li><li>RST_STREAM</li><li>SETTINGS</li><li>PUSH_PROMISE</li><li>PINNG</li><li>GOAWAY</li><li>WINDOW_UPDATE</li><li>CONTINUATION</li></ul></li><li>hpack<ul><li>头部压缩算法</li><li>三种压缩方式相结合<ul><li>静态字典</li><li>动态字典</li><li>压缩算法huffman编码</li></ul></li></ul></li></ul><h2 id="服务推送"><a href="#服务推送" class="headerlink" title="服务推送"></a>服务推送</h2><ul><li>每一条推送都基于一个请求</li><li>在请求的响应中可以恢复即将推送的资源</li><li>再开一个stream进行资源的推送，不同的stream可以实现并发</li></ul><h2 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h2><ul><li>应用层和tcp层都可以做</li><li>发送和接口流量控制是可以分开作用的</li><li>只有DATA帧才受流控限制</li><li>流控不能被禁用</li></ul><h2 id="h2现存问题"><a href="#h2现存问题" class="headerlink" title="h2现存问题"></a>h2现存问题</h2><ul><li>tcp+tls建链握手过多<ul><li>必须建立在tls之上</li></ul></li><li>多路复用与tcp队头阻塞问题<ul><li>本质还是在tcp流中是串行的</li><li>串行对头中丢失一个包就会阻塞后面的包</li></ul></li><li>tcp是由操作系统内核实现的，内核更新慢</li></ul><h2 id="http3"><a href="#http3" class="headerlink" title="http3"></a>http3</h2><ul><li>基于quick协议与h2协议共同成为h3</li><li>quick协议基于udp/ip协议之上，h2协议之下</li><li>quick协议实现了<ul><li>多路复用</li><li>tls</li><li>拥塞控制</li><li>丢包重发</li></ul></li><li>优势<ul><li>可以连接迁移</li><li>解决了队头阻塞问题</li><li>1RTT完全就握手完毕</li></ul></li></ul><h1 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h1><h2 id="基础-3"><a href="#基础-3" class="headerlink" title="基础"></a>基础</h2><ul><li>概念<ul><li>ssl secure sockets layer</li><li>tls transport layer security</li></ul></li><li>发展历史<ul><li>ssl3.0</li><li>tls1.0</li><li>tls1.1</li><li>tls1.2</li><li>tls1.3</li></ul></li><li>设计目的<ul><li>身份验证</li><li>保密性</li><li>完整性</li></ul></li><li>主要功能<ul><li>握手</li><li>交换密钥</li><li>告警</li><li>对称加密数据</li><li>记录</li></ul></li><li>tls握手通讯过程<ul><li>验证身份</li><li>达成安全套件共识</li><li>传递密钥</li><li>加密通讯</li></ul></li><li>安全加密套件<ul><li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li><li>ECDHE 密钥交换算法</li><li>RSA 身份验证算法</li><li>AES 对称加密算法</li><li>128 对称加密强度</li><li>GCM 对称加密模式</li><li>SHA256 签名hash算法</li></ul></li></ul><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><ul><li>工作原理<ul><li>XOR运算 速度快</li><li>padding填充 <ul><li>会把明文进行blockCipher分组进行加密</li><li>当分组后最后一个block可能长度不够XOR运算，需要padding</li><li>填充时可以按bit位进行填充也可按byte字节填充</li><li>RFC中常用按byte字节进行填充，填充内容是多少个字节就填充多少个数字，即PKCS7填充算法</li></ul></li><li>工作模式<ul><li>常用GCM工作模式</li><li>Galois/Counter Mode</li></ul></li></ul></li><li>AES<ul><li>advanced encryption standard加密算法</li><li>常用填充算法PKCS7</li><li>常用工作模式GCM</li><li>三种密钥长度<ul><li>AES-128密钥长度16字节，加密轮数10</li><li>AES-192密钥长度24字节，加密轮数12</li><li>AES-256密钥长度32字节，加密轮数14</li></ul></li><li>加密步骤<ul><li>明文按照16字节拆分成若干块，每个块是4*4矩阵</li><li>按填充算法进行最后一块的填充</li><li>每一个明文块用AES加密算法和密钥进行加密</li><li>拼接所有密文块</li></ul></li></ul></li></ul><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><ul><li>RSA </li><li>openssl<ul><li>生成私钥 openssl genrsa -out private.pem</li><li>提取公钥 openssl rsa -in private.pem -pubout -out public.pem</li><li>加密文件 openssl rsautl -encrypt -in hello.txt -inkey public.pem -pubin -out hello.en </li><li>解密文件 openssl rsautl -decrypt -in hello.en -inkey private.pem -out hello.de</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;协议栈&quot;&gt;&lt;a href=&quot;#协议栈&quot; class=&quot;headerlink&quot; title=&quot;协议栈&quot;&gt;&lt;/a&gt;协议栈&lt;/h2&gt;&lt;u
      
    
    </summary>
    
    
      <category term="wireshark" scheme="https://prief.github.io/tags/wireshark/"/>
    
      <category term="tcp/ip" scheme="https://prief.github.io/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>spring boot &amp; k8s</title>
    <link href="https://prief.github.io/2019/08/10/spring-boot-k8s/"/>
    <id>https://prief.github.io/2019/08/10/spring-boot-k8s/</id>
    <published>2019-08-10T15:01:19.000Z</published>
    <updated>2019-08-17T03:01:46.852Z</updated>
    
    <content type="html"><![CDATA[<p>记录spring boot &amp; k8s学习过程 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录spring boot &amp;amp; k8s学习过程 &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="spring" scheme="https://prief.github.io/tags/spring/"/>
    
      <category term="k8s" scheme="https://prief.github.io/tags/k8s/"/>
    
  </entry>
  
</feed>
