<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prief</title>
  
  <subtitle>about share and go on</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://prief.github.io/"/>
  <updated>2020-05-16T23:01:27.045Z</updated>
  <id>https://prief.github.io/</id>
  
  <author>
    <name>prief</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sec</title>
    <link href="https://prief.github.io/sec/"/>
    <id>https://prief.github.io/sec/</id>
    <published>2020-04-23T10:51:46.000Z</published>
    <updated>2020-05-16T23:01:27.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安全基础"><a href="#安全基础" class="headerlink" title="安全基础"></a>安全基础</h3><ul><li>全景图<img src="/sec/sec-all.png" title="全景图"></li></ul><h4 id="安全本质"><a href="#安全本质" class="headerlink" title="安全本质"></a>安全本质</h4><ul><li>安全问题要从表象深入根本进行修复</li><li>安全三大基本原则CIA<ul><li>机密性<ul><li>Confidentiality</li><li>主要保护技术混淆/加密/隔离/隐藏</li><li>确保数据只被授权的主体访问，不被授权的不可见</li><li>通过授权机制进行访问控制</li><li>数据的处理/传输/存储都需要保护</li><li>攻击<ul><li>对机密性保护技术进行攻击(破解/逆向)</li><li>人为错误使用访问控制机制(权限滥用/弱密码等)</li></ul></li></ul></li><li>完整性<ul><li>Integrity</li><li>主要保护技术加密/签名</li><li>确保数据只被授权的主体进行修改，不被授权的不可改</li><li>强调对数据修改行为的日志记录/监督机制和审计</li><li>攻击<ul><li>黑客修改数据</li><li>更多的是人为原因(恶意删库/程序bug)</li></ul></li></ul></li><li>可用性<ul><li>Availability</li><li>确保数据能被授权的主体访问到，不被授权的不可读</li><li>挑战<ul><li>运维上对机房建设/多地冗余备份等</li><li>研发上降低延迟/处理海量数据等</li><li>安全上防DoS等</li></ul></li></ul></li></ul></li></ul><h4 id="解决安全问题黄金法则-Au"><a href="#解决安全问题黄金法则-Au" class="headerlink" title="解决安全问题黄金法则(Au)"></a>解决安全问题黄金法则(Au)</h4><ul><li>认证Authentication<ul><li>身份识别(你是谁)</li><li>认证(怎么证明你是谁)<ul><li>三大形式<ul><li>你知道什么(密码/密保)</li><li>你拥有什么(门禁卡/安全令牌/手机号验证)</li><li>你是什么(指纹/虹膜/人脸等生物特征)</li></ul></li></ul></li></ul></li><li>授权Authorization<br>- </li><li>审计Audit<br>- </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安全基础&quot;&gt;&lt;a href=&quot;#安全基础&quot; class=&quot;headerlink&quot; title=&quot;安全基础&quot;&gt;&lt;/a&gt;安全基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全景图&lt;img src=&quot;/sec/sec-all.png&quot; title=&quot;全景图&quot;&gt;

&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rpc021</title>
    <link href="https://prief.github.io/rpc021/"/>
    <id>https://prief.github.io/rpc021/</id>
    <published>2020-04-12T14:14:35.000Z</published>
    <updated>2020-04-13T12:48:22.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3><ul><li>remote procedure call 远程过程调用</li><li>允许本地计算机调用远程计算机上的程序，不需要了解底层网络细节，整个过程就像调用本地一样</li><li>目的<ul><li>把远程调用做的和本地调用一般,封装掉底层网络调用的细节</li><li>解决http超文本传输协议效率低</li></ul></li><li>常见的是java的dubbo和google的grpc</li><li>框架涉及面<ul><li>网络通信</li><li>超时机制</li><li>协议</li><li>序列化</li><li>打解包</li><li>编解码</li><li>连接池</li><li>拦截器</li><li>服务发现</li><li>负载均衡</li><li>分布式链路追踪</li><li>监控</li><li>日志</li><li>认证鉴权</li><li>并发处理</li><li>性能</li><li>组件化</li><li>插件体系</li></ul></li><li>框架架构图<img src="/rpc021/rpc.png" title="框架架构图"></li><li>go语言<ul><li>简洁优雅</li><li>天然支持高并发</li></ul></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>一次rpc的环节<ul><li>socket套接字</li><li>寻址<ul><li>服务发现</li><li>负载均衡</li></ul></li><li>序列化和反序列化<ul><li>序列化是指把对象转化为二进制流的过程</li><li>反序列化是指把二进制流转化为对象的过程</li><li>因为数据在网络中传输都是二进制流的方式</li><li>常用方式<ul><li>json</li><li>protobuf</li><li>flatbuffers</li></ul></li></ul></li><li>协议</li><li>异常处理</li></ul></li><li>rpc框架解决的问题<ul><li>开发效率的问题，希望框架简单易用</li><li>通信效率的问题，希望框架高效</li><li>数据传输支持多种序列化方式支持自定义</li><li>通用化即组件化和插件体系的支持</li><li>服务治理<ul><li>服务发现</li><li>负载均衡</li><li>限流</li><li>降级</li><li>熔断</li><li>超时</li><li>重试</li><li>服务追踪</li></ul></li></ul></li></ul><h3 id="框架概览"><a href="#框架概览" class="headerlink" title="框架概览"></a>框架概览</h3><ul><li>模块<ul><li>client</li><li>server</li><li>transport 底层通信</li><li>codec 自定义协议/序列化和反序列化</li><li>pool 池化技术支持连接池/对象池</li><li>log</li><li>selector 提供寻址功能/服务发现/负载均衡</li><li>stream 提供客户端/服务端上下午数据透传的能力，还会支持流式传输</li><li>protocol 自定义协议</li><li>plugin </li><li>interceptor 拦截器</li><li>metadata 提供参数传递功能</li></ul></li><li>架构分层<ul><li>业务层</li><li>组件层</li><li>传输层</li><li>插件层</li></ul></li><li>技术选型<ul><li>协议<ul><li>选用http2解决http1.x的低效问题</li><li>自定义协议</li></ul></li><li>开发语言<ul><li>go没有历史包袱</li><li>协程机制天然支持高并发</li></ul></li><li>序列化/反序列化(性能越来越高)<ul><li>xml</li><li>json</li><li>protobuf 支持代码生成调用方式</li><li>thrift</li><li>flatbuffers</li><li>msgpack 支持反射调用方式</li><li>gogoprotobuf </li></ul></li><li>服务治理<ul><li>服务发现选择consul（etcd比较简单）</li><li>分布式链路追踪<ul><li>统一标准opentracing</li><li>标准实现zipkin(java实现)和jaeger(go实现)</li></ul></li></ul></li></ul></li></ul><h3 id="框架搭建-server"><a href="#框架搭建-server" class="headerlink" title="框架搭建-server"></a>框架搭建-server</h3><ul><li>server能力<ul><li>服务创建</li><li>服务注册</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;rpc&quot;&gt;&lt;a href=&quot;#rpc&quot; class=&quot;headerlink&quot; title=&quot;rpc&quot;&gt;&lt;/a&gt;rpc&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;remote procedure call 远程过程调用&lt;/li&gt;
&lt;li&gt;允许本地计算机调用远程计算机上的程序，不需要
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>archi-jike</title>
    <link href="https://prief.github.io/archi-jike/"/>
    <id>https://prief.github.io/archi-jike/</id>
    <published>2020-04-04T23:53:24.000Z</published>
    <updated>2020-04-12T02:08:57.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>软件架构是有关软件整体结构与组件的抽象描述，用于指导软件系统各个方面的设计</li><li>目标<ul><li>高性能</li><li>高可用</li><li>可扩展</li></ul></li><li>分层<ul><li>访问层</li><li>网关层</li><li>服务层</li><li>存储层</li><li>监控/限流/降级<h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3></li></ul></li><li>目的<ul><li>分而治之</li><li>各司其职</li></ul></li><li>常见分层<ul><li>计算机OSI7层模型</li><li>web系统的mvc/mvvm模型</li><li>基于领域模型的分层(电商系统…)</li></ul></li><li>演进<ul><li>servletJSP时代<ul><li>servlet+tomcat完成web接入</li><li>javaBean+JDBC完成数据层接入</li><li>JSP完成页面展示</li></ul></li><li>SSH<ul><li>strutsMVC完成web接入JSP完成表示层</li><li>spring完成业务逻辑/会话管理</li><li>hibernate完成数据存储接入和持久化</li></ul></li><li>SSM<ul><li>springMVC更适用前后端分离</li><li>spring支持注解/配置声明式事务处理</li><li>mybatis配置缓存/解耦数据库对象和java对象</li></ul></li><li>SpringBoot<ul><li>整合了spring所有框架，提供allInOne服务</li><li>提供简单的配置和注解的接入方式</li></ul></li><li>分布式分层</li></ul></li><li>亿级流量平台分层架构<ul><li>功能<ul><li>水平扩展</li><li>负载均衡</li><li>高可用</li><li>数据一致性</li></ul></li><li>分层(需要每一层都能分布式)<ul><li>访问层，用于web接入/反向代理/负载均衡</li><li>网关层，用于业务api</li><li>服务层，具备服务治理/调度/异步通信等</li><li>存储层(存储接入层/存储层)，用于提供透明的存储结构的访问代理和数据落地能力</li></ul></li></ul></li></ul><h3 id="访问层"><a href="#访问层" class="headerlink" title="访问层"></a>访问层</h3><ul><li>lvs<ul><li>采用ip负载均衡技术和基于内容请求分发技术做的负载均衡</li><li>概念<ul><li>CIP clientIP</li><li>DIP directorIP</li><li>RIP realServerIP</li></ul></li><li>模式<ul><li>NAT<ul><li>networkAddressTranslation网络地址转换</li><li>CIP-&gt;DIP-&gt;RIP-&gt;DIP-&gt;CIP(lvs两次SNAT/DNAT)</li><li>进出流量都走lvs,部署和配置比较简单，但lvs始终要维护两端的socket连接,可能会成为瓶颈</li></ul></li><li>DR<ul><li>directRouting直接路由</li><li>CIP-&gt;DIP-&gt;RIP-&gt;CIP(要修改DIP-&gt;RIP时的mac地址)</li><li>响应流量不走lvs,减少lvs始终维护两端socket的性能开销,但要求DIP和RIP要在同一机房</li><li>通常使用此模式，在同一机房也会有很高的性能</li></ul></li><li>TUN<ul><li>tunneling隧道</li><li>CIP-&gt;DIP-&gt;RIP-&gt;CIP(在DIP发送到RIP时做了二次封装,RIP拿到包后要二次解析)</li><li>响应流量不走lvs,同时DIP和RIP也不一定要在同一机房,但要求RS必须支持隧道模式即要二次解析IP包</li></ul></li></ul></li><li>调度策略<ul><li>轮询/权重轮询</li><li>最少连接/权重最少连接</li><li>ip_hash/ip_hash_group/url_hash/url_hash_group…</li></ul></li><li>优势<ul><li>ip层的负载均衡,没有应用层回调的消耗，性能高</li><li>通过DR/TUN模式使响应不走lvs</li><li>支持后端心跳检测,自动故障转移恢复</li><li>配合主从keepAlive和VIP实现自身高可用</li></ul></li></ul></li><li>nginx<ul><li>功能<ul><li>请求解析(http/https)</li><li>负载均衡(应用层)</li><li>缓存调度</li><li>授权认证</li><li>接入处理(过滤非法请求)</li><li>业务逻辑</li><li>响应处理</li><li>压缩技术</li></ul></li><li>职责分类<ul><li>接入层nginx</li><li>应用层nginx(缓存调度/业务逻辑/限流降级)</li></ul></li><li>高性能原因<ul><li>master-worker进程模型<ul><li>master进程系统调用<ul><li>socket()</li><li>bind()</li><li>listen()</li><li>fork()</li></ul></li><li>worker进程系统调用<ul><li>accept()</li><li>recv()</li><li>send()</li><li>close()</li></ul></li></ul></li><li>异步模型<ul><li>select(缺点:只能并发1024个请求/低效的遍历性能消耗)</li><li>epoll(linux2.6后实现的事件机制,解决了上面2个问题)</li></ul></li><li>流式处理请求workflow,有主子请求</li><li>协程机制解决worker上不能有阻塞操作<ul><li>协程<ul><li>栈/局部变量在用户空间模拟，切换开销小</li><li>协程间是协作关系</li><li>临界区不需要加锁</li><li>遇到阻塞主动放弃切换</li></ul></li><li>线程<ul><li>栈/局部变量是内核空间的映射，切换开销大</li><li>多线程并发运行是竞争cpu关系</li><li>临界区需要同步加锁</li><li>遇到阻塞进入等待cpu切换</li></ul></li></ul></li><li>nginx lua</li></ul></li><li>具体应用<ul><li>负载均衡<ul><li>upstream</li><li>proxy_pass</li></ul></li><li>代理缓存(先要有后端的代理才能使用代理缓存)<ul><li>proxy_cache_path PATH levels=1:2 keys_zone=NAME:100m inactive=7d max_size=100g;<ul><li>把缓存文件放在PATH中</li><li>levels=1:2 缓存文件目录层级和目录名称长度</li><li>keys_zone 指定了一个内存空间，并设置大小来缓存key与缓存文件目录的映射关系</li><li>inactive=7d 缓存文件7天后失效淘汰</li><li>max_size=100g 缓存文件总大小超过100g后释放淘汰</li></ul></li><li>使用<ul><li>proxy_cache NAME; # 使用缓存空间</li><li>proxy_cache_valid 200 206 302 304 10d; # 后端返回以下响应码时缓存多久</li><li>proxy_cache_key $uri; # 一般使用$uri作为缓存的key;</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="网关层"><a href="#网关层" class="headerlink" title="网关层"></a>网关层</h3><ul><li>分布式会话管理<ul><li>会话机制<ul><li>session<ul><li>通过判断SID里是否包含用户信息判定用户是否登陆</li><li>依赖后端的session容器和前端的cookie，无法解决cookie跨域和禁用的问题</li></ul></li><li>cookie<ul><li>后端验证用户信息后将凭证做数字签名，加密后写入cookie的ticket，验证时取出ticket解密判断</li><li>不依赖后端session容器但也没有解决cookie跨域和禁用的问题</li></ul></li><li>token<ul><li>后端验证用户信息后将凭证做数字签名，加密后写入token返回前端，前端请求时参数或header中携带token</li><li>不依赖cookie，但需要请求时携带token</li></ul></li></ul></li><li>安全问题<ul><li>cookie被劫持，xss/csrf安全攻击</li><li>token凭证被劫持，伪造</li></ul></li><li>解决方式<ul><li>https</li><li>风控系统主动失效及过期机制</li></ul></li><li>分布式会话管理<ul><li>登陆凭证放入集中的会话管理redis/memcached</li><li>对应session的处理机制要重写</li></ul></li></ul></li><li>接入层控制<ul><li>控制内容<ul><li>身份验证<ul><li>通过会话管理获取用户登陆凭证</li><li>通过用户凭证获取用户信息</li><li>验证对应的url/资源是否可以被用户访问</li></ul></li><li>流量控制<ul><li>对应url流量是否可以被承载否则限流(filter的pre/post进行计数即可实现)</li><li>对应服务分级的流量是否被承载</li><li>对应整个系统的总流量是否被承载</li></ul></li><li>路由服务<ul><li>根据url规则找到对应的服务</li><li>判断服务的状态，做服务路由调用</li></ul></li><li>记录调试或统计信息</li></ul></li><li>通过接入层框架的通用的filter功能实现<ul><li>javaServletFilter</li><li>springMVCHandlerInterceptor</li><li>zuulFilter</li></ul></li></ul></li><li>服务调用及聚合<ul><li>如果需要多个后端服务调用则需要在网关层这里做聚合</li><li>分类<ul><li>重接入<ul><li>springMVC+dubbo</li><li>优点：可灵活的在controller层处理业务逻辑，聚合服务</li><li>缺点：服务的单一性不够，后端服务不便管理</li></ul></li><li>轻接入<ul><li>zuul</li><li>优点：服务单一，接入控制可以页面配置</li><li>缺点：聚合能力不够，需要后端提供</li></ul></li></ul></li></ul></li></ul><h3 id="核心服务层之服务通信"><a href="#核心服务层之服务通信" class="headerlink" title="核心服务层之服务通信"></a>核心服务层之服务通信</h3><ul><li>微服务<ul><li>传统服务缺点<ul><li>所有服务耦合在一起</li><li>隔离型弱，互相影响</li><li>部署臃肿</li><li>开发维护困难</li></ul></li><li>微服务<ul><li>特性<ul><li>高内聚,低耦合,专注自己的核心业务</li><li>隔离型强,不会相互影响(进程上)</li><li>轻量的通信机制</li><li>独立开发,单独部署</li></ul></li><li>需要解决的问题<ul><li>服务治理(服务注册和发现,负载均衡和智能容错,服务监控和健康管理,限流降级熔断)</li><li>数据一致性</li><li>调用性能</li><li>研发流程调试,部署,测试</li></ul></li></ul></li></ul></li><li>dubbo服务治理<ul><li>来解决微服务服务治理的轻量级开源javaRPC框架</li><li>核心能力<ul><li>面向接口的远程方法调用</li><li>服务自动注册和发现</li><li>负载均衡和智能容错</li></ul></li></ul></li><li>异步消息服务<ul><li>分类<ul><li>JMS(apacheActiveMQ)</li><li>Kafka(流式处理)</li><li>RocketMQ(alibaba基于Kafka开发的分布式一致性服务)</li></ul></li><li>JMS<ul><li>javaMessageService</li><li>特点<ul><li>点对点(每个消息都被发送到特定的队列,接收者从队列中顺序消费,队列保留着消息直到被消费或超时)</li><li>发布订阅(客户端将消息发到主题,消息队列存放主题,订阅者消费主题)</li></ul></li><li>activeMQ缺点<ul><li>以消息为单位,为保证消息稳定性需要落盘,但可能落盘时不连续,磁盘寻值有性能问题</li><li>消费时是推模式,对consumer的线程压力非常大</li></ul></li></ul></li><li>Kafka<ul><li>默认支持点对点，但不常用，常用发布订阅</li><li>客户端将消息发到主题,消息队列存放主题,订阅者消费主题,消息持久化到队尾,消费通过客户端指针,吞吐量高</li><li>比activeMQ优点<ul><li>引入broker概念把相同topic的消息连续的落到同一个文件,保证磁盘IO性能</li><li>消费时是拉模式,根据consumer性能决定消费速度</li><li>引入了nameServer类似zookeeper的组件和队列/失败重试队列来保证消息稳定可靠</li></ul></li></ul></li><li>RocketMQ<ul><li>结合了Kafka和ActiveMQ的优点,把Kafka很多的api封装成类似ActiveMQ简单易用</li><li>消息队列维护高可用,并支持事务回溯机制(增加了prepare队列)</li></ul></li></ul></li></ul><h3 id="核心服务层之调度-池化"><a href="#核心服务层之调度-池化" class="headerlink" title="核心服务层之调度/池化"></a>核心服务层之调度/池化</h3><ul><li>任务调度<ul><li>应用场景<ul><li>业务跑批轮询等待处理</li><li>失败的异常重试</li><li>定时任务处理</li></ul></li><li>单机实现方式<ul><li>Timer定时器机制<ul><li>java自带，比较简单</li><li>所有任务都在同一个线程中串行执行，同一时间只能执行一个任务，不适合多线程并发多任务</li></ul></li><li>ScheduledExecutor<ul><li>内置了线程池，解决Timer单线程的问题</li><li>任务数不能超过线程池数，否则也会相互影响</li></ul></li><li>Quartz<ul><li>包含任务JobDetail类和调度Trigger类</li><li>定时检测到任务后Job会在线程池中申请线程执行</li></ul></li></ul></li><li>分布式调度方式及实现<ul><li>Quartz分布式版本<ul><li>部署机器的时间一致</li><li>部署的代码一致</li><li>需要中间层同步竞争锁(数据库)</li></ul></li><li>Elasticsearch-Job分片分布式<ul><li>借鉴了竞争锁的机制,不过使用zookeeper实现</li><li>自己实现了任务是否分片，解决大job问题</li></ul></li></ul></li></ul></li><li>池化技术<ul><li>通过复用减少系统消耗，提升系统性能</li><li>分类<ul><li>对象池<ul><li>利用复用对象减少创建对象/垃圾回收的开销</li><li>例如线程池通过复用线程提升性能</li></ul></li><li>连接池<ul><li>数据库连接池/redis连接池/http连接池</li><li>通过复用tcp连接减少创建和释放连接的时间</li></ul></li></ul></li><li>实战<ul><li>java线程池<ul><li>核心/最小线程数大小(任务进来后首选核心线程)</li><li>等待队列长度(核心线程都busy时新进的任务进等待队列)</li><li>最大线程数大小(等待队列也满了又有新进的任务则开启新线程,等待队列出对执行)</li><li>拒绝策略(达到最大线程后又有新进的任务则会按拒绝策略执行,分为被动等待或直接报错)</li><li>idle等待时间(弹性线程空闲等待时间后会回收)</li></ul></li><li>连接池(数据库/redis/httpClient)<ul><li>连接状态<ul><li>init</li><li>connect</li><li>busy</li><li>close</li></ul></li><li>核心连接数</li><li>最大连接数</li><li>连接等待时间(tcp/ip建连时间)</li><li>数据读取时间</li><li>idle等待时间(弹性连接空闲等待时间后会释放)</li><li>validate<ul><li>获取连接时</li><li>使用连接时(常用)</li><li>释放连接时</li></ul></li></ul></li><li>tomcat线程/连接池<ul><li>客户端连接池</li><li>io线程池</li><li>worker线程池</li></ul></li></ul></li></ul></li></ul><h3 id="核心服务层之缓存-隔离-队列"><a href="#核心服务层之缓存-隔离-队列" class="headerlink" title="核心服务层之缓存/隔离/队列"></a>核心服务层之缓存/隔离/队列</h3><ul><li>缓存<ul><li>设计原则<ul><li>存储设备读写速度最快(cpu/内存)</li><li>数据离应用最近(业务服务器/局域网/机房)</li><li>数据离用户最近(app/CDN/nginx缓存/api网关/核心业务redis)</li></ul></li><li>分类<ul><li>CDN缓存</li><li>反向代理缓存 nginxProxyCache</li><li>分布式缓存 redis</li><li>本地应用缓存 JVM Guava</li></ul></li></ul></li><li>隔离<ul><li>硬件隔离(虚拟机)</li><li>操作系统隔离(容器虚拟化)</li><li>进程隔离(系统拆分)</li><li>线程隔离(线程池独立)</li><li>读写隔离</li><li>动静隔离</li><li>冷热隔离(热点账户/热点数据)</li></ul></li><li>队列<ul><li>先进先出的线性表</li><li>用途<ul><li>异步处理</li><li>系统解耦</li><li>流量削峰<ul><li>排队有时候会比并发效率更高</li><li>排队可以控制并发流量开关/大小</li></ul></li></ul></li></ul></li></ul><h3 id="数据存储层"><a href="#数据存储层" class="headerlink" title="数据存储层"></a>数据存储层</h3><ul><li>数据存储<ul><li>分类<ul><li>传统IT<ul><li>excel提供简单的关系存储</li><li>磁盘提供文件存储</li><li>sql数据库提供关系型存储</li></ul></li><li>互联网行业<ul><li>分布式存储需要无限可扩展的网络文件系统</li><li>关系型数据库需要提供事务一致性的保证</li><li>非关系型数据库需要提供更高性能的简化存储</li><li>磁盘和内存需要性能和稳定中间权衡</li></ul></li></ul></li><li>数据结构<ul><li>结构化数据(表,有完备的模式)</li><li>非结构化数据(音视频文件等)</li><li>半结构化数据(xml表示简历格式)</li></ul></li><li>数据库结构<ul><li>关系型数据库</li><li>非关系型数据库</li></ul></li><li>选型<ul><li>非结构化数据选择网络文件系统/网络磁盘</li><li>结构化数据根据是否需要SQL和关系事务的支持<ul><li>关系型数据库</li><li>非关系型数据库(磁盘非关系/内存非关系)</li></ul></li><li>半结构化数据<ul><li>首先使用XML或JSON等可扩展的结构化数据进行描述</li><li>然后根据是否落地选择非关系型数据库</li></ul></li></ul></li><li>常用<ul><li>NAS <ul><li>network attached storage网络附属存储</li><li>网络文件系统,基底层设备,提供文件磁盘</li><li>有cpu/内存/网络接入端口/磁盘插槽</li></ul></li><li>OSS<ul><li>object storage service</li><li>基于bucket管理网络文件</li></ul></li></ul></li></ul></li><li>关系型与非关系型<ul><li>关系型数据库mysql<ul><li>关系型存储格式,如表</li><li>非主键字段依赖索引提高查询速度,查询需要快照和锁机制</li><li>事务保障效率高<ul><li>set autocommit=0;</li><li>begin;</li><li>SQL;</li><li>commit;</li></ul></li><li>可以使用join进行复杂查询</li></ul></li><li>非关系型数据库mongoDB<ul><li>kv存储格式</li><li>通常使用k查询,对应关系型的主键,比索引更快,大多使用单线程存储,无需锁</li><li>没有事务的概念</li><li>对复杂查询的能力较弱但场景也比较少</li><li>mongoDB<ul><li>是非关系型数据库中功能最丰富,最像关系型数据库的非关系型数据库</li><li>数据结构非常松散,类似JSON的BSON格式</li><li>db.NAME.find().pretty()/insert()/update()/remove()/createIndex()/sort()/limit()/skip()</li></ul></li><li>redis<ul><li>用作数据库/高速缓存/消息队列代理</li><li>支持字符串/哈希表/列表/集合/有序集合/位图等数据类型</li><li>内置复制/LRU淘汰回收/事务及不同级别的磁盘持久化功能</li><li>通过Redis Sentinel提供高可用</li><li>通过Redis Cluster提供自动分区</li></ul></li></ul></li></ul></li><li>代理访问层<ul><li>代理对象分类<ul><li>nginx反向代理</li><li>mycat代理mysql</li><li>twemproxy代理redis/redis4自带的redisCluster也可支持代理</li></ul></li><li>代理作用<ul><li>集中收口</li><li>负载均衡</li><li>故障转移</li><li>路由策略</li><li>缓存策略</li></ul></li></ul></li></ul><h3 id="监控-限流-降级"><a href="#监控-限流-降级" class="headerlink" title="监控/限流/降级"></a>监控/限流/降级</h3><ul><li>监控<ul><li>指标<ul><li>硬件(zabbix监控)<ul><li>CpuIdleTime</li><li>FreeMemory</li><li>IOWait</li><li>NetworkFree</li></ul></li><li>软件(cat heartbeat监控)<ul><li>CpuLoadAverage</li><li>ParNewCount</li><li>ParNewTime</li><li>OldGCCount</li><li>OldGCTime</li></ul></li><li>接口(cat transaction监控)<ul><li>url/dubbo failure times</li><li>9X线(95%Line/99.9%Line/99.99%Line)</li></ul></li><li>异常(cat exception监控)<ul><li>ExceptionTimesAndContent</li></ul></li><li>大盘(cat 大盘监控)<ul><li>基线成功率</li><li>基线失败率</li></ul></li></ul></li></ul></li><li>限流<ul><li>原因<ul><li>流量远比能力大</li><li>永远不知道对方会怎么样</li><li>永远不知道自己会怎么样</li></ul></li><li>维度<ul><li>url(外部接口)</li><li>dubbo接口(内部接口)</li><li>sql操作数</li></ul></li><li>内容<ul><li>TPS/QPS</li><li>限制并发数</li><li>限制总数</li></ul></li><li>算法原理<ul><li>限制并发数(服务内以接口为单位设置并发总数锁,超过并发总数返回异常,达到限制并发的功能)</li><li>令牌桶算法(以桶模拟对应的令牌池,定时器会根据TPS重置桶,达到限制TPS的功能)</li><li>漏桶算法(以固定的速度流出流量,可以应对一定程度的突发流量,达到削峰填谷的功能)</li></ul></li><li>实战<ul><li>Guava的ratelimiter实现令牌桶</li></ul></li></ul></li><li>降级<ul><li>保护系统正常运行,也要保证用户体验</li><li>策略<ul><li>关闭接口并设置默认返回</li><li>降级逻辑</li><li>主动降级</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;软件架构是有关软件整体结构与组件的抽象描述，用于指导软件系统各个方面的设计&lt;/li&gt;
&lt;li&gt;目标&lt;ul&gt;
&lt;li&gt;高性能&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="https://prief.github.io/k8s/"/>
    <id>https://prief.github.io/k8s/</id>
    <published>2020-04-01T06:53:14.000Z</published>
    <updated>2020-04-04T23:40:10.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><ul><li>可扩展<ul><li>CNI Container Network Interface</li><li>CSI Container Storage Interface</li><li>CRI Container Runtime Interface</li></ul></li><li>整体架构<ul><li>C/S<ul><li>kubectl作为CLI操作server的master</li><li>master调度编排node</li><li>生产环境的master要部署多个以保证高可用</li></ul></li><li>master<ul><li>api-server</li><li>controller-manager</li><li>scheduler</li><li>etcd</li></ul></li><li>node<ul><li>kubelet</li><li>kube-proxy</li><li>containerRuntime(docker)</li><li>pod</li></ul></li></ul></li><li>快速部署<ul><li>KIND(k8s in docker)</li><li>Minikube<ul><li>BIOS开启虚拟化</li><li>OS安装虚拟机virtualBox</li></ul></li></ul></li></ul><h3 id="kubeadm生产可用部署"><a href="#kubeadm生产可用部署" class="headerlink" title="kubeadm生产可用部署"></a>kubeadm生产可用部署</h3><ul><li>禁用swap<ul><li>cat /proc/swap</li><li>swapoff -a #关闭swap</li><li>lsblk #查看设备属性，是否有swap</li><li>vi /etc/fstab #注释和swap相关的设备</li><li>free #查看是否还有swap</li></ul></li><li>查看机器uuid和mac<ul><li>cat /sys/class/dmi/id/product_uuid</li><li>ip a</li><li>确保全集群唯一</li></ul></li><li>查看端口是否被占用<ul><li>yum install -y net-tools</li><li>netstat -tnlp | grep -E ‘6443|23[79,80]|1025[0,1,2]’</li></ul></li><li>安装组件<ul><li>kubeadm</li><li>kubelet</li><li>kubectl</li></ul></li><li>配置kubelet由systemd管理<ul><li>/etc/systemd/system/kubelet.service</li><li>/etc/systemd/system/kubelet.service.d/kubadm.conf</li><li>systemctl enable kubelet</li></ul></li><li>安装前置依赖<ul><li>CRI管理软件包cri-tools<ul><li>crictl</li><li>critest</li></ul></li><li>socat<ul><li>实现端口转发</li><li>yum install -y socat</li></ul></li></ul></li><li>初始化<ul><li>kubeadm config images pull</li><li>或k8s.gcr.io改为registry.aliyuncs.com/google_containers，docker pull下来后再改tag</li><li>kubeadm init</li><li>kubeadm join</li></ul></li><li>配置kubectl<ul><li>mkdir -p $HOME/.kube</li><li>cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</li><li>chown $(id -u):$(id -g) $HOME/.kube/config</li></ul></li><li>验证<ul><li>kubectl cluster-info</li><li>kubectl get nodes</li></ul></li><li>配置网络<ul><li>sysctl net.bridge.bridge-nf-call-iptables=1</li><li>flannel需要kubeadm init时传递 –pod-network-cidr=10.244.0.0/16</li><li>重置kubeadm reset</li><li>kubectl apply -f config.yaml</li><li>kubectl get pods –all-namespaces</li></ul></li></ul><h3 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h3><ul><li>kubectl options</li><li>kubectl [flags] [options]</li><li>$HOME/.kube/config<ul><li>集群api地址</li><li>用于认证的证书地址</li></ul></li><li>kubectl get nodes -o yaml</li><li>kubectl get all</li><li>kubectl api-resources</li><li>kubectl explain </li><li>kubectl run NAME –image=image</li><li>kubectl expose deploy/redis –port 6379 –protocol=TCP –target-port=6379 –name=redis-server –type=ClusterIP｜NodePort</li><li>kubectl port-forward  svc/redis-server 6379:6379 #把内部ClusterIP的svc暴露外部访问</li><li>kubectl scale deploy/redis –replicas=3</li></ul><h3 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h3><ul><li>Pod</li><li>Deployment</li><li>ReplicaSet</li><li>Service<ul><li>ClusterIP 默认的service类型，仅集群内可访问的虚拟IP</li><li>NodePort 在node上绑定固定port(port范围在service-node-port-range配置，默认30000-32767)可以通过nodeIP:nodePort访问服务</li><li>LoadBalancer 通过云供应商CloudProvider创建一个外部负载均衡器，自动创建所需的nodePort或ClusterIP</li><li>ExternalName 通过将服务由DNS CNAME转发到指定的域名，需要kube-dns支持</li></ul></li></ul><h3 id="认证与授权"><a href="#认证与授权" class="headerlink" title="认证与授权"></a>认证与授权</h3><ul><li>api安全保证<ul><li>Authentication 识别用户身份认证</li><li>Authorization 控制用户对资源访问的授权</li><li>AdmissionControl 资源管理的准入控制</li></ul></li><li>跳过安全保证<ul><li>kubectl proxy可以直接通过http访问服务</li><li>直接访问kube-apiserver上启动服务时配置的insecure-port默认8080</li></ul></li><li>k8s用户<ul><li>一般用户<ul><li>只能通过外部服务管理</li><li>无法通过api添加到集群</li></ul></li><li>serviceAccount<ul><li>由k8sApi管理的用户，与特定的namespace绑定</li><li>会自动挂到pod容器中的/var/run/secrets/kubernetes.io/serviceaccount/目录中，其中包含namespace,token等</li></ul></li></ul></li><li>k8sApi操作<ul><li>与serviceAccount相关</li><li>匿名请求<ul><li>kube-apiserver的–anonymous-auth参数控制是否开启，默认开启</li><li>匿名用户默认的用户名 system:anonymous</li><li>匿名用户默认的所属组 system:unauthenticated</li></ul></li></ul></li><li>认证机制<ul><li>X509客户端证书<ul><li>默认/etc/kubernetes/pki/ca.crt</li><li>认证时使用证书subject的CN(common name)域作为用户名，O(organization)域作为组名</li></ul></li><li>引导token<ul><li>kubeadm init后会显示token</li><li>非kubeadm需要设置 enable-bootstrap-token-auth=true</li></ul></li><li>静态token文件<ul><li>启动kube-apiserver时配置–token-auth-file=FILE</li><li>请求时加上 Authorization: Bearer TOKEN请求头</li></ul></li><li>静态密码文件<ul><li>启动kube-apiserver时配置–basic-auth-file=FILe</li><li>请求时加上 Authorization: Basic BASE64ENCODED(USER:PASS)</li></ul></li><li>serviceAccountToken</li><li>OpenID:提供了OAuth2的认证支持,云厂商也支持</li><li>认证代理:配合身份验证代理进行使用,比如提供通用的授权网关</li><li>webhook:提供webhook配合远端服务器使用</li></ul></li><li>授权机制<ul><li>支持多种授权机制<ul><li>ABAC(attribute-based access control) 基于属性的访问控制</li><li>RBAC(role-based access control) 基于角色的访问控制，类似mongoDB</li><li>Node 特殊的授权机制，专门用于kubelet发出的api请求做授权验证</li><li>Webhook 使用外部服务进行</li><li>AlwaysAllow 允许全部，这个是默认配置</li><li>AlwaysDeny 禁止全部，通常用于测试</li></ul></li><li>默认的授权都是拒绝</li><li>当某种授权拒绝或通过后便会返回，不再请求其他授权机制</li><li>当所有授权机制都未通过便返回403</li></ul></li><li>角色<ul><li>分类<ul><li>Role 一组权限的集合，但被限制在namespace内</li><li>ClusterRole 对于集群级别的资源是不被namespace限制的，并且还有一些非资源类的请求</li></ul></li><li>绑定<ul><li>rolebinding</li><li>clusterrolebinding</li></ul></li></ul></li><li>查看kubectl用户权限<ul><li>kubectl config current-context</li><li>kubectl config view users -o yaml</li><li>kubectl config view users –raw -o jsonpath=’{ .users[?(@.name == “kubernetes-admin”)].user.client-certificate-data}’ |base64 -d  #显示证书内容</li><li>kubectl config view users –raw -o jsonpath=’{ .users[?(@.name == “kubernetes-admin”)].user.client-certificate-data}’ |base64 -d |openssl x509 -text -noout #显示证书</li></ul></li><li>实践：创建权限可控的用户<ul><li>创建ns<ul><li>kubectl create namespace work</li></ul></li><li>创建用户<ul><li>mkdir work &amp;&amp; cd work</li><li>openssl genrsa -out backend.key 2048 #创建私钥</li><li>openssl req -new -key backend.key -out backend.csr -subj “/CN=backend/O=dev” #生成csr</li><li>openssl x509 -req -in backend.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out backend.crt -days 365 #CA签名</li><li>openssl x509 -in backend.crt -text -noout #查看证书文件，观察subject的CN和O</li></ul></li><li>添加context<ul><li>kubectl config set-credentials backend –client-certificate=/root/work/backend.crt –client-key=/root/work/backend.key #添加用户</li><li>kubectl config set-context backend-context –cluter=kubernetes –namespace=work –user=backend #创建context</li></ul></li><li>测试访问<ul><li>kubectl –context=backend-context get pods -n work -v 5</li></ul></li><li>创建role和rolebinding<ul><li>kubectl create -f backend-role.yaml</li><li>kubectl get roles -n work -o yaml</li><li>kubectl create -f backend-rolebinding.yaml</li><li>kubectl get rolebinding -n work -o yaml</li></ul></li><li>测试用户权限<ul><li>kubectl –context=backend-context get pods -n work -v 5</li><li>kubectl –context=backend-context get deploy -n work</li><li>kubectl –context=backend-context get ns</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># backend-role.yaml</span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: work</span><br><span class="line">  name: backend-role</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;pods&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># backend-rolebinding.yaml</span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: backend-rolebinding          </span><br><span class="line">  namespace: work</span><br><span class="line">subjects:      </span><br><span class="line">- kind: User</span><br><span class="line">  name: backend</span><br><span class="line">  apiGroup: &quot;&quot;     </span><br><span class="line">roleRef:    </span><br><span class="line">  kind: Role </span><br><span class="line">  name: backend-role</span><br><span class="line">  apiGroup: &quot;&quot;</span><br></pre></td></tr></table></figure><ul><li>k8s内置调试/验证机制<ul><li>kubectl auth can-i list pods -n work –as=”backend”</li><li>kubectl auth can-i list deploy -n work –as=”backend”</li><li>也可以使用~/.kube/config中的配置进行调试</li></ul></li></ul><h3 id="实战发布"><a href="#实战发布" class="headerlink" title="实战发布"></a>实战发布</h3><ul><li>vi Dockerfile</li><li>vi .dockerignore</li><li>docker build -t repo/name:tag .</li><li>docker login / $HOME/.docker/config.json</li><li>docker push repo/name:tag</li><li>docker-compose发布<ul><li>vi docker-compose.yaml</li><li>docker-compose up</li><li>docker-compose ps</li></ul></li><li>k8s发布<ul><li>交互方式<ul><li>命令式 kubectl run redis –image=’’</li><li>命令式对象配置 kubectl create -f </li><li>声明式对象配置 kubectl apply -f</li></ul></li><li>vi namespace.yaml &amp;&amp; kubectl apply -f namespace.yaml</li><li>vi redis-deployment.yaml &amp;&amp; kubectl apply -f redis-deployment.yaml</li><li>kubectl -n work get all</li><li>kubectl -n work exec -it HASH bash &amp;&amp; redis-cli</li><li>vi redis-service.yaml &amp;&amp; kubectl apply -f redis-service.yaml</li><li>kubectl -n work get svc</li><li>vi backend-deployment.yaml &amp;&amp; kubectl apply -f backend-deployment.yaml</li><li>vi backend-svc.yaml &amp;&amp; kubectl apply -f backend-svc.yaml</li><li>vi fe-deployment.yaml &amp;&amp; kubectl apply -f fe-deployment.yaml</li><li>vi fe-svc.yaml &amp;&amp; kubectl apply -f fe-svc.yaml</li></ul></li></ul><h3 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h3><ul><li>helm是k8s的包管理器，类比yum/apt/homebrew/pip</li><li>简化包分发/安装/版本管理等操作流程</li><li>CS架构<ul><li>客户端helm</li><li>服务端tiller</li></ul></li><li>helm<ul><li>helm version</li><li>默认会读取$HOME/.kube/config 中的集群地址</li></ul></li><li>tiller<ul><li>直接执行tiller默认启动44134(和helm通信)和44135(用于探活)端口的服务</li><li>使用客户端连接tiller时要设置HELM_HOST环境变量(44134服务)</li><li>确保$HOME/.kube/config正确配置</li></ul></li><li>默认安装<ul><li>helm init [–tiller-image 国内tiller镜像]</li><li>会在k8s集群中部署tiller和初始化helm的默认目录$HELM_HOME默认$HOME/.helm</li><li>默认会生成kube-system命名空间下的tiller-deploy</li></ul></li><li>核心概念<ul><li>chart<ul><li>helm所管理的包，类似yum的rpm</li><li>包含应用要部署到集群上必须的所有资源</li></ul></li><li>release<ul><li>chart在集群部署后的实例</li><li>chart每次部署都会产生一次release</li></ul></li><li>repository<ul><li>存储chart的仓库</li><li>默认情况下helm初始化时有2个仓库:stable和local</li></ul></li><li>config<ul><li>部署时可以自定义的配置</li><li>真正执行部署时会把config和chart进行合并</li></ul></li></ul></li><li>工作原理<ul><li>helm通过gRPC将chart发送至tiller</li><li>tiller通过内置的k8s客户端库与api-server交互，默认采用ClusterIP的service部署chart，通过socat端口转发数据</li><li>生成release用于管理</li></ul></li><li>实践<ul><li>helm create name</li><li>tree -a name<ul><li>Chart.yaml</li><li>charts</li><li>.helmignore</li><li>templates<ul><li>Notes.txt #在helm install完成后会回显，用于使用说明</li></ul></li><li>values.yaml</li></ul></li><li>helm package name </li><li>helm install name|path-to-name-version.tgz</li></ul></li></ul><h3 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h3><ul><li>整个集群的统一入口</li><li>默认6443端口，可通过–secure-port配置</li><li>也可配置–insecure-port，通过这个端口访问无需认证，生产环境应该配置为0以禁用此功能</li><li>kubectl version -v 8 #8是指logLevel</li><li>curl -k <a href="https://172.17.0.99:6443/version" target="_blank" rel="noopener">https://172.17.0.99:6443/version</a></li><li>kubectl proxy &amp; # 使用KUBECONFIG中的配置在本地和集群之间创建一个代理</li><li>核心功能<ul><li>认证</li><li>授权</li><li>准入控制(默认开启以下插件)<ul><li>NamespaceLifecycle<ul><li>保证正在终止的namespace不允许创建对象</li><li>不允许请求不存在的namespace</li><li>保证default和kube-system的namespace不被删除</li></ul></li><li>LimitRanger 为pod设置默认请求资源的限制</li><li>ServiceAccount 可按预设规则创建sa</li><li>DefaultStorageClass 为PVC设置默认StorageClass</li><li>DefaultTolerationSeconds 设置pod默认的forgiveness toleration为5分钟</li><li>ResourceQuota 限制pod请求配额</li><li>AllwaysPullImages 总是拉取镜像</li><li>AllwaysAdmit 总是接受所有请求</li></ul></li><li>CRUD处理</li></ul></li></ul><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><ul><li>概述<ul><li>分布式，高可用，强一致的键值存储，还有监听机制</li><li>go语言编写</li><li>Raft协议作为一致性算法，需要部署奇数个节点3，5，7</li><li>常用于分布式系统中的服务注册发现或存储系统的关键数据</li></ul></li><li>操作<ul><li>kubectl -n kube-system get pods ｜ grep etcd</li><li>kubectl -n kube-system exec -it NAME sh</li><li>ETCDCTL_API=3 etcdctl –key=/etc/kubernetes/pki/etcd/server.key  –cert=/etc/kubernetes/pki/etcd/server.crt  –cacert=/etc/kubernetes/pki/etcd/ca.crt member list</li><li>ETCDCTL_API=3 etcdctl –key=/etc/kubernetes/pki/etcd/server.key  –cert=/etc/kubernetes/pki/etcd/server.crt  –cacert=/etc/kubernetes/pki/etcd/ca.crt get /registry –prefix –keys-only #集群元信息基本都是在/registry下</li><li>ETCDCTL_API=3 etcdctl –key=/etc/kubernetes/pki/etcd/server.key  –cert=/etc/kubernetes/pki/etcd/server.crt  –cacert=/etc/kubernetes/pki/etcd/ca.crt get /registry/namespaces –prefix –keys-only #查看ns</li><li>kubectl create  ns NAME #创建ns并再次查看</li></ul></li></ul><h3 id="controller-manager"><a href="#controller-manager" class="headerlink" title="controller-manager"></a>controller-manager</h3><ul><li>实际包含2部分<ul><li>kube-controller-manager 嵌入了k8s核心控制循环的守护进程</li><li>cloud-controller-manager 为各云厂商提供抽象封装便于使用自己的provide</li></ul></li><li>作用<ul><li>通过apiserver提供的信息持续监控集群状态，并尝试将集群调整至预期状态</li><li>通过默认的10252端口提供健康检查的/healthz和监控的/metrics接口</li></ul></li></ul><h3 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h3><ul><li>集群调度器，将预期的pod资源调度到最佳的node上</li><li>是一个策略丰富，拓扑感知的调度程序，显著影响可用性，性能和容量</li><li>处理阶段<ul><li>computing predicates 解决pod能否调度到node上的问题(pod亲和性/是否可调度等)</li><li>prioritizing 解决上个阶段得到的nodes中哪个是最优的，得到一个优先级列表</li><li>selecting host 最终选择pod调度到哪台node上</li></ul></li></ul><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><ul><li>负责node和pod的相关管理任务</li><li>作用<ul><li>node管理<ul><li>向master注册node并上报机器信息</li><li>可配置node上的maxPods数，健康检查机制，认证授权机制，驱逐策略等</li><li>清理磁盘等工作</li></ul></li><li>pod管理<ul><li>接收scheduler的调度并确保pod按预期工作</li><li>确保pod的健康检查(livenessProbe和readinessProbe)</li><li>确保资源监控(cAdvisor)</li></ul></li></ul></li></ul><h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><ul><li>运行于node上的网络代理组件，提供了TCP/UDP的连接转发的支持</li><li>查看svc后端具体pod的服务可以查看endpoints对象</li><li>工作模式<ul><li>userspace 效率不高不推荐</li><li>iptables 默认，问题是给机器增加很多规则</li><li>ipvs 为了解决iptables的性能问题而引入，采用增量方式更新</li></ul></li></ul><h3 id="containerRuntime-docker"><a href="#containerRuntime-docker" class="headerlink" title="containerRuntime(docker)"></a>containerRuntime(docker)</h3><ul><li>k8s中的CRI即可支持kubelet使用不同的runtime，而不需要重新编译</li><li>当前最广泛的使用就是docker</li></ul><h3 id="troubleshoot"><a href="#troubleshoot" class="headerlink" title="troubleshoot"></a>troubleshoot</h3><ul><li>kubectl describe</li><li>kubectl get events</li><li>kubectl get endpoints #svc是通过endpoints来工作的，这里可以看到pod的端口等</li><li>修复<ul><li>版本控制yaml文件变更后重新apply</li><li>kubectl edit #不推荐使用，不会保留历史</li></ul></li></ul><h3 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h3><ul><li>kubectl apply -f dashboard.yaml</li><li>访问<ul><li>默认的部署方式svc使用了ClusterIP无法正常访问</li><li>kubectl -n kube-system port-forward pod/NAME 8443 # 利用socat进行端口转发</li><li>kubectl -n kube-system get serviceaccount -l k8s-app=kubernetes-dashboard -o yaml # 查找secrets</li><li>kubectl -n kube-system describe secrets NAME # 通过secrets获取token</li></ul></li><li>参考dashboard服务可以基于k8s开发云平台</li></ul><h3 id="coreDNS"><a href="#coreDNS" class="headerlink" title="coreDNS"></a>coreDNS</h3><ul><li>是一个独立的DNS项目，可集成k8s，也可单独使用</li><li>扩展性很强，很多功能都是通过插件完成<ul><li>内置插件</li><li>丰富的三方插件</li></ul></li><li>验证<ul><li>kubectl run alpine -it –rm –restart=’Never’ –image=’alpine’ sh</li><li>apk add –no-cache bind-tools</li><li>dig @PODIP SVCNAME.NS.svc.cluster.local +noall +answer</li></ul></li><li>特性<ul><li>coreDNS的解析是全局的，跨ns的，但不代表网络互通</li><li>域名有特定的格式 SVCNAME.NS.svc.cluster.local</li><li>使用configMap方式进行的配置，如果更改了配置需要重启pod才能生效 kubectl -n kube-system get cm coredns -o yaml</li></ul></li></ul><h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><ul><li>kubectl explain ingress</li><li>是一组允许外部请求进入集群的路由规则的集合，可以给svc提供集群外访问的url/ssl终止/负载均衡等</li><li>起到了智能路由的角色，外部流量到达ingress，再由它按制定好的规则分发到不同的后端</li><li>ingress与loadBalancer类型的svc区别<ul><li>ingress不是一种svc类型</li><li>ingress可以由多种控制器(实现方式)<ul><li>nginxIngressController是使用cm存储nginx的配置实现的(支持会话保持和动态配置)</li><li>google的GLBC</li><li>第三方的实现<ul><li>基于envoy的contour</li><li>F5的F5 BIG-IPController</li><li>基于haproxy的haproxy-ingress</li><li>基于istio的traffic</li></ul></li></ul></li></ul></li><li>使用<ul><li>创建ns</li><li>创建cm，主要是给controller使用</li><li>创建Role/RoleBinding</li><li>部署nginxIngressController</li><li>检查 kubectl -n ingress-nginx get all</li><li>将nginxIngressController暴露至集群外(这里选择nodePort方式创建svc)</li><li>测试 curl NODE:PORT</li><li>部署ingress</li><li>测试 <ul><li>kubectl -n work get ingress</li><li>访问DOMAIN:暴露ingress时创建的svc的端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"># ns</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line"># cm</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-configuration</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: tcp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: udp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># Role/Rolebinding</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-serviceaccount</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - endpoints</span><br><span class="line">      - nodes</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">    verbs:</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - nodes</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - services</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;extensions&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - ingresses</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - events</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">      - patch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;extensions&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - ingresses/status</span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">      - namespaces</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    resourceNames:</span><br><span class="line">      - &quot;ingress-controller-leader-nginx&quot;</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - update</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - endpoints</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role-nisa-binding</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole-nisa-binding</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># nginxIngressController</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-controller</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/name: ingress-nginx</span><br><span class="line">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app.kubernetes.io/name: ingress-nginx</span><br><span class="line">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/port: &quot;10254&quot;</span><br><span class="line">        prometheus.io/scrape: &quot;true&quot;</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nginx-ingress-serviceaccount</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx-ingress-controller</span><br><span class="line">          image: taobeier/nginx-ingress-controller:0.21.0</span><br><span class="line">          args:</span><br><span class="line">            - /nginx-ingress-controller</span><br><span class="line">            - --configmap=$(POD_NAMESPACE)/nginx-configuration</span><br><span class="line">            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span><br><span class="line">            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services</span><br><span class="line">            - --publish-service=$(POD_NAMESPACE)/ingress-nginx</span><br><span class="line">            - --annotations-prefix=nginx.ingress.kubernetes.io</span><br><span class="line">          securityContext:</span><br><span class="line">            capabilities:</span><br><span class="line">              drop:</span><br><span class="line">                - ALL</span><br><span class="line">              add:</span><br><span class="line">                - NET_BIND_SERVICE</span><br><span class="line">            # www-data -&gt; 33</span><br><span class="line">            runAsUser: 33</span><br><span class="line">          env:</span><br><span class="line">            - name: POD_NAME</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.name</span><br><span class="line">            - name: POD_NAMESPACE</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.namespace</span><br><span class="line">          ports:</span><br><span class="line">            - name: http</span><br><span class="line">              containerPort: 80</span><br><span class="line">            - name: https</span><br><span class="line">              containerPort: 443</span><br><span class="line">          livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 10</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br><span class="line">          readinessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br><span class="line"></span><br><span class="line"># 暴露至集群外</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">    - name: https</span><br><span class="line">      port: 443</span><br><span class="line">      targetPort: 443</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line"># ingress</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: name</span><br><span class="line">  namespace: work</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: DOMAIN</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: SVCNAME</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><ul><li>监控点<ul><li>node情况</li><li>k8s集群自身状态</li><li>部署在集群内的应用的状态</li></ul></li><li>prometheus<ul><li>非常灵活易于扩展</li><li>通过各种exporter暴露数据</li><li>由prometheus server定时拉取数据然后存储</li><li>自带简单的前端界面可以使用promQL进行查询</li></ul></li><li>安装<ul><li>推荐prometheusOperator</li><li>具体过程<ul><li>创建ns</li><li>创建role/rolebinding</li><li>创建prometheus的配置文件cm</li><li>创建部署文件deploy</li><li>执行完毕后查看情况 kubectl -n monitoring get all</li><li>使用svc将服务暴露/也可使用ingress</li><li>安装nodeExporter(daemonSet)</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可扩展&lt;ul&gt;
&lt;li&gt;CNI Container Network Interface&lt;/li&gt;
&lt;li&gt;CSI Contain
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fe</title>
    <link href="https://prief.github.io/fe/"/>
    <id>https://prief.github.io/fe/</id>
    <published>2020-02-28T05:18:52.000Z</published>
    <updated>2020-03-24T08:06:40.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fe"><a href="#fe" class="headerlink" title="fe"></a>fe</h3><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><ul><li>原始类型<ul><li>Boolean</li><li>String</li><li>Number</li><li>Undefined</li><li>Null</li><li>Symbol</li></ul></li><li>类型判断<ul><li>typeof<ul><li>undefined</li><li>boolean</li><li>string</li><li>number</li><li>function</li><li>object</li></ul></li><li>instanceof<ul><li>数组</li><li>自定义类</li></ul></li></ul></li><li>类型传递<ul><li>值类型按值传递<ul><li>Boolean</li><li>String</li><li>Number</li><li>Undefined</li><li>Null</li></ul></li><li>引用类型按共享传递<ul><li>Object</li><li>Function</li><li>Array</li><li>Date</li></ul></li></ul></li><li>原型和原型链<ul><li>引用类型都有对象的特性，可自由扩展属性</li><li>引用类型都有一个<strong>proto</strong>属性指向原型对象</li><li>所有的函数都有prototype属性指向原型对象</li><li>引用类型的<strong>proto</strong>指向它构造函数的prototype</li><li>当试图得到一个对象的某个属性时如果本身没有则去<strong>proto</strong>上寻找形成原型链</li></ul></li><li>作用域和作用域链<ul><li>全局作用域</li><li>函数作用域</li><li>ES6后增加块级作用域</li><li>当前作用域中没有的变量称为自由变量，自由变量向父级作用域寻值，形成作用域链</li></ul></li></ul><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ul><li>选择器权重和优先级<ul><li>!important</li><li>内联样式</li><li>ID选择器</li><li>类、伪类、属性选择器</li><li>元素选择器</li></ul></li><li>盒子模型<ul><li>margin</li><li>border</li><li>padding</li><li>content</li><li>分类<ul><li>border-box</li><li>content-box</li></ul></li></ul></li><li>position<ul><li>static</li><li>relative</li><li>absolute</li><li>fixed</li></ul></li><li>flex<ul><li>container<ul><li>flex-direction</li><li>justify-content</li><li>align-items</li></ul></li><li>item</li></ul></li><li>重绘和回流<ul><li>重绘<ul><li>简单的进行样式的变化，如颜色、背景等，不影响几何信息</li><li>开销小</li></ul></li><li>回流（重排）<ul><li>DOM中的尺寸大小几何信息，位置信息发生变化导致重新渲染</li><li>开销大</li><li>getComputedStyle/currentStyle获取即时属性值的操作也会触发回流</li></ul></li><li>避免<ul><li>缓存DOM对象</li><li>避免逐条修改样式，使用类名合并</li><li>将DOM离线后操作不会有性能问题，操作完毕后上线display:none/block;</li><li>现代浏览器会维护一个flush队列，在不得已的时候会执行队列</li></ul></li></ul></li><li>1px线实现方式<ul><li>渐变</li><li>缩放</li><li>图片(base64/svg)</li></ul></li><li>图片保真<ul><li>统一使用最高倍图，但浪费带宽</li><li>srcset属性</li></ul></li><li>字体适配<ul><li>默认最小限制<ul><li>PC上是12px</li><li>手机上是8px</li></ul></li><li>不建议使用奇数数值，容易在低端手机上出现锯齿</li><li>尽量使用默认系统字体</li><li>font-family取值<ul><li>具体字体名称</li><li>通用类别<ul><li>serif 衬线字体族</li><li>sans-serif 非衬线字体族</li><li>monospace 等宽字体</li><li>cursive 草书字体</li><li>fantasy 艺术字体</li><li>systme-ui 系统默认字体</li><li>emoji 兼容表情符号</li><li>math 数学表达式</li><li>fangsong 仿宋</li></ul></li></ul></li></ul></li></ul><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul><li>程序<ul><li>数据</li><li>算法</li></ul></li><li>数据结构<ul><li>简单数据结构<ul><li>有序数据结构：栈、队列、链表，省空间，存储空间小</li><li>无序数据结构：字典、集合、散列集，省时间，读取时间快</li></ul></li><li>高级数据结构<ul><li>树、堆</li><li>图</li></ul></li></ul></li><li>常见算法<ul><li>递归</li><li>排序</li><li>枚举</li></ul></li><li>算法复杂度<ul><li>时间复杂度（好估算、好评估）<ul><li>常数阶O(1) #每行一次性的语句就是常数阶</li><li>线性阶O(n)</li><li>平方阶O(n^2)</li><li>立方阶O(n^3)</li><li>k次方阶O(n^k)</li><li>指数阶O(2^n)</li><li>对数阶O(logN)</li><li>线性对数阶O(nlogN)</li></ul></li><li>空间复杂度</li><li>分析技巧<ul><li>几重循环，一般就是1层循环就是O(n)，两重循环就是O(n^2)</li><li>如果有二分，则为O(logN)</li><li>每行一次性的语句则为1</li><li>所有行的复杂度相加后除去常数即得复杂度</li></ul></li></ul></li></ul><h4 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h4><ul><li>加载过程<ul><li>DNS解析</li><li>TCP连接</li><li>HTTP请求</li><li>HTTP响应</li><li>客户端渲染<ul><li>根据html生成DOM</li><li>根据css生成CSSOM</li><li>DOM和CSSOM整合生成RenderTree</li><li>布局合成 、绘制渲染</li><li>遇到script会阻塞渲染，因为js执行和浏览器渲染共用一个线程</li></ul></li></ul></li><li>性能优化<ul><li>减少页面体积，提升网络加载<ul><li>静态资源压缩、合并</li><li>静态资源缓存</li><li>使用CDN</li></ul></li><li>优化页面渲染<ul><li>css放前、js放后</li><li>懒加载</li><li>减少DOM操作</li><li>事件节流</li><li>SSR</li></ul></li></ul></li><li>web安全<ul><li>SQL注入</li><li>XSS</li><li>CSRF</li></ul></li></ul><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li><p>DNS解析</p><ul><li>浏览器DNS缓存</li><li>DNS prefetch</li></ul></li><li><p>TCP连接</p><ul><li>长连接</li><li>预连接</li><li>接入SPDY协议</li></ul></li><li><p>HTTP请求</p><ul><li>减少次数（loader中的exclude、三方库DllPlugin/DllReferencePlugin）</li><li>减少体积（webpack-bundle-analyzer、代码压缩混淆、gzip、tree-shaking、按需加载）</li><li>CDN<ul><li>content delivery network</li><li>2大功能<ul><li>缓存</li><li>回源</li></ul></li><li>CDN域名和业务服务域名一定要分开，避免cookie无用传输</li></ul></li><li>Gzip<ul><li>gzip的内核就是Deflate</li><li>通常能减小70%的体积</li><li>原理就是把内容中重复的字符串临时替换，使整个文件变小，所以重复率越高，收益越好</li><li>nginx等代理文件中可以配置index.js/index.js.gz 以减少cpu临时压缩的消耗</li></ul></li><li>图片优化<ul><li>JPEG/JPG 有损压缩、体积小、色彩丰富，常用轮播图，不支持透明</li><li>PNG 无损压缩、质量高、支持透明，常用单色小图logo，体积大<ul><li>PNG-8  二进制的位数8，最多支持256种颜色</li><li>PNG-24 二进制的位数24，最多支持1600万种颜色</li></ul></li><li>SVG<ul><li>文本文件</li><li>体积小、不失真、可压缩</li><li>对图像的处理不是基于像素，而是基于对图像的描述</li><li>可以放到HTML的DOM中，也可以单独保存.svg文件</li><li>渲染成本比较高，性能要求比较高</li></ul></li><li>Base64<ul><li>文本文件</li><li>依赖编码，小图标解决方案</li><li>编码后，体积会增大1/3</li></ul></li><li>WebP<ul><li>年轻的全能选手</li><li>支持有损和无损压缩</li><li>支持透明、支持动态图、支持丰富的色彩、体积比较小</li><li>兼容性比较差，编码时比jpg需要更多计算资源</li></ul></li></ul></li></ul></li><li><p>渲染</p><ul><li>SSR<ul><li>SEO</li><li>首屏白屏</li></ul></li><li>CSS</li><li>JSji</li><li>DOM</li><li>懒加载</li><li>事件节流和防抖</li><li>回流和重绘</li></ul></li><li><p>浏览器引擎</p><ul><li>渲染引擎（内核）<ul><li>功能部件<ul><li>html解释器，将html输出DOM</li><li>css解释器，将css输出CSSOM</li><li>布局绘制，合成renderTree</li><li>网络</li><li>存储</li><li>图形、图片解码器</li><li>音视频</li></ul></li><li>常见分类<ul><li>Trident（IE）</li><li>Gecko（Firefox）</li><li>Blink（Chrome、Opera）是webkit的一个分支</li><li>Webkit（Safari）</li></ul></li><li>优化<ul><li>css<ul><li>css解释器对每条规则都按从右到左的顺序去匹配，因此要减少选择器嵌套</li><li>避免使用通配符，只对需要用到的元素进行选择</li><li>css是阻塞渲染的资源，需要尽早加载，尽早渲染，把css往前放</li></ul></li><li>js<ul><li>默认的js也会阻塞DOM和CSSOM，因为可能会操作DOM</li><li>async模式加载js不会阻塞浏览器，异步加载js，加载完毕后立即执行</li><li>defer模式加载js不会阻塞浏览器，异步加载js，加载完毕后延迟到DOMContentLoaded后执行</li></ul></li><li>DOM<ul><li>对DOM的修改引发了DOM几何尺寸的变化，浏览器都要重新计算几何属性，再将结果绘制出来，即回流重排</li><li>对DOM的修改没有引发几何尺寸的变化，不需要重新计算几何属性，跳过重排直接执行重绘</li><li>减少DOM的访问和操作</li><li>必要的DOM操作可以使用DocumentFragment，不会有性能问题</li></ul></li></ul></li></ul></li><li>js引擎<ul><li>异步队列<ul><li>micro-task<ul><li>process.nextTick</li><li>promise</li><li>MutationObserver</li></ul></li><li>macro-task<ul><li>setTimeout</li><li>setInteral</li><li>setImmediate</li><li>IO操作</li></ul></li></ul></li><li>执行过程<ul><li>将一个macro-task执行并出队</li><li>将一对micro-task执行并出对</li><li>执行渲染，更新界面</li><li>处理worker相关的任务</li><li>循环，当我们需要在异步任务中实现DOM修改时，把它包装成micro-task是明智的选择</li></ul></li></ul></li></ul></li><li><p>浏览器缓存</p><ul><li><p>MemoryCache</p><ul><li>本着节约内存的原则，一般较小的资源有几率入内存</li></ul></li><li><p>ServiceWorkerCache 离线缓存</p><ul><li>脱离主线程之外的独立线程</li><li>不能操作DOM，只能做些js的计算，数据的请求</li><li>serviceWorker生命周期<ul><li>install</li><li>active</li><li>working</li></ul></li></ul></li><li><p>HTTPCache</p><ul><li>强缓存（200）<ul><li>expires（http1.0,依赖本地时间）</li><li>cache-control(http1.1,完全替代expires，优先级高)<ul><li>max-age=31536000(有效时间长度，单位秒)</li><li>s-maxage优先级高于max-age，只在代理服务器上有效</li><li>public可以被客户端和代理服务器缓存，private只能被客户端缓存，默认private</li><li>no-cache 忽略所有客户端缓存，与服务器协商缓存</li><li>no-store 忽略所有缓存，包括协商缓存，直接请求资源</li></ul></li></ul></li><li>协商缓存（304）<ul><li>Last-Modified/If-Modified-Since（时间戳）<ul><li>只是更新了文件的元信息，比如touch了文件一下，也会造成更新</li><li>时间粒度只能到秒，如果1秒内完成了内容的变更，却不会更新</li></ul></li><li>ETag/If-None-Match<ul><li>解决上述2个问题</li><li>基于文件内容为资源编码的唯一字符串标示</li><li>因为ETag的生成要耗费服务器资源，所以是上面的补充，不能完全替代，优先级高于上面<img src="/fe/http协商缓存响应头设置流程.png" title="http协商缓存响应头设置流程"></li></ul></li></ul></li></ul></li><li><p>PushCache </p><ul><li>http2的特性</li><li>是缓存的最后一道防线，在上面3种缓存都未命中的情况下才会询问PushCache</li><li>不同的页面共享了一个http2连接，就共享同一个PushCache</li><li>会话级的缓存，session关闭，缓存失效</li></ul></li></ul></li><li><p>本地存储</p><ul><li>cookie<ul><li>状态维持，解决http无状态的问题</li><li>体积限制，最大4k</li><li>流量消耗</li></ul></li><li>storage<ul><li>localStorage 永久有效</li><li>sessionStorage 会话级有效</li></ul></li><li>IndexedDB<ul><li>非关系型数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">var db;</span><br><span class="line">// 参数1位数据库名，参数2为版本号</span><br><span class="line">const request = window.indexedDB.open(&quot;name&quot;, 1)</span><br><span class="line">// 使用IndexedDB失败时的监听函数</span><br><span class="line">request.onerror = function(event) &#123;</span><br><span class="line">  console.log(&apos;无法使用IndexedDB&apos;)</span><br><span class="line">&#125;</span><br><span class="line">// 成功</span><br><span class="line">request.onsuccess  = function(event)&#123;</span><br><span class="line">  // 此处就可以获取到db实例</span><br><span class="line">  db = event.target.result</span><br><span class="line">  console.log(&quot;你打开了IndexedDB&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// onupgradeneeded事件会在初始化数据库/版本发生更新时被调用，我们在它的监听函数中创建object store</span><br><span class="line">request.onupgradeneeded = function(event)&#123;</span><br><span class="line">  let objectStore</span><br><span class="line">  // 如果同名表未被创建过，则新建test表</span><br><span class="line">  if (!db.objectStoreNames.contains(&apos;test&apos;)) &#123;</span><br><span class="line">    objectStore = db.createObjectStore(&apos;test&apos;, &#123; keyPath: &apos;id&apos; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">  // 创建事务，指定表格名称和读写权限</span><br><span class="line">  const transaction = db.transaction([&quot;test&quot;],&quot;readwrite&quot;)</span><br><span class="line">  // 拿到Object Store对象</span><br><span class="line">  const objectStore = transaction.objectStore(&quot;test&quot;)</span><br><span class="line">  // 向表格写入数据</span><br><span class="line">  objectStore.add(&#123;id: 1, name: &apos;test1&apos;&#125;)</span><br><span class="line"></span><br><span class="line">  // 操作成功时的监听函数</span><br><span class="line">  transaction.oncomplete = function(event) &#123;</span><br><span class="line">    console.log(&quot;操作成功&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 操作失败时的监听函数</span><br><span class="line">  transaction.onerror = function(event) &#123;</span><br><span class="line">    console.log(&quot;这里有一个Error&quot;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// lazyload</span><br><span class="line">// 获取所有的图片标签</span><br><span class="line">const imgs = document.getElementsByTagName(&apos;img&apos;)</span><br><span class="line">// 获取可视区域的高度</span><br><span class="line">const viewHeight = window.innerHeight || document.documentElement.clientHeight</span><br><span class="line">// num用于统计当前显示到了哪一张图片，避免每次都从第一张图片开始检查是否露出</span><br><span class="line">let num = 0</span><br><span class="line">function lazyload()&#123;</span><br><span class="line">    for(let i=num; i&lt;imgs.length; i++) &#123;</span><br><span class="line">        // 用可视区域高度减去元素顶部距离可视区域顶部的高度</span><br><span class="line">        let distance = viewHeight - imgs[i].getBoundingClientRect().top</span><br><span class="line">        // 如果可视区域高度大于等于元素顶部距离可视区域顶部的高度，说明元素露出</span><br><span class="line">        if(distance &gt;= 0 )&#123;</span><br><span class="line">            // 给元素写入真实的src，展示图片</span><br><span class="line">            imgs[i].src = imgs[i].getAttribute(&apos;data-src&apos;)</span><br><span class="line">            // 前i张图片已经加载完毕，下次从第i+1张开始检查是否露出</span><br><span class="line">            num = i + 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 监听Scroll事件</span><br><span class="line">window.addEventListener(&apos;scroll&apos;, lazyload, false);</span><br><span class="line"></span><br><span class="line">// fn是我们需要包装的事件回调, delay是时间间隔的阈值</span><br><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">  // last为上一次触发回调的时间, timer是定时器</span><br><span class="line">  let last = 0, timer = null</span><br><span class="line">  // 将throttle处理结果当作函数返回</span><br><span class="line">  </span><br><span class="line">  return function () &#123; </span><br><span class="line">    // 保留调用时的this上下文</span><br><span class="line">    let context = this</span><br><span class="line">    // 保留调用时传入的参数</span><br><span class="line">    let args = arguments</span><br><span class="line">    // 记录本次触发回调的时间</span><br><span class="line">    let now = +new Date()</span><br><span class="line">    </span><br><span class="line">    // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span><br><span class="line">    if (now - last &lt; delay) &#123;</span><br><span class="line">    // 如果时间间隔小于我们设定的时间间隔阈值，则为本次触发操作设立一个新的定时器</span><br><span class="line">       clearTimeout(timer)</span><br><span class="line">       timer = setTimeout(function () &#123;</span><br><span class="line">          last = now</span><br><span class="line">          fn.apply(context, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 如果时间间隔超出了我们设定的时间间隔阈值，那就不等了，无论如何要反馈给用户一次响应</span><br><span class="line">        last = now</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用新的throttle包装scroll的回调</span><br><span class="line">const better_scroll = throttle(() =&gt; console.log(&apos;触发了滚动事件&apos;), 1000)</span><br><span class="line">document.addEventListener(&apos;scroll&apos;, better_scroll)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// throttle</span><br><span class="line">// fn是我们需要包装的事件回调, interval是时间间隔的阈值</span><br><span class="line">function throttle(fn, interval) &#123;</span><br><span class="line">  // last为上一次触发回调的时间</span><br><span class="line">  let last = 0</span><br><span class="line">  </span><br><span class="line">  // 将throttle处理结果当作函数返回</span><br><span class="line">  return function () &#123;</span><br><span class="line">      // 保留调用时的this上下文</span><br><span class="line">      let context = this</span><br><span class="line">      // 保留调用时传入的参数</span><br><span class="line">      let args = arguments</span><br><span class="line">      // 记录本次触发回调的时间</span><br><span class="line">      let now = +new Date()</span><br><span class="line">      </span><br><span class="line">      // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span><br><span class="line">      if (now - last &gt;= interval) &#123;</span><br><span class="line">      // 如果时间间隔大于我们设定的时间间隔阈值，则执行回调</span><br><span class="line">          last = now;</span><br><span class="line">          fn.apply(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 用throttle来包装scroll的回调</span><br><span class="line">const better_scroll = throttle(() =&gt; console.log(&apos;触发了滚动事件&apos;), 1000)</span><br><span class="line">document.addEventListener(&apos;scroll&apos;, better_scroll)</span><br><span class="line"></span><br><span class="line">// fn是我们需要包装的事件回调, delay是每次推迟执行的等待时间</span><br><span class="line">function debounce(fn, delay) &#123;</span><br><span class="line">  // 定时器</span><br><span class="line">  let timer = null</span><br><span class="line">  </span><br><span class="line">  // 将debounce处理结果当作函数返回</span><br><span class="line">  return function () &#123;</span><br><span class="line">    // 保留调用时的this上下文</span><br><span class="line">    let context = this</span><br><span class="line">    // 保留调用时传入的参数</span><br><span class="line">    let args = arguments</span><br><span class="line"></span><br><span class="line">    // 每次事件被触发时，都去清除之前的旧定时器</span><br><span class="line">    if(timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    // 设立新定时器</span><br><span class="line">    timer = setTimeout(function () &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用debounce来包装scroll的回调</span><br><span class="line">const better_scroll = debounce(() =&gt; console.log(&apos;触发了滚动事件&apos;), 1000)</span><br><span class="line">document.addEventListener(&apos;scroll&apos;, better_scroll)</span><br></pre></td></tr></table></figure><ul><li>性能监测<ul><li>可视化工具<ul><li>Performance</li><li>LightHouse</li></ul></li><li>性能api<ul><li>performance</li></ul></li></ul></li></ul><h4 id="技能分层"><a href="#技能分层" class="headerlink" title="技能分层"></a>技能分层</h4><ul><li><p>基础页面开发（pc网页）</p><ul><li>设计稿审查<ul><li>确定设计稿的开发友好性（是否有还原成本高和无法实现的地方）</li><li>特殊元素是否有合理的边界处理（如文案超出外层容器怎么办）</li><li>确定页面的框架结构（layout）</li><li>识别可复用的组件（跨页面可复用/当前页面可复用）</li></ul></li><li>编写页面骨骼框架<ul><li>盒模型统一 box-sizing:border-box;</li><li>布局<ul><li>普通文档流</li><li>浮动布局</li><li>绝对布局</li><li>弹性布局</li><li>网格布局</li></ul></li></ul></li><li>填充网页内容</li><li>润色<ul><li>BEM <ul><li>基于组件的css命名规范</li><li>block模块，模块名字的单词之间用-连接</li><li>element元素，模块中的子元素，用__连接模块名</li><li>modifier修饰符，元素的其他形态，用–连接</li><li>B-B__E–M</li></ul></li></ul></li><li>兼容性测试<ul><li>html兼容性</li><li>css兼容性</li><li>js兼容性</li></ul></li></ul></li><li><p>响应式页面开发（移动端网页） </p><ul><li>目标<ul><li>为不同的浏览器窗口使用不同的样式代码</li><li>页面元素的尺寸能够依据浏览器窗口变化而平滑变化</li></ul></li><li>步骤<ul><li>添加vierport的meta标签</li><li>使用mediaQuery <ul><li>@media(min|max-width|height orientation)</li><li>两种方式<ul><li>style代码里@media (){}</li><li><link media="(min-width: 769px)" href="min-769.css"></li></ul></li><li>样式断点，参考bulma框架<ul><li>mobile</li><li>tablet 769</li><li>desktop 1024</li><li>widescreen 1216</li><li>fullhd 1408</li></ul></li></ul></li><li>使用viewport单位和rem 解决元素的尺寸能响应变化<ul><li>使用vw作为唯一单位<ul><li>sass函数将设计稿尺寸的像素单位转换为vw单位</li><li>所有尺寸全部转换为vw包括文字</li><li>1px使用transform的scale实现</li><li>vw缺点就是会无限放大或缩小</li></ul></li><li>vw + rem<ul><li>根元素的字体大小为vw，同时限制最大值/最小值并配合body最大宽/最小宽实现断点</li><li>其他元素统一使用rem单位<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// iPhone 6尺寸作为设计稿基准</span><br><span class="line">$vw_base: 375; </span><br><span class="line">@function vw($px) &#123;</span><br><span class="line">    @return ($px / $vm_base) * 100vw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.mod_grid &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">        // 实现1物理像素的下边框线</span><br><span class="line">        content: &apos;&apos;;</span><br><span class="line">        position: absolute;</span><br><span class="line">        z-index: 1;</span><br><span class="line">        pointer-events: none;</span><br><span class="line">        background-color: #ddd;</span><br><span class="line">        height: 1px;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        @media only screen and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class="line">            -webkit-transform: scaleY(0.5);</span><br><span class="line">            -webkit-transform-origin: 50% 0%;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// vw+rem</span><br><span class="line">// rem 单位换算：定为 75px 只是方便运算，750px-75px、640-64px、1080px-108px，如此类推</span><br><span class="line">$vw_fontsize: 75; // iPhone 6尺寸的根元素大小基准值</span><br><span class="line">@function rem($px) &#123;</span><br><span class="line">     @return ($px / $vw_fontsize ) * 1rem;</span><br><span class="line">&#125;</span><br><span class="line">// 根元素大小使用 vw 单位</span><br><span class="line">$vw_design: 750;</span><br><span class="line">html &#123;</span><br><span class="line">    font-size: ($vw_fontsize / ($vw_design / 2)) * 100vw; </span><br><span class="line">    // 同时，通过Media Queries 限制根元素最大最小值</span><br><span class="line">    @media screen and (max-width: 320px) &#123;</span><br><span class="line">        font-size: 64px;</span><br><span class="line">    &#125;</span><br><span class="line">    @media screen and (min-width: 540px) &#123;</span><br><span class="line">        font-size: 108px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// body 也增加最大最小宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小</span><br><span class="line">body &#123;</span><br><span class="line">    max-width: 540px;</span><br><span class="line">    min-width: 320px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li><li><p>滑屏应用开发（活动营销页面）</p><ul><li>swiper</li><li>自己实现<ul><li>手势动作判断</li><li>执行相应动画</li></ul></li></ul></li><li><p>动效开发（活动营销页面）</p><ul><li>transition 补间动画 </li><li>animation 逐帧动画+补间动画</li><li>gif</li><li>js控制关键帧sprite的background-position</li><li>canvas库（createJS，pixi.js）</li><li>svg+SMIL<ul><li>声明视窗 <svg width="100" height="100"/></li><li>绘制路径 <path d="指令数据" style="填充描边"></path></li><li>绘制图形 <circle cx cy r style></circle></li><li>添加动画 <animatemotion></animatemotion></li><li>SMIL synchronizedMultimediaIntegrationLanguage同步多媒体集成语言，主要用作交互</li></ul></li></ul></li></ul><h4 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h4><ul><li>健身</li><li>理财</li><li>韧性</li><li>责任心</li><li>持续学习能力</li><li>团队合作能力</li><li>交流沟通能力</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fe&quot;&gt;&lt;a href=&quot;#fe&quot; class=&quot;headerlink&quot; title=&quot;fe&quot;&gt;&lt;/a&gt;fe&lt;/h3&gt;&lt;h4 id=&quot;js&quot;&gt;&lt;a href=&quot;#js&quot; class=&quot;headerlink&quot; title=&quot;js&quot;&gt;&lt;/a&gt;js&lt;/h4&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>web-sec</title>
    <link href="https://prief.github.io/web-sec/"/>
    <id>https://prief.github.io/web-sec/</id>
    <published>2020-02-22T04:36:13.000Z</published>
    <updated>2020-02-24T03:09:22.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><ul><li>服务端<ul><li>SQL注入</li><li>命令注入</li><li>文件上传</li><li>暴力破解</li></ul></li><li>客户端<ul><li>XSS</li><li>CSRF</li><li>点击劫持</li><li>URL跳转</li><li>钓鱼 仿冒官网进行信息获取</li><li>暗链 植入灰黑产业的链接，用户不可见，但可以提高排名</li><li>webshell 通过网页部署后门程序，执行非法命令</li></ul></li></ul><h3 id="web基础"><a href="#web基础" class="headerlink" title="web基础"></a>web基础</h3><ul><li>URL规范<ul><li>schema://</li><li>username:password@</li><li>hostname:port/</li><li>path?</li><li>querystring#</li><li>anchor</li></ul></li><li>HTTP报文<ul><li>头行</li><li>头部</li><li>空行</li><li>主体</li></ul></li><li>SQL<ul><li>order by FIELD/index ASC/DESC，默认升序</li><li>select * from t1 union select * from t2 默认合并重复</li><li>select * from t1 union all select * from t2 不合并重复</li><li>注释 <ul><li><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1></li><li>– 内容 </li><li>/* 内容 */</li></ul></li><li>内置命令<ul><li>source file #导入sql文件</li><li>select current_user #显示当前用户</li><li>select load_file(PATH) #显示文件内容</li></ul></li></ul></li><li>PHP<ul><li>脚本范围 <?php 内容 ?></li><li>注释<ul><li>// 内容</li><li><h1 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h1></li><li>/* 内容 */</li></ul></li><li>echo 可以用，一次可以输入多个变量</li><li>print 一次只能输出一个变量，有返回值</li><li>$var表示变量，区分大小写</li><li>引入外部php文件<ul><li>include 当脚本错误时，只是警告，继续执行</li><li>require 当脚本错误时，停止脚本执行</li></ul></li></ul></li></ul><h2 id="安全漏洞"><a href="#安全漏洞" class="headerlink" title="安全漏洞"></a>安全漏洞</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul><li>cross site scripting 跨站脚本攻击</li><li>分类<br>XSS类型 ｜ 存储型 ｜ 反射型 ｜ DOM型</li><li>– ｜ — ｜ — ｜—<br>触发过程 ｜ 黑客构造XSS后用户访问XSS页面 ｜ 用户访问XSS页面 ｜ 用户访问XSS页面<br>数据存储 ｜ 数据库 ｜ URL ｜ URL的hash中<br>谁来输出 ｜ 后端WEB程序 ｜ 后端WEB程序 ｜ 前端JS<br>输出位置 ｜ HTTP响应 ｜ HTTP响应 ｜ 动态构造的DOM</li></ul><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><ul><li>cross site request forgery 跨站请求伪造</li><li>在用户登陆的情况下以不知情的方式执行非法操作</li></ul><h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><ul><li>通过覆盖不可见的iframe引导用户点击操作的恶意行为</li><li>也称UI覆盖攻击</li></ul><h3 id="URL跳转漏洞"><a href="#URL跳转漏洞" class="headerlink" title="URL跳转漏洞"></a>URL跳转漏洞</h3><ul><li>借助未验证的URL跳转，把非法的URL嫁接到安全的URL后引导用户到非法网站</li><li>如img.alipay.com/sys/html/wait.html?goto=恶意网址</li><li>现在的短网址更隐蔽</li><li>方式<ul><li>header头的location</li><li>meta标签的refresh,url</li><li>js的location.href </li></ul></li></ul><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><ul><li>SQL injection</li><li>万能密码<ul><li>利用’ –进行字符串的闭合和注释进行攻击</li><li>本质就是SQL注入的利用方式</li></ul></li><li>原理<ul><li>数据当作了代码来执行</li><li>本质就是数据和代码未分离</li></ul></li></ul><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><ul><li>必要条件<ul><li>调用可执行系统命令的函数(system/eval…)</li><li>函数或函数的参数可控</li><li>拼接命令注入</li></ul></li></ul><h3 id="文件操作漏洞"><a href="#文件操作漏洞" class="headerlink" title="文件操作漏洞"></a>文件操作漏洞</h3><ul><li>上传漏洞<ul><li>正常的有上传头像、附件的上传功能</li><li>上传webShell</li><li>上传木马</li></ul></li><li>下载漏洞<ul><li>下载系统任意文件</li><li>下载程序代码</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;安全问题&quot;&gt;&lt;a href=&quot;#安全问题&quot; class=&quot;headerlink&quot; title=&quot;安全问题&quot;&gt;&lt;/a&gt;安全问题&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://prief.github.io/vue/"/>
    <id>https://prief.github.io/vue/</id>
    <published>2020-02-17T04:10:54.000Z</published>
    <updated>2020-02-22T03:28:56.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h2><ul><li>features<ul><li>babel</li><li>ts</li><li>pwa</li><li>router</li><li>vuex</li><li>cssPreProcessor</li><li>linter/formatter</li><li>unitTesting</li><li>e2eTesting</li></ul></li><li>dir<ul><li>node_modules</li><li>public<ul><li>favicon.ico</li><li>index.html</li></ul></li><li>src<ul><li>assets</li><li>components</li><li>router</li><li>store</li><li>views</li><li>main.js</li><li>App.vue</li></ul></li><li>tests<ul><li>unit</li><li>e2e</li></ul></li><li>.gitignore</li><li>.postcssrc.js</li><li>.eslintrc.js</li><li>.browserslistrc        </li><li>babel.config.js</li><li>package.json</li><li>package-lock.json</li><li>README.md</li></ul></li><li>ext<ul><li>npm/yarm</li><li>webpack</li><li>环境配置</li><li>接口配置</li><li>单页应用</li><li>多页应用</li><li>实用工具</li><li>开发技巧</li></ul></li></ul><h2 id="browserlist"><a href="#browserlist" class="headerlink" title="browserlist"></a>browserlist</h2><ul><li>目标浏览器列表，给所有插件共享如autoprefixer等 </li><li>可以写单独的.browserslistrc文件也可写在package.json.browserslist中</li><li>最终的数据来源于CanIUse</li><li>可以在项目中运行npx browserslist进行查看</li></ul><h2 id="env环境"><a href="#env环境" class="headerlink" title="env环境"></a>env环境</h2><ul><li>环境<ul><li>公共配置</li><li>开发环境配置</li><li>测试环境配置</li><li>生产环境配置</li></ul></li><li>推荐使用js文件进行config配置，可以支持动态参数/变量等</li></ul><h2 id="单页应用配置"><a href="#单页应用配置" class="headerlink" title="单页应用配置"></a>单页应用配置</h2><ul><li>路由配置<ul><li>如果路由存在二级目录，需要添加base属性值否则默认/</li><li>默认路由模式为hash，可修改history</li><li>路由组件可以进行懒加载 component:()=&gt;import(/* webpackChunkName: “name” */ “path2vue”)</li></ul></li><li>vuex配置<ul><li>通过 actions 异步提交 mutations 去 修改 state 的值并通过 getter 获取</li><li>大型项目目录<ul><li>index.js #组装模块并导出store<ul><li>state</li><li>mutations</li><li>actions</li><li>getters</li><li>modules</li></ul></li><li>actions.js #根级别的action</li><li>mutations.js #跟级别的mutation</li><li>modules<ul><li>moduleA.js A模块<ul><li>state</li><li>mutations</li><li>actions</li><li>getters</li></ul></li><li>moduleB.js B模块</li></ul></li></ul></li></ul></li><li>接口配置<ul><li>目录<ul><li>src<ul><li>services<ul><li>index.js #接口封装</li><li>moduleA.js #模块A接口</li><li>moduleB.js #模块B接口</li></ul></li></ul></li></ul></li><li>devServer配置proxy<ul><li>moduleX.js中一般不配置host</li><li>devServer.proxy.PATTERN.target代理目标地址</li></ul></li></ul></li><li>公共设施配置<ul><li>封装公共的方法等</li><li>目录<ul><li>src<ul><li>common<ul><li>index.js #公共配置入口，统一向外暴露</li><li>validate.js #表单验证</li></ul></li></ul></li></ul></li></ul></li><li>多页应用配置<ul><li>entries</li><li>htmlWebpackPlugin</li><li>上面2个分开的配置也可以统一使用pages配置</li><li>多页间路由跳转必须使用location的原生方法，可以封装到Vue原型链上</li><li>多页间路由跳转需要注意historyApi前后端配置</li><li>模版配置时需要注意inject的值防止重复注入</li><li>模块配置可以通过htmlWebpackPlugin.options添加自定义配置</li></ul></li><li>webpack配置<ul><li>alias解决复杂路径问题，css/html中需要~</li><li>CompressionWebpackPlugin进行压缩如gzip</li></ul></li></ul><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li><p>基础</p><ul><li>过多的if/switch判断可以用对象代替</li><li>路由跳转使用name而不是path，方便维护</li><li>key值推荐使用数组中不会变化且唯一的值</li><li>使用computed代替watch</li><li>统一管理缓存变量，增加types.js把字符串变量化</li><li>避免for/in遍历数组，防止数组原型被修改</li></ul></li><li><p>api</p><ul><li>Vue.config.performance=true;开启性能监控，配合VuePerformanceDevtool插件分析</li><li>捕获异常<ul><li>try/catch</li><li>window.onerror</li><li>Vue.config.errorHandler=(err,vm,info)=&gt;{}</li><li>watch:{obj:{handler(){},deep:b,immediate:b}}</li></ul></li></ul></li><li><p>可复用</p><ul><li>步骤<ul><li>出现重复代码</li><li>封装成一个变量</li><li>封装函数</li><li>封装组件</li><li>封装插件</li></ul></li><li>组件<ul><li>封装<ul><li>全部封装</li><li>插槽封装</li></ul></li><li>分类<ul><li>容器组件，主要处理组件逻辑</li><li>展示组件，主要处理组件样式</li></ul></li></ul></li><li>插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/* toast.js */</span><br><span class="line">import ToastComponent from &apos;./toast.vue&apos; // 引入组件</span><br><span class="line"></span><br><span class="line">let $vm</span><br><span class="line"></span><br><span class="line">export default &#123;    </span><br><span class="line">    install(Vue, options) &#123;</span><br><span class="line">        </span><br><span class="line">        // 判断实例是否存在</span><br><span class="line">        if (!$vm) &#123;            </span><br><span class="line">            const ToastPlugin = Vue.extend(ToastComponent); // 创建一个“扩展实例构造器”</span><br><span class="line">            </span><br><span class="line">            // 创建 $vm 实例</span><br><span class="line">            $vm = new ToastPlugin(&#123;                </span><br><span class="line">                el: document.createElement(&apos;div&apos;)  // 声明挂载元素          </span><br><span class="line">            &#125;);            </span><br><span class="line">            </span><br><span class="line">            document.body.appendChild($vm.$el); // 把 toast 组件的 DOM 添加到 body 里</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        // 给 toast 设置自定义文案和时间</span><br><span class="line">        let toast = (text, duration) =&gt; &#123;</span><br><span class="line">            $vm.text = text;</span><br><span class="line">            $vm.duration = duration;</span><br><span class="line">            </span><br><span class="line">            // 在指定 duration 之后让 toast 消失</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                $vm.isShow = false;  </span><br><span class="line">            &#125;, $vm.duration);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 判断 Vue.$toast 是否存在</span><br><span class="line">        if (!Vue.$toast) &#123;            </span><br><span class="line">            Vue.$toast = toast;        </span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">        Vue.prototype.$toast = Vue.$toast; // 全局添加 $toast 事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 入口文件注册</span><br><span class="line">import Toast from &apos;@/widgets/toast/toast.js&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Toast); // 注册 Toast</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">this.$toast(&apos;Hello World&apos;, 2000);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开发工具</p><ul><li>vueDevtool</li><li>vuePerformanceDevtool</li><li>pageSpeedInsights</li><li>JSONViewer</li><li>webpack-bundle-analyser</li><li>safari调试ios页面</li><li>chrome://inspect调试安卓页面</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cli&quot;&gt;&lt;a href=&quot;#cli&quot; class=&quot;headerlink&quot; title=&quot;cli&quot;&gt;&lt;/a&gt;cli&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;features&lt;ul&gt;
&lt;li&gt;babel&lt;/li&gt;
&lt;li&gt;ts&lt;/li&gt;
&lt;li&gt;pwa&lt;/li&gt;
&lt;li&gt;rou
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ldap</title>
    <link href="https://prief.github.io/ldap/"/>
    <id>https://prief.github.io/ldap/</id>
    <published>2020-02-12T04:12:40.000Z</published>
    <updated>2020-02-13T03:31:41.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><ul><li>lightweight directory access protocol</li><li>运行在TCP/IP上的目录访问协议，本质上是一个为只读访问而优化的非关系数据库</li><li>ldap中的信息按照目录信息数组织结构</li><li>树中的一个节点称之为条目Entry，包含了节点的属性和属性值</li><li>ldap服务的实现<ul><li>windows的AD</li><li>openldap</li></ul></li></ul><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>Entry/Object 条目或对象，ldap中的每个单元都认为是条目</li><li>DN 条目名称</li><li>OU 组织名称</li><li>DC 域组件，一般多个，如dc=baidu,dc=com</li><li>CN 通用名称，如人名或对象名</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 安装OpenLDAP</span><br><span class="line">mkdir -p ~/openldap/&#123;config,database&#125;</span><br><span class="line">docker pull osixia/openldap:1.2.2</span><br><span class="line">docker run -d --name ldap-service --hostname ldap-service -p 389:389 -p 689:689 -v ~/openldap/database:/var/lib/ldap -v ~/openldap/config:/etc/ldap/slapd.d --env LDAP_ORGANISATION=&quot;test.com&quot; --env LDAP_DOMAIN=&quot;test.com&quot; --env LDAP_ADMIN_PASSWORD=&quot;password&quot; --env LDAP_TLS=false --detach osixia/openldap:1.2.2</span><br><span class="line"></span><br><span class="line"># 图形管理工具</span><br><span class="line">docker pull osixia/phpldapadmin:0.7.2</span><br><span class="line">docker run --name phpldapadmin-service -p 6443:443 -p 6680:80 --hostname phpldapadmin-service --link ldap-service:test.com --env PHPLDAPADMIN_LDAP_HOSTS=test.com --env PHPLDAPADMIN_HTTPS=false --detach osixia/phpldapadmin:0.7.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 访问 http://localhost:6680</span><br><span class="line"># 账号 cn=admin,dc=test,dc=com</span><br><span class="line"># 密码 password</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>增加用户组</li><li>增加用户</li><li>更新用户属性</li><li>对接gitlab/jira系统</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ldap&quot;&gt;&lt;a href=&quot;#ldap&quot; class=&quot;headerlink&quot; title=&quot;ldap&quot;&gt;&lt;/a&gt;ldap&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;lightweight directory access protocol&lt;/li&gt;
&lt;li&gt;运行在TCP/IP
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>refe</title>
    <link href="https://prief.github.io/refe/"/>
    <id>https://prief.github.io/refe/</id>
    <published>2019-12-08T01:52:17.000Z</published>
    <updated>2020-05-24T14:37:54.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重学"><a href="#重学" class="headerlink" title="重学"></a>重学</h3><h4 id="课程目录"><a href="#课程目录" class="headerlink" title="课程目录"></a>课程目录</h4><ul><li>重学<ul><li>学习方法</li><li>构建知识体系</li><li>工程体系</li></ul></li><li>重学js<ul><li>编程语言通识与js语言设计</li><li>词法/类型</li><li>表达式/类型转换</li><li>语句</li></ul></li><li>重学浏览器工作原理<ul><li>http协议/语法词法分析</li><li>css计算/排版/渲染/合成</li></ul></li><li>重学css<ul><li>css基本语法</li><li>排版与排版相关属性/绘制与绘制相关属性</li><li>css动画</li></ul></li><li>重学html<ul><li>html语言与扩展</li><li>html语义</li></ul></li><li>重学浏览器api<ul><li>DOMAPI/事件机制</li><li>其他API/总结</li></ul></li><li>编程与算法训练<ul><li>TicTacToe/井字棋</li><li>寻路问题</li><li>点击区域与括号匹配wildcard</li><li>promise与异步编程</li><li>正则表达式与文本处理</li><li>proxy与双向绑定</li><li>使用Range实现DOM操作</li><li>使用CSSOM实现视觉交互</li><li>解析一个四则运算的表达式</li></ul></li><li>组件化<ul><li>组件的基本知识/轮播组件</li><li>手势与动画</li><li>为组件添加JSX</li><li>轮播组件的改造(生命周期/状态/属性/事件)</li><li>Tab组件和List组件</li><li>vue风格的SFC</li></ul></li><li>工具链<ul><li>整体理解工具链的设计</li><li>目录结构和初始化工具</li><li>设计并实现一个构建工具与调试工具</li><li>设计并实现一个单元测试工具</li></ul></li><li>发布系统<ul><li>实现一个线上web服务</li><li>实现一个发布系统</li><li>gitHook与lint</li><li>使用无头浏览器与DOM检查</li></ul></li></ul><h4 id="前端技能模型"><a href="#前端技能模型" class="headerlink" title="前端技能模型"></a>前端技能模型</h4><ul><li>基础能力(刻意练习)<ul><li>编程能力，解决业务难的问题</li><li>架构能力，解决业务大的问题</li><li>工程能力，解决人协作的问题</li></ul></li><li>前端知识(建立知识体系)<ul><li>html</li><li>css</li><li>js</li></ul></li><li>领域知识(实践中学习)</li></ul><h4 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h4><ul><li>整理法<ul><li>关系<ul><li>顺序关系<ul><li>编译1 词法分析</li><li>编译2 语法分析</li><li>编译3 代码优化</li><li>编译4 代码生成</li></ul></li><li>组合关系(css rule)<ul><li>选择器</li><li>属性</li><li>值</li></ul></li><li>维度关系<ul><li>文法</li><li>语义</li><li>运行时</li></ul></li><li>分类关系</li></ul></li><li>完备性</li></ul></li><li>追溯法<ul><li>源头(论文/杂志)</li><li>标准和文档<ul><li><a href="https://www.w3.org/" target="_blank" rel="noopener">https://www.w3.org/</a></li><li><a href="https://whatwg.org/" target="_blank" rel="noopener">https://whatwg.org/</a></li><li><a href="https://developer.mozilla.org/" target="_blank" rel="noopener">https://developer.mozilla.org/</a></li><li><a href="https://developer.apple.com/" target="_blank" rel="noopener">https://developer.apple.com/</a></li><li><a href="https://docs.microsoft.com/" target="_blank" rel="noopener">https://docs.microsoft.com/</a></li><li><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="noopener">http://www.ecma-international.org/publications/standards/Ecma-262.htm</a></li></ul></li><li>大师</li></ul></li></ul><h4 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h4><ul><li>面试题<ul><li>广度</li><li>深度</li><li>区分度</li></ul></li><li>面试过程<ul><li>打断，打断是一种提示</li><li>争论，争论的技巧/也可能是压力面试</li><li>难题，缩小规模/展现分析过程</li></ul></li><li>题目类型<ul><li>项目性</li><li>知识性</li><li>开放性</li><li>案例性</li><li>有趣的</li></ul></li><li>知识体系比知识点更重要</li></ul><h3 id="构建知识体系-前端技术"><a href="#构建知识体系-前端技术" class="headerlink" title="构建知识体系(前端技术)"></a>构建知识体系(前端技术)</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><ul><li>HTML as 通用的计算机编程语言<ul><li>词法</li><li>语法</li></ul></li><li>HTML as SGML(Standard Generalized Markup Language 标准通用标记语言)<ul><li>DTD <ul><li>Document Type Definition 文档类型定义 </li><li><a href="https://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd" target="_blank" rel="noopener">https://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a></li></ul></li><li>ENTITY <ul><li>实体(html下就是&amp;符号后面的字符)</li><li>两种形式<ul><li>&entity_name;  // Character mnemonic entities<ul><li>HTMLlat1.ent(<a href="https://www.w3.org/TR/html4/HTMLlat1.ent" target="_blank" rel="noopener">https://www.w3.org/TR/html4/HTMLlat1.ent</a>)</li><li>HTMLsymbol.ent(<a href="https://www.w3.org/TR/html4/HTMLsymbol.ent" target="_blank" rel="noopener">https://www.w3.org/TR/html4/HTMLsymbol.ent</a>)</li><li>HTMLspecial.ent(<a href="https://www.w3.org/TR/html4/HTMLspecial.ent" target="_blank" rel="noopener">https://www.w3.org/TR/html4/HTMLspecial.ent</a>)</li></ul></li><li>&#entity_number; </li></ul></li></ul></li></ul></li><li>HTML as XML<ul><li>namespace<ul><li>svg</li><li>mathml</li><li>aria (Accessible Rich Internet Application) 通过role属性实现</li></ul></li><li>tag<ul><li>a</li><li>abbr</li><li>address</li><li>area</li><li>article</li><li>aside</li><li>audio</li><li>b</li><li>base</li><li>bdi</li><li>bdo</li><li>blockquote</li><li>body</li><li>br</li><li>button</li><li>canvas</li><li>caption</li><li>cite</li><li>code</li><li>col</li><li>colgroup</li><li>data</li><li>datalist</li><li>dd</li><li>del</li><li>details</li><li>dfn</li><li>dialog</li><li>div</li><li>dl</li><li>dt</li><li>em</li><li>embed</li><li>fieldset</li><li>figcaption</li><li>figure</li><li>footer</li><li>form</li><li>h1</li><li>h2</li><li>h3</li><li>h4</li><li>h5</li><li>h6</li><li>head</li><li>header</li><li>hgroup</li><li>hr</li><li>html</li><li>i</li><li>iframe</li><li>img</li><li>input</li><li>ins</li><li>kbd</li><li>label</li><li>legend</li><li>li</li><li>link</li><li>main</li><li>map</li><li>mark</li><li>menu</li><li>meta</li><li>meter</li><li>nav</li><li>noscript</li><li>object</li><li>ol</li><li>optgroup</li><li>option</li><li>output</li><li>p</li><li>param</li><li>picture</li><li>pre</li><li>progress</li><li>q</li><li>rp</li><li>rt</li><li>ruby</li><li>s</li><li>samp</li><li>script</li><li>section</li><li>select</li><li>slot</li><li>small</li><li>source</li><li>span</li><li>strong</li><li>style</li><li>sub</li><li>summary</li><li>sup</li><li>table</li><li>tbody</li><li>td</li><li>template</li><li>textarea</li><li>tfoot</li><li>th</li><li>thead</li><li>time</li><li>title</li><li>tr</li><li>track</li><li>u</li><li>ul</li><li>var</li><li>video</li><li>wbr</li></ul></li></ul></li></ul><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><ul><li>Grammar 语法<ul><li>Lex <ul><li>WhiteSpace<ul><li>空格</li><li>零宽空格\uFEFF ‘var\uFEFFa=1’</li></ul></li><li>LineTerminator</li><li>Comment</li><li>Token<ul><li>Identifier</li><li>Keywords</li><li>Punctuator 标点符号</li><li>NumericLiteral </li><li>StringLiteral</li><li>RegularExpressionLiteral</li><li>Template</li></ul></li></ul></li><li>Syntax<ul><li>Atom</li><li>Expressions</li><li>Structure</li><li>Scripte&amp;Module</li></ul></li></ul></li><li>Semantics 语义</li><li>Runtime 运行时<ul><li>Type<ul><li>Null</li><li>Undefined</li><li>String</li><li>Number</li><li>Boolean</li><li>Object</li><li>Symbol</li><li>内部类型<ul><li>Reference</li><li>CompletionRecord</li></ul></li></ul></li><li>执行过程<ul><li>Job</li><li>Script&amp;Module</li><li>Promise</li><li>Function</li><li>Statement</li><li>Expression</li><li>Literal</li><li>Identifier</li></ul></li></ul></li></ul><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ul><li>语法/词法</li><li>@规则</li><li>普通规则<ul><li>选择器<ul><li>简单选择器<ul><li>*</li><li>tagname</li><li>#id</li><li>.cls</li><li>[attr]</li></ul></li><li>复合选择器<ul><li>简单选择器的各种组合</li></ul></li><li>复杂选择器<ul><li>空格</li><li>&gt;</li><li>+</li><li>~</li></ul></li><li>选择器列表<ul><li>, </li></ul></li></ul></li><li>Property</li><li>Value</li></ul></li><li>机制<ul><li>排版</li><li>伪元素</li><li>动画</li><li>优先级</li></ul></li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li>browser<ul><li>BOM（进化为WebPlatformAPI）</li><li>DOM<ul><li>Nodes<ul><li>Document</li><li>DocumentType</li><li>DocumentFragment</li><li>Element</li><li>Text</li><li>Comment</li><li>ProcessingInstruction &lt;?</li></ul></li><li>Ranges</li><li>Events</li></ul></li></ul></li><li>node</li><li>小程序</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>参考链接<ul><li><a href="https://www.ecma-international.org/" target="_blank" rel="noopener">https://www.ecma-international.org/</a></li><li><a href="https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf" target="_blank" rel="noopener">https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf</a></li><li><a href="https://www.caniuse.com/" target="_blank" rel="noopener">https://www.caniuse.com/</a></li></ul></li><li>规范制定过程<ul><li>WD WorkingDraft工作草案</li><li>CR CandidateRecommendation候选推荐标准</li><li>PR ProposedRecommendation建议推荐标准</li><li>REC Recommendation推荐标准</li><li>Retire 退休</li></ul></li><li>前端兼容性<ul><li>主要是测试</li><li>实践中测试TOP30</li></ul></li></ul><h3 id="工程体系"><a href="#工程体系" class="headerlink" title="工程体系"></a>工程体系</h3><h4 id="优秀工程师"><a href="#优秀工程师" class="headerlink" title="优秀工程师"></a>优秀工程师</h4><ul><li>领域知识</li><li>能力/潜力<ul><li>编程能力</li><li>架构能力</li><li>工程能力</li></ul></li><li>职业规划</li><li>成就</li></ul><h4 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h4><ul><li>成长</li><li>成就<ul><li>业务型成就<ul><li>业务目标/指标</li><li>技术方案/指标</li><li>实施方案/进度</li><li>结果评估/总结</li></ul></li><li>技术型成就<ul><li>目标：技术难题</li><li>方案与实施：依靠编程/架构能力形成解决方案</li><li>结果：难题解决</li><li>案例：浏览器插件识别图片内容</li></ul></li><li>工程型成就<ul><li>目标：质量和效率</li><li>方案与实施：规章制度/工具/库/系统</li><li>结果：线上监控</li><li>案例：XSS攻击的预防</li></ul></li></ul></li><li>晋升</li></ul><h4 id="数据驱动的思考方式"><a href="#数据驱动的思考方式" class="headerlink" title="数据驱动的思考方式"></a>数据驱动的思考方式</h4><ul><li>目标<ul><li>分析业务目标</li><li>制定数据指标</li></ul></li><li>现状<ul><li>采集数据(performance/window.onerror(scr过来的script需要加[crossorigin=&#39;anonymouse&#39;]))</li><li>建立数据展示系统(echart/antV)</li></ul></li><li>方案<ul><li>设计技术方案</li><li>预估数据/效果</li></ul></li><li>实施<ul><li>小规模实验</li><li>形成制度推广落地</li></ul></li><li>结果<ul><li>统计最终结果</li><li>总结汇报</li></ul></li></ul><h4 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h4><ul><li>作用</li><li>分类<ul><li>脚手架 init/add</li><li>本地调试 run/build</li><li>单元测试 test</li><li>发布 publish</li></ul></li><li>体系设计<ul><li>版本问题</li><li>数据统计</li></ul></li></ul><h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><ul><li>客户端软件CI<ul><li>DailyBuild</li><li>BuildVerificationTest</li></ul></li><li>前端CI<ul><li>Check-in Build</li><li>Lint + RuleCheck</li></ul></li></ul><h4 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h4><ul><li>服务端架构解决大量用户访问带来的复杂性</li><li>客户端架构解决软件需求规模带来的复杂性<ul><li>复用，解决重复劳动的问题<ul><li>库(URL/AJAX/ENV)可复用的代码，代码层面</li><li>组件(Tab/轮播)UI上多次出现的元素，UI层面</li><li>模块(登录)经常被业务使用的区块，业务层面</li></ul></li></ul></li></ul><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><ul><li>UV（unique visitor 独立访客,一般以cookie为标示）</li><li>PV（page view）</li><li>ctr（click-through rate）</li><li>判断用户活跃度算法:日活/月活</li><li>前端推荐项目<ul><li>mocha</li><li>spritejs 跨平台的高性能图形系统</li><li>eslint</li><li>phantomjs</li></ul></li><li>前端图片处理<ul><li>前端引起性能问题的主要就是图片(可通过devtool的memory分析)，可以客户端承接图片的处理</li><li>压缩50%+锐化</li><li>根据设备(1x/2x/3x)和网络(3G/4G/WIFI)做不同策略</li></ul></li><li>URI标准组织<a href="https://tools.ietf.org/html/rfc3986" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc3986</a></li><li>AJAX库<ul><li>裸体库不安全</li><li>防重放/窃取/跨域</li><li>带时间戳/hash</li><li>拉起登录</li></ul></li><li>AB测试<ul><li>AB发布(cookie标识)<ul><li>服务端AB分桶</li><li>前端AB入口</li></ul></li><li>AB埋点</li></ul></li></ul><h3 id="编程语言通识与js语言设计"><a href="#编程语言通识与js语言设计" class="headerlink" title="编程语言通识与js语言设计"></a>编程语言通识与js语言设计</h3><h4 id="编程语言通识"><a href="#编程语言通识" class="headerlink" title="编程语言通识"></a>编程语言通识</h4><ul><li>语言按语法分类<ul><li>非形式语言<ul><li>中文</li><li>英文</li></ul></li><li>形式语言（乔姆斯基谱系）<ul><li>计算机科学中刻画形式文法表达能力的一个分类谱系</li><li>层次<ul><li>0-型文法：无限制文法或短语结构文法</li><li>1-型文法：上下文相关文法</li><li>2-型文法：上下文无关文法</li><li>3-型文法：正则文法 </li></ul></li><li>用途<ul><li>数据描述语言 JSON</li><li>编程语言</li></ul></li><li>表达方式<ul><li>声明式 JSON</li><li>命令式     </li></ul></li></ul></li></ul></li><li>产生式（BNF）<ul><li>用尖括号扩起来的名称表示语法结构名</li><li>语法结构<ul><li>基础结构（也称终结符，引号和中间的字符）</li><li>复合结构（也称非终结符）</li></ul></li><li>可以有括号</li><li>* 表示重复多次</li><li>| 表示或</li><li>+ 表示至少一次</li><li>运算优先级高的先定义，先定义的也可以引用后续定义的语法结构</li></ul></li><li>产生式理解乔姆斯基谱系（?表示任意）<ul><li>0-型文法：无限制文法或短语结构文法 ?::=?</li><li>1-型文法：上下文相关文法 ?&lt;A&gt;?::=?&lt;B&gt;?</li><li>2-型文法：上下文无关文法 &lt;A&gt;::=?</li><li>3-型文法：正则文法 &lt;A&gt;::=&lt;A&gt;? (左结合,js中**为右结合即从右到左算)</li></ul></li><li>图灵完备性（世界上一切不都可被计算）<ul><li>命令式-图灵机<ul><li>goto</li><li>if/while</li></ul></li><li>声明式-lambda<ul><li>递归</li></ul></li></ul></li><li>类型系统<ul><li>动态类型系统与静态类型系统</li><li>强类型与弱类型</li><li>复合类型<ul><li>结构体</li><li>函数签名(入参和返回值必须匹配(T1,T2)=&gt;T3)</li></ul></li><li>子类型<ul><li>逆变</li><li>协变</li></ul></li></ul></li><li>一般的命令式编程语言分5层<ul><li>atom<ul><li>identifier</li><li>literal</li></ul></li><li>expression<ul><li>atom</li><li>operator</li><li>punctuator</li></ul></li><li>statement<ul><li>expression</li><li>keyword</li><li>punctuator</li></ul></li><li>structure<ul><li>function</li><li>class</li><li>process</li><li>namespace</li></ul></li><li>program<ul><li>program</li><li>module</li><li>package</li><li>library </li></ul></li></ul></li></ul><h4 id="参考名词"><a href="#参考名词" class="headerlink" title="参考名词"></a>参考名词</h4><ul><li>巴科斯诺尔范式<ul><li>巴科斯诺尔范式Backus-Naur Form(BNF)，由两位首先引入描述计算机语法的符号集</li><li>表示上下文无关文法的语言</li></ul></li><li>图灵<ul><li>图灵机<ul><li>TuringMachine</li><li>将人的计算行为抽象掉的数学逻辑机</li><li>可以等价于任何有限逻辑数学过程的终极强大逻辑机器</li></ul></li><li>图灵完备性<ul><li>如果一系列的操作数据的规则可以用来模拟单带图灵机则是图灵完全的</li><li>简单来说能完全模拟图灵机的就是完备的</li><li>大部分编程语言都是图灵完备</li><li>某些语言为了解决特定问题就不是图灵完备(sql/正则)</li><li>通常支持如下功能即为图灵完备<ul><li>分支/循环/跳转/递归</li><li>数组状数据结构</li></ul></li></ul></li></ul></li><li>名词<ul><li>终结符：最终在代码中出现的字符</li><li>产生式：计算机中编译器将源程序经过词法分析LexicalAnalysis和语法分析SyntaxAnalysis后得到的一系列符合文法规则(BNF)的语句</li><li>动静态<ul><li>动态语言是运行时确定数据类型 runtime</li><li>静态语言是编译时确定数据类型 compiletime</li></ul></li><li>强弱类型<ul><li>强类型语言是一个变量被指定了某个数据类型则不会隐式转化，如果不强制转换则类型不变，是类型安全的语言</li><li>弱类型语言是可以隐式转换，但执行效率和严谨性差</li></ul></li><li>协变与逆变<ul><li>允许一个函数类型中，返回值类型是协变的，参数类型是逆变的</li><li>返回值类型是协变的意思是A&lt;=B 就意味着(T-&gt;A) &lt;= (T-&gt;B)</li><li>参数类型是逆变的意思是A&lt;=B 就意味着(B-&gt;T) &lt;= (A-&gt;T)</li></ul></li><li>自举<ul><li>自己的编译器可以自行编译自己的编译器</li><li>第一个编译器肯定是用别的语言写的如Python,后面的版本才能谈及自举，如python的解释器pypy就是自举</li><li>自举越早对编程语言自身发展越有利，最好自身定型前完成自举</li></ul></li></ul></li></ul><h3 id="js词法与类型"><a href="#js词法与类型" class="headerlink" title="js词法与类型"></a>js词法与类型</h3><h4 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h4><ul><li>unicode<ul><li><a href="https://www.fileformat.info/info/unicode/" target="_blank" rel="noopener">https://www.fileformat.info/info/unicode/</a></li><li><a href="https://home.unicode.org/" target="_blank" rel="noopener">https://home.unicode.org/</a></li></ul></li><li>浮点数计算误差<ul><li><a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener">https://github.com/camsong/blog/issues/9</a></li><li>js的浮点数和整数都只有一个类型Number，都会转成二进制存储</li><li>遵循IEEE754标准，使用64位固定长度来表示即标准的double双精度浮点数（相关的是float32单精度）</li><li>好处是可以归一化处理整数和小数，节省存储空间</li><li>64bit分为三部分<ul><li>符号位S：第一位是符号位sign，0表示正数，1表示负数</li><li>指数位E：中间的11位存储指数exponent，用来表示次方数</li><li>尾数位M：最后的52位存储尾数mantissa，超出的部分自动进一舍零</li></ul></li><li>科学技术法<ul><li>其中指数部分可以为负</li><li>所以11位即0-2047为表示负数取中间数1023，前面的-1023即为负数，后面的-1023即为正数</li><li>科学计数法整数部分只能是1所以可以省去，只保留后面的小数部分，在公式中再加上1</li><li>所以最终的公式 v=(-1) ** S * 2 ** (E-1023) * (M+1)</li></ul></li><li>大数危机<ul><li>产生的大数运算也会有大数危机所以会有Infinity</li><li>确有需求可以当作字符串来处理，重新实现计算逻辑，但效率会低（已经实现的库bignumber.js）</li><li>所以js标准出现了BigInt类型，希望彻底解决大数危机问题</li></ul></li><li>两个函数（计算过程中不要使用，只在最后把结果展示为字符串时使用）<ul><li>toPrecision 处理精度，从左到右第一个不为0的数开始</li><li>toFixed 小数点后指定位数取整，从小数点开始</li></ul></li><li>解决方案<ul><li>数据展示类可用 +parseFloat(num.toPrecision(precision=12))</li><li>数据运算类要转成整数后进行计算</li><li><a href="https://github.com/dt-fe/number-precision" target="_blank" rel="noopener">https://github.com/dt-fe/number-precision</a></li></ul></li></ul></li><li>正则<ul><li>? 出现在量词*?+{}后面表示非贪婪匹配</li><li>(?:x) ?:表示不捕获</li><li>x(?=y) 先行断言，即x后面有y才匹配x</li><li>(?&lt;=y)x 后行断言，即x前面有y才匹配x</li><li>x(?!y) 正向否定查找，即x后面不是y才匹配x</li><li>(?&lt;!y)x 反向否定查找，即x前面不是y才匹配x</li><li>正则中的\1反向引用产生回溯，会造成原本是m+n的时间复杂度变更很高的复杂度</li></ul></li></ul><h4 id="词法与类型"><a href="#词法与类型" class="headerlink" title="词法与类型"></a>词法与类型</h4><ul><li><p>词法</p><ul><li>js中可以写任意unicode码点（code point 正整数），但最佳实践推荐ASCII内</li><li>常用码点方法<ul><li>CJK(chinese japanese korean) U+4E00-U+9FFF(常用的中文字，但也不全)</li><li>String.fromCodePoint(码点的十进制数字)</li><li>‘字符’.codePointAt()返回码点的十进制数字</li><li>‘字符’.codePointAt().toString(16)返回16进制数字，可用U+FFFF或\uFFFF表示</li></ul></li></ul></li><li><p>InputElement</p><ul><li>WhiteSpace<ul><li>&lt;TAB&gt; tabulation</li><li>&lt;VT&gt; virtical tabulation</li><li>&lt;FF&gt; form feed</li><li>&lt;SP&gt; space</li><li>&lt;NBSP&gt; no break space</li><li>&lt;ZWNBSP&gt; zero width no break space</li><li>&lt;USP&gt; unicode space</li></ul></li><li>LineTerminator<ul><li>&lt;LF&gt; line feed U+000A</li><li>&lt;CR&gt; carriage return U+000D</li></ul></li><li>Comment<ul><li>//</li><li>/**/</li></ul></li><li>Token<ul><li>Punctuator 标点符号</li><li>IdentifierName<ul><li>Keywords</li><li>Identifier</li><li>FutureReservedKeywords</li></ul></li><li>Literal<ul><li>Number</li><li>String</li><li>Boolean</li><li>Object</li><li>Null</li><li>Undefined</li><li>Symbol</li></ul></li><li>Template</li></ul></li></ul></li><li><p>Number</p><ul><li>float64<ul><li>IEEE754标准中规定可使用double float双精度浮点数float64</li><li>float64<ul><li>1位的sign</li><li>11位的exponent</li><li>52位的fraction</li></ul></li><li>由于小数点是个合法的数字标示，所以97.toString(2)中会把97.当作数字从而报错，需要97 .toString()或(97).toString()</li></ul></li><li>DecimalLiteral <ul><li>0</li><li>0.</li><li>.2</li><li>1e3</li></ul></li><li>BinaryLiteral<ul><li>0b10</li></ul></li><li>OctalLiteral<ul><li>0o10</li></ul></li><li>HexLiteral<ul><li>0x10</li></ul></li></ul></li><li><p>String</p><ul><li><p>encoding</p><ul><li><p>ASCII American Standard Code for Information Interchange美国信息交换标准代码，基于拉丁字母</p></li><li><p>Unicode</p><ul><li>UCS Transformation Format</li><li>字符集把字符编码指定为集合中的某个对象以便存储和网络传输</li><li>万国码，对世界上大部分文字系统做了编码，可容纳100多万个符号</li><li>规范定义每一个文件的最前面分别加入一个表示编码顺序的字符(FEFF|FFFE)来作为BOM(Byte Order Mark)从而区分字节序<ul><li>头两个字节是FEFF就表示采用大头方式 big endian(BE)</li><li>头两个字节是FFFE就表示采用小头方式 little endian(LE)</li><li>前面3个字节是EF BB BF表示采用UTF-8 with BOM 编码</li></ul></li><li>只是一个符号集，规定了符号的二进制代码即码点code point（正整数），却没有规定二进制代码如何存储<ul><li>UTF-8 字符用1-4个字节表示<img src="/refe/utf8.png" title="utf8转换"></li><li>UTF-16 字符用2个字节或4个字节表示</li><li>UTF-32 字符用4个字节表示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">var bits = &apos;美&apos;.codePointAt().toString(2); // &quot;111111110001110&quot;</span><br><span class="line"></span><br><span class="line">bits.padding(); // &quot;0111111110001110&quot;</span><br><span class="line"></span><br><span class="line">utf8 = [0b11100111,0b10111110,0b10001110].map(e=&gt;e.toString(16)) // [&quot;e7&quot;, &quot;be&quot;, &quot;8e&quot;]</span><br><span class="line"></span><br><span class="line">// 字符串转成blob</span><br><span class="line">const json = &#123; hello: &quot;world&quot; &#125;;</span><br><span class="line">const blob = new Blob([JSON.stringify(json, null, 2)], &#123; type: &apos;application/json&apos; &#125;); </span><br><span class="line"></span><br><span class="line">// base64编码转成blob</span><br><span class="line">const base64 = &apos;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAABlBMVEUAAP+AgIBMbL/VAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAACklEQVQImWNgAAAAAgAB9HFkpgAAAABJRU5ErkJggg==&apos;;</span><br><span class="line">const byteCharacters = atob(base64);</span><br><span class="line">const byteNumbers = new Array(byteCharacters.length);</span><br><span class="line">for (let i = 0; i &lt; byteCharacters.length; i++) &#123;</span><br><span class="line">  byteNumbers[i] = byteCharacters.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line">const array = Uint8Array.from(byteNumbers);</span><br><span class="line">const blob = new Blob([array], &#123;type: &apos;image/png&apos;&#125;);  </span><br><span class="line"></span><br><span class="line">// blob下载</span><br><span class="line">function download(blob,name)&#123;</span><br><span class="line">    const a = document.createElement(&quot;a&quot;);</span><br><span class="line">    const url = URL.createObjectURL(blob)</span><br><span class="line">    a.href = url;</span><br><span class="line">    a.download = name;</span><br><span class="line">    a.style.display = &quot;none&quot;;</span><br><span class="line">    a.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ArrayBuffer转成文件上传</span><br><span class="line">// 在浏览器中，每个字节以十进制的方式存在</span><br><span class="line">const bufferArrary = [137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,1,0,0,0,1,1,3,0,0,0,37,219,86,202,0,0,0,6,80,76,84,69,0,0,255,128,128,128,76,108,191,213,0,0,0,9,112,72,89,115,0,0,14,196,0,0,14,196,1,149,43,14,27,0,0,0,10,73,68,65,84,8,153,99,96,0,0,0,2,0,1,244,113,100,166,0,0,0,0,73,69,78,68,174,66,96,130];</span><br><span class="line">const array = Uint8Array.from(bufferArrary);</span><br><span class="line">const blob = new Blob([array], &#123;type: &apos;image/png&apos;&#125;);</span><br><span class="line"></span><br><span class="line">// 服务端node</span><br><span class="line">var b = &apos;e7 be 8e&apos;; // buffer字符串</span><br><span class="line">Buffer.from(b.split(&apos; &apos;).map(x=&gt;&apos;0x&apos;+x)).toString() // 美</span><br><span class="line"></span><br><span class="line">// base64 to buffer</span><br><span class="line">const b64string = /* whatever */;</span><br><span class="line">const buf = Buffer.from(b64string, &apos;base64&apos;);</span><br><span class="line"></span><br><span class="line">// stream to buffer</span><br><span class="line">function streamToBuffer(stream) &#123;  </span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    const buffers = [];</span><br><span class="line">    stream.on(&apos;error&apos;, reject);</span><br><span class="line">    stream.on(&apos;data&apos;, (data) =&gt; buffers.push(data))</span><br><span class="line">    stream.on(&apos;end&apos;, () =&gt; resolve(Buffer.concat(buffers))</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>UCS </p><ul><li>Unicode Character Set</li><li>UCS-2 2个字节进行编码<ul><li>在UCS-2的2个字节前面加上2个零字节就得到了UCS-4的BMP</li></ul></li><li>UCS-4 4个字节进行编码 <ul><li>实际上只用了31位，最高位必须为0</li><li>根据最高位为0的最高字节分成2^7=128个group</li><li>每个group根据次高字节分成2^8=256个plane</li><li>每个plane根据三高字节分成2^8=256个row</li><li>每个row包含2^8=256个cell</li><li>group0的plane0被称作BMP(Basic Multilingual Plane)即UCS-4中高2个字节为0 </li></ul></li></ul></li><li><p>GB</p><ul><li>GB2312</li><li>GBK</li><li>GB18030</li></ul></li><li><p>ISO-8859</p></li><li><p>BIG5</p></li></ul></li><li><p>其他</p><ul><li>转义<ul><li>\xFF 后面跟2个16进制数字表示一个字符</li><li>\uFFFF 后面跟4个16进制数字表示一个字符</li></ul></li><li>字符串模版</li><li>空格<ul><li>NBSP no-break space禁止html中两个字之间的断行,unicode为U+00A0</li><li>ZWSP zero width no-break space不可打印的字符,unicode为U+FEFF，主要用作上面的BOM</li></ul></li><li>notepad.exe编码方式<ul><li>ANSI是windows默认的编码方式，针对英文用ASCII，简体中文用GB2312，繁体中文用BIG5</li><li>Unicode是使用UCS-2(Universal Character Set-2即用2个字节编码)编码，即直接用两个字节存入字符的unicode码值，采用little endian，前两个字节为FFFE</li><li>Unicode big endian，前两个字节为FEFF</li><li>UTF-8(UCS Transformation Format-8即以8位为单元对UCS进行编码)，前三个字节为EFBBBF，表示UTF-8 with BOM</li></ul></li></ul></li></ul></li><li><p>正则表达式</p><ul><li>由于/也是除法的符号，所以/a/g正则字面量前面有标示符时可能会出错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a,g;</span><br><span class="line">a</span><br><span class="line">/a/g  // 可能解释为1/g</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="js表达式与类型转换"><a href="#js表达式与类型转换" class="headerlink" title="js表达式与类型转换"></a>js表达式与类型转换</h3><h4 id="js数字精度问题"><a href="#js数字精度问题" class="headerlink" title="js数字精度问题"></a>js数字精度问题</h4><ul><li>float内存布局展示<ul><li>IEEE754标准中规定二进制有效数字的开头一定是1，所以第13位有个隐藏的1</li><li>下面的代码中把隐藏的1展示了出来方便理解</li><li>js中0和-0是相等的只是符号位不同，判断zero是正0还是-0可以用 1/zero，如果返回Infinity则是正0，返回-Infinity则是-0;</li><li>由于精度问题，尽量减少对浮点数的运算，运算后要考虑浮点数本身和运算符号带来的精度丢失问题，如1.1+1.3-2.4的问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;span v-for=&quot;v,i of bits&quot;&gt;</span><br><span class="line">      &lt;input :class=&quot;i&gt;0 ? i&gt;11 ? &apos;fraction&apos;:&apos;exponent&apos;:&apos;sign&apos;&quot; v-model=&quot;bits[i]&quot; /&gt;</span><br><span class="line">      &lt;input v-if=&quot;i==11&quot; value=&quot;1&quot; disabled=&quot;disabled&quot;/&gt;</span><br><span class="line">      &lt;br v-if=&quot;i==31&quot; /&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;input style=&quot;width:5em;&quot; v-model=&quot;value&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">      bits: Array(65).join(0).split(&quot;&quot;).map(v =&gt; Number(v)),</span><br><span class="line">      value: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      bits(val)&#123;</span><br><span class="line">        console.log(&quot;bits&quot;,val);</span><br><span class="line">        const bytes = new Uint8Array(8);</span><br><span class="line">        const memory = new Float64Array(bytes.buffer);</span><br><span class="line">        for(var i=0; i&lt;8; i++)&#123;</span><br><span class="line">          var byte=0;</span><br><span class="line">          for(var j=0; j&lt;8; j++)&#123;</span><br><span class="line">            byte = byte &lt;&lt;1;</span><br><span class="line">            byte |= Number(val[i * 8 + j])</span><br><span class="line">            console.log(byte,val[i * 8 + j]);</span><br><span class="line">          &#125;</span><br><span class="line">          console.log(&quot;byte&quot;,byte);</span><br><span class="line">          bytes[7-i] = byte;</span><br><span class="line">        &#125;</span><br><span class="line">        this.value = memory[0];</span><br><span class="line">      &#125;,</span><br><span class="line">      value(val)&#123;</span><br><span class="line">         const bytes = new Uint8Array(8);</span><br><span class="line">         const memory = new Float64Array(bytes.buffer);</span><br><span class="line">         memory[0] = (val);</span><br><span class="line">         console.log(&quot;******&quot;);</span><br><span class="line">         for(var i=0; i&lt;8; i++)&#123;</span><br><span class="line">          var byte= bytes[i];</span><br><span class="line">          console.log(byte);</span><br><span class="line">          for(var j=0; j&lt;8; j++)&#123;</span><br><span class="line">           this.bits[(8-i) * 8 - j - 1] = byte &amp; 1;</span><br><span class="line">           byte= byte&gt;&gt;1;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">input::-webkit-outer-spin-button,</span><br><span class="line">input::-webkit-inner-spin-button&#123;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  padding:0;</span><br><span class="line">  margin:0;</span><br><span class="line">&#125;</span><br><span class="line">input &#123;</span><br><span class="line">  width:1em;</span><br><span class="line">  height:2em;</span><br><span class="line">  text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.sign &#123;</span><br><span class="line">  background-color:lightblue;</span><br><span class="line">&#125;</span><br><span class="line">.exponent &#123;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h4><ul><li>Grammar<ul><li>Grammar Tree vs Priority</li><li>Left-Hand-Side &amp;&amp; Right-Hand-Side (=左右两边)</li></ul></li><li>Expression<ul><li>Member访问<ul><li>a.b 属性访问</li><li>a[b] b可以是变量，类比java的反射</li><li>super.b 构造函数中访问super父类的静态属性</li><li>super[&#39;b&#39;] 同上</li><li>new.target 函数中可以通过此属性判断是否new调用,非new调用返回undefined, new调用返回构造函数</li><li>fun`str${var}` 会把字符串模版中分成几部分(str数组,$var列表)作为参数调用fun函数</li></ul></li><li>New操作符<ul><li>new Foo</li><li>new Foo() 优先级更高，即如果后面跟()则把参数传入new的构造函数里</li><li>new Foo[&#39;b&#39;] 先访问b属性后进行new调用</li><li>new Foo()[&#39;b&#39;] 先进行Foo()的new调用后进行b属性访问</li></ul></li><li>Left-Hand-Side &amp;&amp; Right-Hand-Side (=左右两边)</li><li>Update<ul><li>a++</li><li>a--</li><li>--a</li><li>++a</li></ul></li><li>Unary<ul><li>delete a.b</li><li>void foo(); </li><li>typeof a; null/function</li><li>await a</li><li>+a</li><li>-a</li><li>~a</li><li>!a  !!a转换为同true/false的布尔类型</li></ul></li><li>Exponental<ul><li>**  右结合的运算符，从右往左计算</li></ul></li><li>Multiplicative<ul><li>* </li><li>/</li><li>%</li></ul></li><li>Additive<ul><li>+</li><li>-</li></ul></li><li>Shift<ul><li>&lt;&lt;</li><li>&gt;&gt;</li><li>&gt;&gt;&gt;</li></ul></li><li>Relationship<ul><li>&lt;= </li><li>&gt;=</li><li>instanceof</li><li>in</li></ul></li><li>Equality<ul><li>==</li><li>!=</li><li>===</li><li>!==</li></ul></li><li>Bitwise<ul><li>&amp;</li><li>^</li><li>|</li></ul></li><li>Logical 会有短路逻辑<ul><li>&amp;&amp;</li><li>||</li></ul></li><li>Conditional<ul><li>? : </li></ul></li><li>Comma 返回最后一个表达式的值<ul><li>, </li></ul></li></ul></li><li>Runtime<ul><li>Type Convertion<ul><li>Boxing &amp; Unboxing<ul><li>String() 不作为new调用时是强制类型转换,作为new调用时则返回对象</li><li>Number() 不作为new调用时是强制类型转换,作为new调用时则返回对象</li><li>Boolean() 不作为new调用时是强制类型转换,作为new调用时则返回对象</li><li>Symbol() 不能用new调用，但可以用Object(Symbol(“1”))装箱</li><li>Object() new调用和非new调用都一样，都返回一个Object</li><li>Null和Undefined都不能装箱</li></ul></li><li>toString vs valueOf vs Symbol.toPrimitive<ul><li>类型转换时如果有[Symbol.toPrimitive](){}则完全按照此函数的返回值进行转换</li><li>否则按照默认的toPrimitive顺序执行<ul><li>优先valueOf</li><li>如果拿不到合适的原始值再调toString</li></ul></li></ul></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function convertStringToNumber(string,radix)&#123;</span><br><span class="line">  if(arguments.length &lt; 2)&#123;</span><br><span class="line">    radix = 10;</span><br><span class="line">  &#125;</span><br><span class="line">  var chars = string.split(&apos;&apos;);</span><br><span class="line">  var number = 0;</span><br><span class="line"></span><br><span class="line">  var i = 0;</span><br><span class="line">  while(i &lt; chars.length &amp;&amp; chars[i] != &apos;.&apos;)&#123;</span><br><span class="line">    number *= radix;</span><br><span class="line">    number += chars[i].codePointAt(0) - &apos;0&apos;.codePointAt(0);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  if(chars[i]===&apos;.&apos;)&#123;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  var fraction = 1;</span><br><span class="line">  while(i &lt; chars.length)&#123;</span><br><span class="line">    fraction /= radix</span><br><span class="line">    number += (chars[i].codePointAt(0) - &apos;0&apos;.codePointAt(0)) * fraction;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  return number;</span><br><span class="line">&#125;</span><br><span class="line">convertStringToNumber(&quot;123&quot;)</span><br><span class="line">convertStringToNumber(&quot;100.0123&quot;,10)</span><br><span class="line"></span><br><span class="line">function convertNumberToString(number,radix)&#123;</span><br><span class="line">  var integer = Math.floor(number);</span><br><span class="line">  var fraction = number - integer;</span><br><span class="line">  var string = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">  while(integer &gt; 0 )&#123;</span><br><span class="line">    string = integer % radix + string;</span><br><span class="line">    integer = Math.floor(integer / radix);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return string;</span><br><span class="line">&#125;</span><br><span class="line">convertNumberToString(100,10)</span><br></pre></td></tr></table></figure><h3 id="js语句与对象"><a href="#js语句与对象" class="headerlink" title="js语句与对象"></a>js语句与对象</h3><h4 id="预习-1"><a href="#预习-1" class="headerlink" title="预习"></a>预习</h4><ul><li>ASI<ul><li>Automatic Semicolon Insertion</li><li>按照ECMAScript标准，特定语句必须以分号结尾</li><li>有时候书写方便可以省略分号</li><li>解释器会自己判断语句该在哪里终止，实际上并没有真正的插入分号，只是个形象的说法</li></ul></li><li>var最好写在函数内最前面或第一次出现的地方来作为最佳实践或放弃var</li><li>IIFE<ul><li>void function(){}(); void来表达IIFE成为最佳实践</li><li>推荐在IIFE中使用void，避免IIFE前后没有插入分号导致多个文件合并时产生的()()()的bug</li></ul></li></ul><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><ul><li>简单语句<ul><li>ExpressionStatement  a=1+2;</li><li>EmptyStatement  ;</li><li>DebuggerStatement  debugger;</li><li>ThrowStatement  throw a;</li><li>BreakStatement  break LABEL;</li><li>ContinueStatement  continue LABEL;</li><li>ReturnStatement  return a+b;</li></ul></li><li>复合语句<ul><li>BlockStatement  {}</li><li>IfStatement</li><li>SwitchStatement</li><li>IterationStatement<ul><li>while(){}</li><li>do{}while()</li><li>for(;;){}<ul><li>let/const声明过后的变量不能再被声明</li><li>let i = 0;for(let i=5;i&lt;10;i++){let i=0;console.log(i)}; </li><li>上面的i会产生3层作用域,for语句中的()里的声明部分会对let/const产生一层作用域</li></ul></li><li>for(in){}</li><li>for(of){} 遍历iterator的每个值</li><li>for await(of){} 遍历异步iterator的每个值</li></ul></li><li>WithStatement</li><li>LabelledStatement</li><li>TryStatement<ul><li>try{}catch(){}finally{} try/catch语句即使得到的结果非normal型的完成记录，也要执行finally</li><li>catch(e){}语句块也会对e生成和后面的{}一起的独立的作用域</li><li>try里有return也会执行finally里的语句，并且如果finally也有return，则返回finally里的return</li></ul></li></ul></li><li>声明<ul><li>FunctionDeclaration</li><li>GeneratorDeclaration</li><li>AsyncFunctionDeclaration</li><li>AsyncGeneratorDeclaration</li><li>VariableStatement<ul><li>主要是变量声明语句的hoist</li><li>只提升声明的部分，初始化赋值的部分不提升</li><li>执行过程中的hoist称为BoundNames，会被预处理</li></ul></li><li>ClassDeclaration</li><li>LexicalDeclaration<ul><li>const/let</li><li>声明过后不允许重复声明</li><li>产生块级作用域</li></ul></li></ul></li></ul><h4 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h4><ul><li>CompletionRecord 语句执行完成后的记录，有三个属性<ul><li>[[type]]: normal | throw | break | continue | return </li><li>[[value]]: Types ｜ empty</li><li>[[target]]: label</li></ul></li><li>LexicalEnvironment<ul><li>作用域一般指静态代码中的区域</li><li>上下文一般指运行时内存中的对象</li></ul></li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li>三要素<ul><li>唯一性，每个对象都是唯一的</li><li>状态，用属性描述对象</li><li>行为，用方法改变对象的状态</li></ul></li><li>面向对象<ul><li>三特性<ul><li>封装/复用/解耦/内聚</li><li>继承</li><li>多态</li></ul></li><li>基于类的面向对象<ul><li>归类派，多重继承是其特性，如c++</li><li>分类派，单继承结构，会有一个基类Object，但向上归类时就会产生Interface和Mixin</li></ul></li><li>基于原型对象的面向对象<ul><li>采用相似的方式去描述对象，不做严谨的分类</li><li>任何对象只需要描述自己与原型对象的区别即可</li></ul></li></ul></li><li>js对象<ul><li>一般对象的描述方式非常简单，只需要关注属性和原型即可(原型不是属性，js方法也属于属性)<ul><li>访问属性时如果当前对象没有，则会访问原型对象上的同名属性，直到null，形成原型链</li><li>增加属性时则是增加到自身的属性上，不会影响原型链的上层</li><li>属性机制保证了对象只需要描述自己与原型对象的区别即可</li></ul></li><li>属性kv对<ul><li>key<ul><li>String</li><li>Symbol</li></ul></li><li>value<ul><li>DataProperty<ul><li>[[value]]</li><li>writable</li><li>enumerable</li><li>configurable</li></ul></li><li>AccessorProperty<ul><li>get</li><li>set</li><li>enumerable</li><li>configurable</li></ul></li></ul></li></ul></li><li>ObjectApi<ul><li>基本对象能力api<ul><li>{}</li><li>.</li><li>[]</li><li>Object.defineProperty</li></ul></li><li>原型api（加上基本对象能力api就是基于原型的OOP）<ul><li>Object.create</li><li>Object.setPrototypeOf</li><li>Object.getPrototypeOf</li></ul></li><li>类api（加上基本对象能力api就是基于类的OOP）<ul><li>new </li><li>class</li><li>extends</li></ul></li><li>原型模拟类的api（在未实现class前的模式，现在应该被废弃）<ul><li>new</li><li>function</li><li>prototype</li></ul></li></ul></li><li>Function Object<ul><li>函数对象是一种特殊的对象</li><li>除了一般对象的属性和原型外，函数对象还有一个行为[[call]]</li><li>function关键字/箭头函数/Function构造器创建的对象都有[[call]]行为</li><li>用f()这样的语法把对象当作函数使用时就会访问[[call]]行为</li><li>如果对象上没有[[call]]行为，使用()调用时就会报错</li></ul></li></ul></li></ul><h3 id="js结构化程序设计"><a href="#js结构化程序设计" class="headerlink" title="js结构化程序设计"></a>js结构化程序设计</h3><h4 id="js引擎"><a href="#js引擎" class="headerlink" title="js引擎"></a>js引擎</h4><ul><li>js引擎接收js代码的三种方式<ul><li>普通的script[&#39;src&#39;]或内联代码片段</li><li>script[type=&#39;module&#39;]</li><li>setTimeout/setInterval</li></ul></li><li>宏任务<ul><li>宿主发起的任务称为宏任务</li><li>宏任务的队列相当于是事件循环</li><li>方式<ul><li>script, html中两个script标签中的代码产生2个宏任务，每个宏任务都要等待其中的微任务执行完才会执行下一个</li><li>UI交互</li><li>setTimeout/setInterval</li></ul></li></ul></li><li>微任务<ul><li>js引擎发起的任务称为微任务，浏览器中只有promise和MutationObserver会产生微任务</li><li>一个宏任务中只有一个微任务队列，可以有多个微任务，所有微任务执行完毕后此宏任务才执行完毕</li><li>promise.resolve和promise.reject都会产生微任务，插入当前task的宏任务后面继续执行</li><li>promise.resolve.then的回调函数里尽量不要再有Promise</li><li>如果嵌套里promise,里面promise.resolve.then()执行后外面后续的then也会被触发</li><li>所以可能后面的then执行后又返回里面promise.resolve.then().then()执行</li><li>promise.then的参数如果不是对应resolve/reject的函数,其他语句会同步执行，并且执行中间产生的错误不会立即中断执行，而是等同步任务执行完后回调给promise.catch或报错，所以需要注意then()里的参数是否是函数来决定是否会产生微任务</li><li>await 语句也会产生微任务，和promise一起执行微任务入队操作</li><li>throw new Error()或运行时产生的报错只会影响当前宏任务，不影响已入队的微任务，更不影响异步的宏任务</li><li>promise微任务执行顺序和实现有关，safari和chrome可能不一致</li></ul></li><li>async/await<ul><li>async函数必定返回promise，可以把返回promise的函数都称为异步函数</li><li>await等待一个异步的promise</li></ul></li></ul><h4 id="结构化程序设计"><a href="#结构化程序设计" class="headerlink" title="结构化程序设计"></a>结构化程序设计</h4><ul><li><p>js执行粒度</p><ul><li>JSContext =&gt; Realm</li><li>宏任务</li><li>微任务 Promise</li><li>函数调用 ExecutionContext</li><li>语句/声明</li><li>表达式</li><li>变量/直接量/this</li></ul></li><li><p>函数调用</p><ul><li>ExecutionContext<ul><li>代码执行所需要的的所有信息称为执行上下文</li><li>ES3<ul><li>scope</li><li>variableObject 用于存储变量的对象</li><li>this</li></ul></li><li>ES5<ul><li>LexicalEnvironment 词法环境，获取变量时使用</li><li>VariableEnvironment 变量环境，声明变量时使用</li><li>this</li></ul></li><li>ES2018<ul><li>Generator<ul><li>有Generator的就是GeneratorExecutionContext</li><li>没有Generator就是普通的ECMAExecutionContext,包括下面6种</li></ul></li><li>Realm<ul><li>全局基础库和内置对象的实例</li><li>js中函数表达式和对象直接量都会创建在Realm中</li><li>使用.做隐式转换时也会创建在Realm中</li><li>这些对象也有原型，如果没有Realm，就不知道他们的原型是什么</li><li>前端产生不同的Realm一般只有在不同的iframe中</li></ul></li><li>Script or Module</li><li>CodeEvaluationState 用户恢复代码执行位置</li><li>Function</li><li>LexicalEnvironment<ul><li>this<ul><li>箭头函数的this是和变量一起进入环境</li><li>普通函数是是调用时进入环境</li></ul></li><li>new.target</li><li>super</li><li>变量</li></ul></li><li>VariableEnvironment<ul><li>是个历史包袱</li><li>主要是处理eval/with语句里的var声明的问题</li><li>变量环境，声明变量时使用</li></ul></li></ul></li><li>上下文切换<ul><li>函数体内可以访问定义时词法环境，不能访问运行时另一个模块的词法环境，就是运行时产生了上下文切换</li><li>js用栈管理上下文切换，栈中的每一项包含一个链表</li><li>调用过程产生调用栈ExecutionContextStack</li><li>栈顶的上下文称为RunningExecutionContext</li></ul></li></ul></li><li>闭包<ul><li>绑定了执行环境的函数</li><li>古典闭包定义<ul><li>环境部分<ul><li>环境：函数的词法环境，执行上下文的一部分</li><li>标识符列表：函数中用到的未声明的变量</li></ul></li><li>表达式部分<ul><li>函数体</li></ul></li></ul></li></ul></li><li>this<ul><li>[[thisMode]]私有属性的三个取值<ul><li>lexical 表示从词法环境上下文中找this，对应了箭头函数</li><li>global 表示当this为undefined时取全局对象，对应了普通的函数</li><li>strict 严格模式时this严格按照调用时传入的值，可能为null或undefined，class里的设计就是严格模式</li></ul></li><li>操作this<ul><li>Function.prototype.call(o,args…)</li><li>Function.prototype.apply(o,[args…])</li><li>Function.prototype.bind(o,args…)返回一个绑定了this和参数的函数，后续调用</li></ul></li></ul></li><li>new执行过程<ul><li>以构造器的prototype对象为原型创建一个新对象</li><li>将this和调用参数传入并执行</li><li>如果构造器返回函数则直接返回，否则返回第一步创建的对象</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 不同Realm里对象的不同行为 instanceof 失效</span><br><span class="line">var iframe = document.createElement(&apos;iframe&apos;)</span><br><span class="line">document.documentElement.appendChild(iframe)</span><br><span class="line">iframe.src=&quot;javascript:var b = &#123;&#125;;&quot;</span><br><span class="line"></span><br><span class="line">var b1 = iframe.contentWindow.b;</span><br><span class="line">var b2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(typeof b1, typeof b2); //object object</span><br><span class="line"></span><br><span class="line">console.log(b1 instanceof Object, b2 instanceof Object); //false true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Realm里的全局对象</span><br><span class="line">var globalObjectArray = [</span><br><span class="line">    // Infinity,</span><br><span class="line">    // NaN,</span><br><span class="line">    // undefined,</span><br><span class="line">    &quot;eval&quot;,</span><br><span class="line">    &quot;isFinite&quot;,</span><br><span class="line">    &quot;isNaN&quot;,</span><br><span class="line">    &quot;parseFloat&quot;,</span><br><span class="line">    &quot;parseInt&quot;,</span><br><span class="line">    &quot;decodeURI&quot;,</span><br><span class="line">    &quot;encodeURI&quot;,</span><br><span class="line">    &quot;decodeURIComponent&quot;,</span><br><span class="line">    &quot;encodeURIComponent&quot;,</span><br><span class="line">    &quot;Array&quot;,</span><br><span class="line">    &quot;ArrayBuffer&quot;,</span><br><span class="line">    &quot;Boolean&quot;,</span><br><span class="line">    &quot;DataView&quot;,</span><br><span class="line">    &quot;Date&quot;,</span><br><span class="line">    &quot;Error&quot;,</span><br><span class="line">    &quot;EvalError&quot;,</span><br><span class="line">    &quot;Float32Array&quot;,</span><br><span class="line">    &quot;Float64Array&quot;,</span><br><span class="line">    &quot;Function&quot;,</span><br><span class="line">    &quot;Int8Array&quot;,</span><br><span class="line">    &quot;Int16Array&quot;,</span><br><span class="line">    &quot;Int32Array&quot;,</span><br><span class="line">    &quot;Map&quot;,</span><br><span class="line">    &quot;Number&quot;,</span><br><span class="line">    &quot;Object&quot;,</span><br><span class="line">    &quot;Promise&quot;,</span><br><span class="line">    &quot;Proxy&quot;,</span><br><span class="line">    &quot;RangeError&quot;,</span><br><span class="line">    &quot;ReferenceError&quot;,</span><br><span class="line">    &quot;RegExp&quot;,</span><br><span class="line">    &quot;Set&quot;,</span><br><span class="line">    &quot;SharedArrayBuffer&quot;,</span><br><span class="line">    &quot;String&quot;,</span><br><span class="line">    &quot;Symbol&quot;,</span><br><span class="line">    &quot;SyntaxError&quot;,</span><br><span class="line">    &quot;TypeError&quot;,</span><br><span class="line">    &quot;Uint8Array&quot;,</span><br><span class="line">    &quot;Uint8ClampedArray&quot;,</span><br><span class="line">    &quot;Uint16Array&quot;,</span><br><span class="line">    &quot;Uint32Array&quot;,</span><br><span class="line">    &quot;URIError&quot;,</span><br><span class="line">    &quot;WeakMap&quot;,</span><br><span class="line">    &quot;WeakSet&quot;,</span><br><span class="line">    &quot;Atomics&quot;,</span><br><span class="line">    &quot;JSON&quot;,</span><br><span class="line">    &quot;Math&quot;,</span><br><span class="line">    &quot;Reflect&quot;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">var queue = [];</span><br><span class="line">for(let p of globalObjectArray)&#123;</span><br><span class="line">    queue.push(&#123;</span><br><span class="line">        path:[p],</span><br><span class="line">        object:this[p]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var set = new Set();</span><br><span class="line">var current;</span><br><span class="line"></span><br><span class="line">while(queue.length)&#123;</span><br><span class="line">    current = queue.shift();</span><br><span class="line"></span><br><span class="line">    console.log(current.path.join(&apos;.&apos;))</span><br><span class="line">    if(set.has(current.object))&#123;</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line">    set.add(current.object);</span><br><span class="line">    </span><br><span class="line">    let proto = Object.getPrototypeOf(current.object);</span><br><span class="line">    if(proto)&#123;</span><br><span class="line">        queue.push(&#123;</span><br><span class="line">            path:current.path.concat([&quot;__proto__&quot;]),</span><br><span class="line">            object:proto</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let p of Object.getOwnPropertyNames(current.object))&#123;</span><br><span class="line"></span><br><span class="line">        var property = Object.getOwnPropertyDescriptor(current.object,p);</span><br><span class="line">        if(property.hasOwnProperty(&quot;value&quot;) &amp;&amp; </span><br><span class="line">            ((property.value != null) &amp;&amp; (typeof property.value == &quot;object&quot;) || (typeof property.value ==&quot;function&quot;)) &amp;&amp; </span><br><span class="line">            property.value instanceof Object)&#123;</span><br><span class="line">            queue.push(&#123;</span><br><span class="line">                path:current.path.concat([p]),</span><br><span class="line">                object:property.value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(property.hasOwnProperty(&quot;get&quot;) &amp;&amp; ( typeof property.get ==&quot;function&quot;))&#123;</span><br><span class="line">            queue.push(&#123;</span><br><span class="line">                path:current.path.concat([p]),</span><br><span class="line">                object:property.get</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(property.hasOwnProperty(&quot;set&quot;) &amp;&amp; ( typeof property.set ==&quot;function&quot;))&#123;</span><br><span class="line">            queue.push(&#123;</span><br><span class="line">                path:current.path.concat([p]),</span><br><span class="line">                object:property.set</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h3><h4 id="总论"><a href="#总论" class="headerlink" title="总论"></a>总论</h4><ul><li>工作过程<ul><li>url-&gt;http</li><li>html-&gt;parse</li><li>DOM-&gt;css computing</li><li>DOM with CSS-&gt;layout</li><li>DOM with position-&gt;render</li><li>Bitmap</li></ul></li><li>网络模型<ul><li>OSI七层网络模型<ul><li>应用</li><li>表示</li><li>会话</li><li>传输</li><li>网络</li><li>数据链路</li><li>物理</li></ul></li><li>四层网络模型<ul><li>应用层</li><li>传输层</li><li>网络层</li><li>物理层</li></ul></li></ul></li><li>tcp/ip<ul><li>tcp<ul><li>流</li><li>端口</li><li>require(‘net’)</li></ul></li><li>ip<ul><li>包</li><li>IP地址</li><li>libnet/libpcap</li></ul></li></ul></li><li>http标准<ul><li>http1.1 <a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616</a></li><li>https <a href="https://tools.ietf.org/html/rfc2818" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2818</a></li><li>http2 <a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7540</a></li></ul></li></ul><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><ul><li>Request<ul><li>RequestLine<ul><li>GET</li><li>POST</li><li>HEAD</li><li>OPTIONS</li><li>PUT</li><li>DELETE</li><li>TRACE</li><li>CONNECT</li></ul></li><li>Headers<ul><li>If-None-Match</li><li>Cookie</li></ul></li><li>Body<ul><li>application/json</li><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></li></ul></li><li>Response<ul><li>StatusLine</li><li>Headers</li><li>Body</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line">// client.js</span><br><span class="line">const net = require(&quot;net&quot;);</span><br><span class="line"></span><br><span class="line">class Request &#123;</span><br><span class="line">    constructor(options)&#123;</span><br><span class="line">        this.method = options.method || &quot;GET&quot;;</span><br><span class="line">        this.host = options.host || &quot;localhost&quot;;</span><br><span class="line">        this.port = options.port || 8080;</span><br><span class="line">        this.path = options.path || &quot;/&quot;;</span><br><span class="line">        this.headers = options.headers || &#123;&#125;;</span><br><span class="line">        this.body = options.body || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        if(!this.headers[&quot;Content-Type&quot;])&#123;</span><br><span class="line">            this.headers[&quot;Content-Type&quot;] = &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(this.headers[&quot;Content-Type&quot;] == &quot;application/json&quot;)&#123;</span><br><span class="line">            this.bodyText = JSON.stringify(this.body)</span><br><span class="line">        &#125;else if(this.headers[&quot;Content-Type&quot;] ==&quot;application/x-www-form-urlencoded&quot;)&#123;</span><br><span class="line">            this.bodyText = Object.keys(this.body).map(k=&gt;encodeURIComponent(k) +&quot;=&quot;+encodeURIComponent(this.body[k])).join(&quot;&amp;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        this.headers[&quot;Content-Length&quot;] = this.bodyText.length;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString()&#123;</span><br><span class="line">        return `$&#123;this.method&#125; $&#123;this.path&#125; HTTP/1.1\r</span><br><span class="line">$&#123;Object.keys(this.headers).map(k=&gt;`$&#123;k&#125;: $&#123;this.headers[k]&#125;`).join(&quot;\r\n&quot;)&#125;\r</span><br><span class="line">\r</span><br><span class="line">$&#123;this.bodyText&#125;`</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    send(conn)&#123;</span><br><span class="line">        return new Promise((res,rej)=&gt;&#123;</span><br><span class="line">            let parser = new ResponseParser();</span><br><span class="line">            if(conn)&#123;</span><br><span class="line">                conn.write(this.toString())</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                conn = net.createConnection(&#123;</span><br><span class="line">                    host:this.host,</span><br><span class="line">                    port:this.port</span><br><span class="line">                &#125;,()=&gt;&#123;</span><br><span class="line">                    conn.write(this.toString())</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            conn.on(&quot;data&quot;,(data)=&gt;&#123;</span><br><span class="line">                parser.receive(data.toString());</span><br><span class="line"></span><br><span class="line">                if(parser.isFinished)&#123;</span><br><span class="line">                    res(parser.response)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // console.log(parser.statusLine);</span><br><span class="line">                // console.log(parser.headers);</span><br><span class="line">                // res(data.toString())</span><br><span class="line">                conn.end();</span><br><span class="line">            &#125;)</span><br><span class="line">            conn.on(&quot;end&quot;,()=&gt;&#123;</span><br><span class="line">                console.log(&quot;disconnected from server&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">            conn.on(&quot;error&quot;,(error)=&gt;&#123;</span><br><span class="line">                rej(error);</span><br><span class="line">                conn.end();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ResponseParser &#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.WAITING_STATUS_LINE = 0;</span><br><span class="line">        this.WAITING_STATUS_LINE_END = 1;</span><br><span class="line">        this.WAITING_HEADER_NAME = 2;</span><br><span class="line">        this.WAITING_HEADER_SPACE = 3;</span><br><span class="line">        this.WAITING_HEADER_VALUE = 4;</span><br><span class="line">        this.WAITING_HEADER_LINE_END = 5;</span><br><span class="line">        this.WAITING_HEADER_BLOCK_END = 6;</span><br><span class="line">        this.WAITING_BOBY = 7;</span><br><span class="line"></span><br><span class="line">        this.current = this.WAITING_STATUS_LINE;</span><br><span class="line">        this.statusLine = &quot;&quot;;</span><br><span class="line">        this.headers = &#123;&#125;;</span><br><span class="line">        this.headerName = &quot;&quot;;</span><br><span class="line">        this.headerValue = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        this.bodyParser = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get isFinished()&#123;</span><br><span class="line">        return this.bodyParser &amp;&amp; this.bodyParser.isFinished;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    get response()&#123;</span><br><span class="line">        this.statusLine.match(/HTTP\/1.1 (\d+) ([\s\S]+)/);</span><br><span class="line">        return &#123;</span><br><span class="line">            statusCode:RegExp.$1,</span><br><span class="line">            statusText:RegExp.$2,</span><br><span class="line">            headers:this.headers,</span><br><span class="line">            body:this.bodyParser.content.join(&quot;&quot;)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive(string)&#123;</span><br><span class="line">        for(let i = 0;i&lt;string.length;i++)&#123;</span><br><span class="line">            this.receiveChar(string.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receiveChar(char)&#123;</span><br><span class="line">        if(this.current == this.WAITING_STATUS_LINE)&#123;</span><br><span class="line">            if(char === &quot;\r&quot;)&#123;</span><br><span class="line">                this.current =  this.WAITING_STATUS_LINE_END;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.statusLine += char;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current ==  this.WAITING_STATUS_LINE_END)&#123;</span><br><span class="line">            if(char === &quot;\n&quot;)&#123;</span><br><span class="line">                this.current =  this.WAITING_HEADER_NAME;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current ==  this.WAITING_HEADER_NAME)&#123;</span><br><span class="line">            if(char ==&quot;\r&quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_HEADER_BLOCK_END;</span><br><span class="line">                if(this.headers[&quot;Transfer-Encoding&quot;] === &quot;chunked&quot;)&#123;</span><br><span class="line">                    this.bodyParser = new TrunkedBodyParser();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else if(char == &quot;:&quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_HEADER_SPACE;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.headerName += char;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current == this.WAITING_HEADER_SPACE)&#123;</span><br><span class="line">            if(char == &quot; &quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_HEADER_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current == this.WAITING_HEADER_VALUE)&#123;</span><br><span class="line">            if(char == &quot;\r&quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_HEADER_LINE_END;</span><br><span class="line">                this.headers[this.headerName] = this.headerValue;</span><br><span class="line">                this.headerName = &quot;&quot;;</span><br><span class="line">                this.headerValue = &quot;&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.headerValue += char;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if( this.current == this.WAITING_HEADER_LINE_END)&#123;</span><br><span class="line">            if(char === &quot;\n&quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_HEADER_NAME;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current == this.WAITING_HEADER_BLOCK_END)&#123;</span><br><span class="line">            if(char === &quot;\n&quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_BOBY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current  == this.WAITING_BOBY)&#123;</span><br><span class="line">            this.bodyParser.receiveChar(char)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TrunkedBodyParser &#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.WAITING_LENGTH = 0;</span><br><span class="line">        this.WAITING_LENGTH_LINE_END = 1;</span><br><span class="line">        this.READING_TRUNK = 2;</span><br><span class="line">        this.WAITING_NEW_LINE = 3;</span><br><span class="line">        this.WAITING_NEW_LINE_END =4;</span><br><span class="line"></span><br><span class="line">        this.length = 0;</span><br><span class="line">        this.content = [];</span><br><span class="line">        this.isFinished = false;</span><br><span class="line"></span><br><span class="line">        this.current = this.WAITING_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receiveChar(char)&#123;</span><br><span class="line">        // console.log(JSON.stringify(char))</span><br><span class="line">        if(this.current == this.WAITING_LENGTH)&#123;</span><br><span class="line">            if(char == &quot;\r&quot;)&#123;</span><br><span class="line">                if(this.length == 0)&#123;</span><br><span class="line">                    // console.log(this.content)</span><br><span class="line">                    this.isFinished = true;</span><br><span class="line">                &#125;</span><br><span class="line">                this.current = this.WAITING_LENGTH_LINE_END;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.length *= 10;</span><br><span class="line">                this.length += char.charCodeAt(0) - &apos;0&apos;.charCodeAt(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current == this.WAITING_LENGTH_LINE_END)&#123;</span><br><span class="line">            if(char == &quot;\n&quot;)&#123;</span><br><span class="line">                this.current = this.READING_TRUNK</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current == this.READING_TRUNK)&#123;</span><br><span class="line">            if(this.length &gt;0)&#123;</span><br><span class="line">                this.content.push(char);</span><br><span class="line">            &#125;</span><br><span class="line">            this.length--;</span><br><span class="line">            if(this.length ==0 )&#123;</span><br><span class="line">                this.current = this.WAITING_NEW_LINE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current == this.WAITING_NEW_LINE)&#123;</span><br><span class="line">            if(char == &quot;\r&quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_NEW_LINE_END;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(this.current == this.WAITING_NEW_LINE_END)&#123;</span><br><span class="line">            if(char == &quot;\n&quot;)&#123;</span><br><span class="line">                this.current = this.WAITING_LENGTH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void async function()&#123;</span><br><span class="line">    let request = new Request(&#123;</span><br><span class="line">        method:&quot;GET&quot;,</span><br><span class="line">        host:&quot;localhost&quot;,</span><br><span class="line">        port:8080,</span><br><span class="line">        path:&quot;/&quot;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            &quot;geek&quot;:&quot;time&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        body:&#123;</span><br><span class="line">            name:&quot;GeekTime&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    let res = await request.send();</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">// const client = net.createConnection(&#123;</span><br><span class="line">//     host:&quot;localhost&quot;,</span><br><span class="line">//     port:8080</span><br><span class="line">// &#125;,()=&gt;&#123;</span><br><span class="line">//     console.log(&quot;connected to server&quot;);</span><br><span class="line">//     // client.write(&quot;GET / HTTP/1.1\r\n&quot;);</span><br><span class="line">//     // client.write(&quot;\r\n&quot;)</span><br><span class="line"></span><br><span class="line">//     let request = new Request(&#123;</span><br><span class="line">//         method:&quot;GET&quot;,</span><br><span class="line">//         host:&quot;localhost&quot;,</span><br><span class="line">//         port:8080,</span><br><span class="line">//         path:&quot;/&quot;,</span><br><span class="line">//         headers:&#123;</span><br><span class="line">//             &quot;geek&quot;:&quot;time&quot;</span><br><span class="line">//         &#125;,</span><br><span class="line">//         body:&#123;</span><br><span class="line">//             name:&quot;GeekTime&quot;</span><br><span class="line">//         &#125;,</span><br><span class="line"></span><br><span class="line">//     &#125;)</span><br><span class="line"></span><br><span class="line">//     console.log(request.toString())</span><br><span class="line">//     client.write(request.toString())</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// client.on(&quot;data&quot;,(data)=&gt;&#123;</span><br><span class="line">//     console.log(&quot;on data \r\n&quot;,data.toString())</span><br><span class="line">//     client.end();</span><br><span class="line">// &#125;)</span><br><span class="line">// client.on(&quot;end&quot;,()=&gt;&#123;</span><br><span class="line">//     console.log(&quot;disconnected from server&quot;)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// server.js</span><br><span class="line">const http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">const server = http.createServer((req,res)=&gt;&#123;</span><br><span class="line">    console.log(&quot;server received a request&quot;);</span><br><span class="line">    console.log(req.headers);</span><br><span class="line">    </span><br><span class="line">    res.setHeader(&quot;Content-Type&quot;,&quot;text/html&quot;);</span><br><span class="line">    res.setHeader(&quot;X-Foo&quot;,&quot;bar&quot;);</span><br><span class="line">    res.writeHead(200,&#123;&quot;Content-Type&quot;:&quot;text/plain&quot;&#125;);</span><br><span class="line">    res.end(`</span><br><span class="line">&lt;html maaa=a &gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">body div #myid&#123;</span><br><span class="line">    width:100px;</span><br><span class="line">    background-color: #ff5000;</span><br><span class="line">&#125;</span><br><span class="line">body div img&#123;</span><br><span class="line">    width:30px;</span><br><span class="line">    background-color: #ff1111;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img id=&quot;myid&quot;/&gt;</span><br><span class="line">        &lt;img /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">`);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8080,()=&gt;&#123;</span><br><span class="line">    console.log(&quot;server is running...&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="html语法词法分析"><a href="#html语法词法分析" class="headerlink" title="html语法词法分析"></a>html语法词法分析</h4><ul><li><a href="https://html.spec.whatwg.org/multipage/parsing.html" target="_blank" rel="noopener">https://html.spec.whatwg.org/multipage/parsing.html</a></li><li>状态机FSM<ul><li>Finite State Machine</li><li>就是状态在不同条件下跳转到自己或不同状态的状态转移图<ul><li>每一个状态都是一个机器，不是变量<ul><li>在每一个机器里可以做计算、存储、输出…</li><li>所有这些机器接收的输入是一致的，参数一致</li><li>所有这些机器本身没有状态，如果用函数来表示则应该是纯函数</li></ul></li><li>每一个状态知道下一个状态<ul><li>Moore有确定的下一个状态</li><li>Mealy根据输入决定下一个状态</li></ul></li></ul></li><li>四要素<ul><li>现态</li><li>条件</li><li>动作</li><li>次态</li></ul></li><li>两大类<ul><li>Mealy<ul><li>米利型有限状态机 MealyMachine</li><li>输出依赖状态和输入</li><li>每个Mealy机都有一个等价的Moore机,该等价的Moore机的状态的数量上限应是对应Mealy机状态数量和输出数量的乘积再加一</li></ul></li><li>Moore<ul><li>摩尔型有限状态机 MooreMachine</li><li>输出只依赖状态，不依赖输入</li></ul></li></ul></li></ul></li><li>字符串查找问题解法(文本串长度N,模式串长度M)<ul><li>BF<ul><li>BruteForce暴力解法</li><li>时间复杂度O(M*N) 空间复杂度O(1)</li><li>双层循环</li></ul></li><li>KMP<ul><li>三位发明者名字首字母</li><li>时间复杂度O(N) 空间复杂度O(M)</li><li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html</a></li><li>KMP的关键是通过M串计算出部分匹配表PMT(PartialMatchTable)，每次不匹配时M串移动位数=已匹配的字符数 - 最后一位匹配字符对应PMT的部分匹配值</li><li>部分匹配值是前缀和后缀子串中最长的共有元素的长度</li></ul></li></ul></li><li>DOM构建<ul><li>字符流通过状态机进行分词形成token</li><li>token通过栈管理形成DOM</li></ul></li><li><a href="https://github.com/prief/toy-browser" target="_blank" rel="noopener">https://github.com/prief/toy-browser</a></li></ul><h4 id="css计算-排版-渲染-合成"><a href="#css计算-排版-渲染-合成" class="headerlink" title="css计算/排版/渲染/合成"></a>css计算/排版/渲染/合成</h4><ul><li>specificity<ul><li>行内样式</li><li>id</li><li>class</li><li>tag</li></ul></li><li>布局模型四代发展过程<ul><li>normalFlow</li><li>flex<ul><li>flex-container<ul><li>flex-direction</li><li>flex-wrap </li><li>flex-flow 是flex-direction属性和flex-wrap的简写,默认row nowrap</li><li>justify-content</li><li>align-items </li><li>align-content 交叉轴上有wrap即多行的对齐方式</li></ul></li><li>flex-item<ul><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex  默认 0 1 auto,对应grow shrink basis</li><li>order 默认为0,越小越靠前</li><li>align-self 允许单个项目定义与其他项目不一样的对齐方式</li></ul></li></ul></li><li>grid</li><li>houdini</li></ul></li><li><a href="https://github.com/prief/toy-browser" target="_blank" rel="noopener">https://github.com/prief/toy-browser</a></li></ul><h3 id="重学css"><a href="#重学css" class="headerlink" title="重学css"></a>重学css</h3><ul><li><a href="https://www.w3.org/TR/CSS21/grammar.html" target="_blank" rel="noopener">https://www.w3.org/TR/CSS21/grammar.html</a></li><li>总体结构<ul><li>@rule<ul><li>@charset</li><li>@import</li><li>@media</li><li>@page</li><li>@namespace</li><li>@supports</li><li>@document</li><li>@font-face</li><li>@keyframes</li><li>@viewport</li><li>@counter-style</li></ul></li><li>rules<ul><li>selector<ul><li>selector_group</li><li>combinator</li><li>simple_selector<ul><li>type</li><li>*</li><li>#</li><li>.</li><li>[]</li><li>:</li><li>::</li></ul></li></ul></li><li>declaration<ul><li>key<ul><li>properties</li><li>variables<ul><li>--text-color: red;</li><li>color: var(–text-color);</li></ul></li></ul></li><li>value</li></ul></li></ul></li></ul></li><li>兼容性问题解决思路<ul><li>开发手上保证测试机</li><li>测试阶段保证TOP10</li><li>发布前保证TOP30</li><li>重点功能发布前保证TOP100</li></ul></li><li>前端3D引擎<ul><li>three.js</li><li>babylon.js</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;重学&quot;&gt;&lt;a href=&quot;#重学&quot; class=&quot;headerlink&quot; title=&quot;重学&quot;&gt;&lt;/a&gt;重学&lt;/h3&gt;&lt;h4 id=&quot;课程目录&quot;&gt;&lt;a href=&quot;#课程目录&quot; class=&quot;headerlink&quot; title=&quot;课程目录&quot;&gt;&lt;/a&gt;课程目录&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pm</title>
    <link href="https://prief.github.io/pm/"/>
    <id>https://prief.github.io/pm/</id>
    <published>2019-11-16T07:43:34.000Z</published>
    <updated>2019-12-08T01:51:18.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常识篇"><a href="#常识篇" class="headerlink" title="常识篇"></a>常识篇</h2><h3 id="转型三大误区"><a href="#转型三大误区" class="headerlink" title="转型三大误区"></a>转型三大误区</h3><ul><li>凡事事必躬亲<ul><li>成功施加影响三个层次<ul><li>让人知道要做 Awareness</li><li>有动力做 Desire</li><li>有能力做 Ability(短期借调/内部转岗/外部引入)</li></ul></li><li>为什么要做/为什么现在做/获取认同和激发动力/选择授权对象</li></ul></li><li>追在屁股后面监工<ul><li>明确目标</li><li>建立机制</li><li>形成秩序(流程和规则)</li></ul></li><li>拿着锤子看哪里都是钉子<ul><li>从项目和团队真实痛点出发</li></ul></li></ul><h3 id="十大领域五大过程组"><a href="#十大领域五大过程组" class="headerlink" title="十大领域五大过程组"></a>十大领域五大过程组</h3><ul><li>国际三大项目管理研究体系<ul><li>PMI 美国项目管理协会</li><li>IPMA 欧洲的国际项目管理协会</li><li>PRINCE2 英国</li></ul></li><li>项目<ul><li>项目是为创造独特的产品、服务或成果而进行的临时性工作</li><li>项目管理是将各种知识、技能、工具、技术应用于项目活动，满足项目的要求，是变理想为现实，化抽象为具体的一门科学和艺术</li><li>PMI把项目管理分为<ul><li>十大知识领域</li><li>五大过程组49个子过程</li></ul></li></ul></li><li>十大知识领域<ul><li>整合管理 1个整体领域</li><li>范围管理 4个核心领域</li><li>进度管理 4个核心领域</li><li>成本管理 4个核心领域</li><li>质量管理 4个核心领域</li><li>资源管理 5个辅助领域</li><li>沟通管理 5个辅助领域</li><li>干系人管理 5个辅助领域</li><li>风险管理 5个辅助领域</li><li>采购管理 5个辅助领域<img src="/pm/10大领域管理.png" title="10大领域管理"></li></ul></li><li>五大过程组(PDCA戴明环Plan/Do/Check/Act)<ul><li>启动过程组(千里之行始于足下)<ul><li>识别干系人</li><li>制定项目章程</li></ul></li><li>规划过程组(运筹帷幄决胜千里) </li><li>执行过程组(言出必行行之必果)</li><li>监控过程组(审时度势沉着应变)</li><li>收尾过程组(慎终如始则无败事)</li></ul></li><li>网易项目管理<img src="/pm/网易项目管理纲领.png" title="网易项目管理纲领">  </li></ul><h2 id="硬技能篇"><a href="#硬技能篇" class="headerlink" title="硬技能篇"></a>硬技能篇</h2><h3 id="启动：识别项目四类干系人"><a href="#启动：识别项目四类干系人" class="headerlink" title="启动：识别项目四类干系人"></a>启动：识别项目四类干系人</h3><ul><li>干系人识别  </li><li>高利益高权利<ul><li>代表就是项目发起人sponsor </li></ul></li><li>低利益高权力<ul><li>代表是职能经理 </li></ul></li><li>高利益低权利<ul><li>代表项目组成员 </li></ul></li><li>低利益低权利<ul><li>代表外围支持人员</li></ul></li></ul><h3 id="规划：排除计划中的“延期地雷”"><a href="#规划：排除计划中的“延期地雷”" class="headerlink" title="规划：排除计划中的“延期地雷”"></a>规划：排除计划中的“延期地雷”</h3><ul><li>计划是市场需求或发起人的期望和团队生产力之间的平衡结果</li><li>计划是用来对焦的，做计划就是集体对焦的过程</li><li>雷区<ul><li>不够具体<ul><li>做计划的第一个标准动作WBS(work breakdown structure)工作分解</li><li>WBS就是把项目工作按阶段可交付成果分解成较小的易于管理的组成部分</li><li>明确分成多少阶段多少块内容，涉及哪些角色和环节，将工作项拆解到3个工作日内，具体到人</li></ul></li><li>不够全面<ul><li>做计划的第二个标准动作识别依赖并画出关键路径，从目标的角度进行统筹思考</li></ul></li><li>不够准确<ul><li>做计划第三个标准动作定义完成标准</li><li>完成标准就是某时间点需要完成的事项列表或是达到某些指标</li></ul></li><li>没有共识<ul><li>做计划的第四个标准动作达成共识并公开透明</li><li>召开全员规划会，对齐信息达成共识，发邮件给干系人正式告知</li></ul></li><li>不够即时<ul><li>做计划的第五个标准动作及时调整变更</li><li>公开告知所有项目组成员</li></ul></li></ul></li></ul><h3 id="执行：打造品质要从头开始闭环"><a href="#执行：打造品质要从头开始闭环" class="headerlink" title="执行：打造品质要从头开始闭环"></a>执行：打造品质要从头开始闭环</h3><ul><li>闭环验证方法<ul><li>方案评审(OARP决策机制)<ul><li>Owner 负责人，负责给出方案，组织各方讨论并推进做出决策</li><li>Approver 批准者</li><li>Reviewer 审核者</li><li>Participant 参与者  </li></ul></li><li>BugBash(bug大扫除)<ul><li>时间：在阶段性活动后，需要1-2个小时</li><li>地点：集合到一起，活动更有氛围</li><li>参与者：研发、测试、产品、设计、运营等</li><li>现场安排：反馈问题可视化，现场氛围营造</li><li>活动结束：公示结果，现场奖励，明确改进计划并周知</li></ul></li><li>冒烟用例评审<ul><li>冒烟测试用例是开发和测试之间最基础的合约，是测试的准入标准</li><li>可通过记录冒烟测试通过率来共同提高质量</li></ul></li></ul></li></ul><h3 id="监控：进展巧汇报，用数据说话"><a href="#监控：进展巧汇报，用数据说话" class="headerlink" title="监控：进展巧汇报，用数据说话"></a>监控：进展巧汇报，用数据说话</h3><ul><li><p>紧急汇报：直面问题有章法</p><ul><li>紧急报告基本元素 <ul><li>事件描述</li><li>影响后果</li><li>跟进分析</li><li>响应措施(包含负责人及时间表)</li><li>所需支持</li></ul></li></ul></li><li><p>常规汇报：项目周报三个问题</p><ul><li>项目整体进展状态？</li><li>风险是否可控？</li><li>目标达成有没有问题  </li></ul></li><li><p>数据汇报：善用透明的力量</p><ul><li>数据指标</li><li>jira图表<ul><li>发布倒计时</li><li>工作量燃尽图</li><li>剩余工作量</li><li>工作状态分布</li></ul></li><li>数据透明给团队，利用团队的力量</li></ul></li></ul><h3 id="收尾：项目复盘，持续改进"><a href="#收尾：项目复盘，持续改进" class="headerlink" title="收尾：项目复盘，持续改进"></a>收尾：项目复盘，持续改进</h3><ul><li>设定开放的基调，认清目的，避免追责</li><li>会前准备，梳理整个版本的历程</li><li>复盘流程<ul><li>现场回顾总结(目标/进度/变更/质量等)</li><li>每个人总结做的好/不好的3个点</li><li>白板前review</li><li>集体投票</li><li>总结并讨论改进方案  </li></ul></li><li>打造团队持续改进能力<ul><li></li></ul></li></ul><h2 id="软实力篇"><a href="#软实力篇" class="headerlink" title="软实力篇"></a>软实力篇</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常识篇&quot;&gt;&lt;a href=&quot;#常识篇&quot; class=&quot;headerlink&quot; title=&quot;常识篇&quot;&gt;&lt;/a&gt;常识篇&lt;/h2&gt;&lt;h3 id=&quot;转型三大误区&quot;&gt;&lt;a href=&quot;#转型三大误区&quot; class=&quot;headerlink&quot; title=&quot;转型三大误区&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>flutter</title>
    <link href="https://prief.github.io/flutter/"/>
    <id>https://prief.github.io/flutter/</id>
    <published>2019-10-01T08:24:22.000Z</published>
    <updated>2019-11-16T07:41:48.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flutter开发起步"><a href="#flutter开发起步" class="headerlink" title="flutter开发起步"></a>flutter开发起步</h1><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ul><li>底层渲染逻辑skia<ul><li>利用自己的渲染引擎skia，不依赖OS的组件</li><li>保证了高度一致性</li></ul></li><li>上层开发语言dart<ul><li>Dart同时支持JIT/AOT</li><li>开发期调试效率高，发布期执行性能好<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2></li></ul></li><li>跨平台</li><li>高保真(自己的渲染引擎skia完成了渲染的闭环，不用js扩展调用原生)</li><li>高性能</li></ul><h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><ul><li>embedder<ul><li>操作系统适配层</li><li>实现了渲染设置，线程设置，平台插件适配等</li></ul></li><li>engine<ul><li>skia和text提供了调用底层渲染和排版的能力</li><li>dart提供了运行时调用dart和渲染引擎的能力</li></ul></li><li>framework<ul><li>dart实现的UI SDK包含动画、图形绘制、手势识别等<img src="/flutter/flutterArch.png" title="flutter"></li></ul></li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul><li>Widget以树的形式组织成控件树</li><li>flutter通过每个控件创建不同类型的渲染对象组成渲染对象树</li><li>渲染对象树通过4个阶段完成展示<ul><li>布局 采用深度优先机制遍历渲染对象树，决定对象的位置和尺寸(支持布局边界和父约束)</li><li>绘制 按位置和尺寸绘制到不同的图层，采用深度优先机制遍历(支持重绘边界)</li><li>合成 将所有图层根据位置，尺寸，层级，大小，透明度等规则计算出最终显示效果简化渲染树</li><li>渲染 几何图层数据交给skia引擎加工成二维图像数据最终给GPU进行渲染<img src="/flutter/flutter.jpg" title="flutter技术点"></li></ul></li></ul><h2 id="跨平台方案"><a href="#跨平台方案" class="headerlink" title="跨平台方案"></a>跨平台方案</h2><ul><li><p>三个时代</p><ul><li>web容器时代(cordova,ionic,微信小程序都使用webview+jsBridge)</li><li>泛web容器时代(reactNative,weex,快应用都把渲染交给原生)</li><li>自绘引擎时代(flutter,客户端只提供一块画布即可)<img src="/flutter/hybrid.png" title="技术选型对比"></li></ul></li><li><p>图像显示基本原理</p><ul><li>CPU负责图像数据的计算</li><li>GPU负责图像数据的渲染，渲染后放入帧缓冲区，视频控制器根据垂直同步信号VSync以60t/s刷新给显示器</li><li>显示器负责图像显示</li></ul></li><li><p>skia</p><ul><li>c++开发的高性能2D图像绘制引擎</li></ul></li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>android<ul><li>AS</li><li>AVD(Nexus6P)</li></ul></li><li>ios<ul><li>Xcode</li><li>open -a Simulator</li></ul></li><li>flutter<ul><li>export PUB_HOSTED_URL=<a href="https://pub.flutter-io.cn" target="_blank" rel="noopener">https://pub.flutter-io.cn</a></li><li>export FLUTTER_STORAGE_BASE_URL=<a href="https://storage.flutter-io.cn" target="_blank" rel="noopener">https://storage.flutter-io.cn</a></li><li>export FLUTTER_HOME=/Users/dh/dev/flutter</li><li>export PATH=$PATH:$FLUTTER_HOME/bin</li><li>flutter emulators [–launch apple_ios_simulator]</li><li>flutter doctor</li></ul></li><li>doctor问题解决方案<ul><li>ios<ul><li>gem sources –add <a href="https://gems.ruby-china.com/" target="_blank" rel="noopener">https://gems.ruby-china.com/</a> –remove <a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a></li><li>gem sources -l</li><li>gem update –system</li><li>sudo gem install cocoapods</li><li>pod setup</li><li>brew update</li><li>brew install –HEAD usbmuxd #usb通信抽象为tcp通信，与设备进行多路socket守护进程</li><li>brew link usbmuxd</li><li>brew install –HEAD libimobiledevice # 与设备进行通信的跨平台协议库</li><li>brew install ideviceinstaller # 在ios设备上管理app的工具</li><li>signing</li></ul></li><li>android<ul><li>flutter doctor –android-licenses</li><li>flutter plugin</li></ul></li><li>vscode<ul><li>flutter extension</li></ul></li></ul></li></ul><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><ul><li>android 安卓子工程</li><li>build 构建产物</li><li>ios ios子工程</li><li>lib/main.dart flutter工程入口文件</li><li>test 测试目录</li><li>flutter_app_demo.iml 工程配置文件</li><li>pubspec.lock 记录当前项目实际依赖信息的文件</li><li>pubspec.yaml 管理第三方库和资源的配置文件</li></ul><h1 id="Dart基础"><a href="#Dart基础" class="headerlink" title="Dart基础"></a>Dart基础</h1><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>同时支持JIT/AOT编译模式<ul><li>JIT just in time即时编译，适合开发环境</li><li>AOT ahead of time运行前编译，适合生产环境</li></ul></li><li>内存分配和垃圾回收机制<ul><li>内存线性增长，创建对象时只在堆上移动指针</li><li>并发是通过Isolate实现，使dart实现了无锁的内存分配</li><li>避免了抢占式调度和共享内存</li><li>垃圾回收采用多生代算法，只操作少量的活跃对象，忽略死亡对象</li></ul></li><li>单线程模型<ul><li>dart中没有线程，只有Isolate隔离区，isolate不共享内存</li><li>通过事件循环在事件队列上传递消息</li></ul></li><li>无需单独的声明式布局语言</li></ul><h2 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h2><ul><li>dart概述<ul><li>是类型安全的语言，不会隐式转换类型</li><li>所有的类型都是对象类型，都继承自顶层的Object</li></ul></li><li>main()作为程序的入口 </li><li>变量与类型<ul><li>var声明变量表示变量类型自动推断</li><li>未初始化的变量的值都是null</li></ul></li><li>基本类型<ul><li>String<ul><li>UTF-16的字符串组成</li><li>支持单引号、双引号</li><li>支持${expression}或$var</li><li>三个单引号或双引号来表示多行字符串</li></ul></li><li>num<ul><li>64位int，代表整数类型</li><li>64位double，代表浮点类型</li></ul></li><li>bool<ul><li>true</li><li>false</li></ul></li><li>List<ul><li>类型约束List<int>/ list = <int>[]</int></int></li><li>类型判断 list is List<int></int></li></ul></li><li>Map<ul><li>类型约束Map&lt;String,String&gt;/ map = &lt;String,String&gt;{}</li><li>类型判断 map is Map&lt;String,String&gt;</li></ul></li></ul></li><li>常量<ul><li>const 表示在编译期间即能确定的值</li><li>final 表示在运行时确定的值，一旦确定后就不可改变</li></ul></li><li>函数<ul><li>类型Function</li><li>支持箭头函数</li><li>函数的重载即提供同名但参数不同的函数，dart认为会导致混乱所以不支持</li><li>但dart支持更高效的可选命名参数{}和可选参数[],也支持参数默认值</li></ul></li><li>类<ul><li>实例变量/方法</li><li>类变量/方法 static关键字</li><li>变量/方法名称前面加上_即可作为private使用，否则就是public，_是库访问级别</li><li>构造函数语法糖就是类中调用同类名相同的方法</li><li>命名构造函数即类可以有多个构造函数</li><li>实例化时可以省略new关键字</li><li>dart支持初始化列表，即支持多个构造函数，构造函数可以重定向:到另一个构造函数</li></ul></li><li>复用<ul><li>继承父类 extends</li><li>接口实现 implements</li><li>混入 with 解决dart缺少对多重继承的支持问题还能避免多重继承导致的菱形歧义</li></ul></li><li>运算符(用于简化处理变量实例缺失即null的情况)<ul><li>?. p?.printInfo()表示p为null时跳过，不为null时再调用，避免抛错</li><li>??= a??=value 如果a为null则赋值value，否则跳过</li><li>?? a ?? b 如果a不为null则返回a，否则返回b</li><li>dart提供了类似C++的运算符覆写机制，使用户可以自定义运算符，使用operator关键字和运算符一起使用来表示类成员运算符函数</li></ul></li></ul><h1 id="flutter基础"><a href="#flutter基础" class="headerlink" title="flutter基础"></a>flutter基础</h1><h2 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h2><ul><li>描述<ul><li>是flutter功能的抽象描述</li><li>是视图的配置信息</li><li>是数据的映射</li><li>一切皆widget(view/viewController/Activity/Application/Layout等)</li><li>由父到子、自顶向下方式构建，父widget控制子widget的样式</li><li>widget是不可变的，更新则意味着销毁和重建</li></ul></li><li>分类<ul><li>statelessWidget Model在build后不变，父widget通过初始化参数完全控制UI</li><li>statefulWidget build后还要关心和响应数据变化来进行重绘，setState就会触发</li></ul></li><li>渲染过程<ul><li>widget树 对视图的一种结构化描述数据，widget是不可变的需要很多的重建</li><li>element树 是widget的一个实例化对象，element.renderObject承载了视图构建的上下文数据，element是可变的，把真正需要修改的部分同步到renderObject中</li><li>renderObject树 主要负责视图渲染的对象<ul><li>布局 在renderObject中完成，采用深度优先机制遍历，确定位置和尺寸</li><li>绘制 在renderObject中完成，采用深度优先机制遍历，确定图层</li><li>合成 交给skia引擎</li><li>渲染 交给skia引擎，在VSync信号同步时直接从渲染树合成Bitmap，交给GPU</li></ul></li></ul></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>app的生命周期<ul><li>WidgetsBindingObserver类实现钩子，此类中有很多函数</li><li>didChangeAppLifecycleState<ul><li>resumed 可见的，可以响应用户交互</li><li>inactive 非活动状态，不能响应用户交互(上下两个状态切换时的中间状态)</li><li>paused 不可见并不能响应用户交互但后台继续活动</li></ul></li><li>addPostFrameCallback<ul><li>单次frame绘制回调，只会回调1次</li></ul></li><li>addPersistentFrameCallback<ul><li>实时frame绘制回调，每次frame绘制完成后都回调</li><li>适合做FPS监测</li></ul></li></ul></li><li>视图的生命周期，通过state体现<ul><li>创建<ul><li>构造方法，调用createState创建state，构造方法决定了最初呈现效果在state生命周期只会被调用1次</li><li>initState，在state生命周期只会被调用1次</li><li>didChangeDependencies</li><li>build，构建视图返回一个widget</li></ul></li><li>更新<ul><li>setState</li><li>didChangeDependencies</li><li>didUpdateWidget</li></ul></li><li>销毁<ul><li>deactivate</li><li>dispose<img src="/flutter/lifecycle1.png" title="生命周期1"><img src="/flutter/lifecycle2.png" title="生命周期2"></li></ul></li></ul></li></ul><h2 id="常用widget"><a href="#常用widget" class="headerlink" title="常用widget"></a>常用widget</h2><ul><li>Text<ul><li>Text</li><li>Text.rich</li></ul></li><li>TextSpan</li><li>Image<ul><li>Image.asset(“images/logo.png”)加载本地资源图片</li><li>Image.file(new File(“/path/to/file”))本地图片</li><li>Image.network(“<a href="http://xxx/xx.xx&quot;)加载网络图片" target="_blank" rel="noopener">http://xxx/xx.xx&quot;)加载网络图片</a></li></ul></li><li>FadeInImage 提供了图片占位，加载动画效果</li><li>CachedNetworkImage 还可以把图片缓存到fs中，更强大</li><li>FloatingActionButton 圆形按钮</li><li>FlatButton 扁平化的按钮，默认背景透明，有交互效果</li><li>RaisedButton 凸起的按钮，默认带有灰色背景，有交互效果</li><li>ListView<ul><li>ListView 适用于少量子元素，需要提前创建子widget，性能较差</li><li>ListView.builder 适用于子widget比较多的情况懒加载widget</li><li>ListView.separated 可设置分割线样式</li></ul></li><li>CustomScrollView<ul><li>处理多个需要自定义滚动效果的widget</li><li>彼此独立的可滚动的widget统称为sliver</li></ul></li><li>ScrollController 滚动信息的监听</li><li>ScrollNotification 获取滚动事件的通知，将ListView纳入子widget</li><li>布局类widget<ul><li>单子widget<ul><li>Container</li><li>Padding</li><li>Center</li></ul></li><li>多子widget<ul><li>Row</li><li>Column</li><li>Expanded 处理容器的剩余空间</li></ul></li><li>层叠widget<ul><li>Stack 提供了层叠布局的容器</li><li>Positioned 提供了设置子widget位置的能力</li></ul></li></ul></li><li>自定义widget<ul><li>组合</li><li>自绘<ul><li>CustomPaint是用以承接自绘控件的容器，并不负责真正的绘制</li><li>绘制使用画布Canvas和画笔Paint及绘制逻辑CustomPainter控制</li></ul></li></ul></li></ul><h2 id="主题定制"><a href="#主题定制" class="headerlink" title="主题定制"></a>主题定制</h2><ul><li>主题一般包括颜色、图片、字体、字号等资源和配置</li><li>实现<ul><li>ios中通常将配置信息预写到plist中通过单例来控制</li><li>android中通常将配置信息写到style属性值的xml中，通过activity的setTheme切换</li><li>前端通过切换css即可实现</li></ul></li><li>Theme(data:ThemeData(),child:MyWidget())</li><li>Theme(data:Theme.of(context).copyWith(),child:MyWidget())</li><li>flutter使用ThemeData统一管理<ul><li>app全局范围 MaterialApp.theme</li><li>widget局部范围 Theme.data<ul><li>不想继承任何全局配置可直接新建一个ThemeData实例</li><li>想继承可使用Theme.of(context).copyWith()</li></ul></li><li>Theme.of(context)向上查找widget树，返回最近的Theme</li><li>defaultTargetPlatform 可判断当前运行的平台</li></ul></li></ul><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ul><li>原生<ul><li>ios使用Images.xcassets管理图片，其他资源直接拖进项目即可</li><li>android使用drawable+分辨率命名的文件夹管理图片，res/layout放布局，res/values放资源描述文件，assets放原始文件</li></ul></li><li>flutter<ul><li>assets可管理任意类型的资源</li><li>pubspec.yaml中配置指向对应目录即可<ul><li>可以单独指向某个文件</li><li>也可以指向一个目录，目录制定并不会递归，所以需显示递归指定子目录</li></ul></li><li>资源引用<ul><li>Image.asset()引用图片<ul><li>遵循基于像素密度的管理方式1.0x、2.0x、3.0x</li><li>flutter根据设备分辨率加载比例最接近的图片资源实现自动降级</li><li>资源目录应该将1.0x、2.0x、3.0x图片资源分开管理</li><li>assets/bg.jpg</li><li>assets/2.0x/bg.jpg</li><li>assets/3.0x/bg.jpg</li><li>pubspec.yaml中仅声明1.0x资源即可 flutter.assets: assets/bg.jpg</li></ul></li><li>rootBundle.loadString()加载字符串文件资源</li><li>rootBundle.load()加载二进制文件资源</li><li>fonts:[{family: name,fonts:[{asset:assets/fonts/name.ttf},{asset:assets/fonts/name-Italic.ttf,style:italic},{asset:assets/fonts/name-Bold.ttf,weight:700}]}]</li></ul></li></ul></li><li>flutter框架前的原生配置<ul><li>更换app图标<ul><li>ios ios/Runner/Assets.xcassets/AppIcon.appiconset</li><li>android android/app/src/main/res/mipmap</li></ul></li><li>更换app启动图<ul><li>ios ios/Runner/Assets.xcassets/LaunchImage.imageset</li><li>android android/app/src/main/res/drawable/launch_background.xml</li></ul></li></ul></li><li>第三方组件库<ul><li>pubspec.yaml<ul><li>类似于ios中的Podfile/android中的build.gradle/前端的package.json</li><li>pub<ul><li>dart的包管理工具，类似于ios中的cocoaPods/android中的maven/前端npm</li><li>dart的包实际上就是一个包含了pubspec.yaml的目录</li></ul></li></ul></li><li>推荐包使用区间进行版本的管理，dart/flutter的sdk运行环境使用固定版本号</li><li>包依赖可以直接获取pub资源，也可以使用本地路径或git地址</li><li>所有依赖确定并下载完毕后会生成.packages文件记录包映射信息，此文件需要忽略</li><li>最后pub会生成pubspec.lock文件记录包的来源和版本号，此文件需要git</li></ul></li></ul><h2 id="用户交互事件"><a href="#用户交互事件" class="headerlink" title="用户交互事件"></a>用户交互事件</h2><ul><li>原始的指针事件(PointerEvent)<ul><li>原生常见的触摸事件</li><li>事件会从最内层冒泡到根节点，无法取消冒泡或停止分发，只能hitTestBehavior</li><li>ListenerWidget可以监听子widget的原始指针事件</li></ul></li><li>手势识别(GestureDetector)<ul><li>多个原始指针事件的组合操作，是指针事件的语义化封装</li><li>GestureDetector可以处理各种高级触摸行为，可监听多个手势但最终只有一个生效</li><li>不同手势通过flutter内部的arena进行PK，最终决定是什么手势</li><li>父组件也需要处理子组件手势时需要RawGestureDetector和GestureFactory自定义</li></ul></li></ul><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><ul><li>组件通信标准方式是通过属性传值</li><li>跨组件通信三种方案<ul><li>InheritedWidget</li><li>Notification</li><li>EventBus</li></ul></li><li>InheritedWidget<ul><li>从上到下传递</li><li>Theme是典型案例，父子建立观察者关系，上层属性修改后，子也会更新，默认只读</li></ul></li><li>Notification<ul><li>从下到上传递</li><li>NotificationListener进行监听</li></ul></li><li>EventBus<ul><li>上面两种依赖父子widget关系树</li><li>eventBus遵循了发布/订阅模式</li><li>全局作用，但容易引起冲突，组件移除要清理事件</li></ul></li></ul><h2 id="路由与导航"><a href="#路由与导航" class="headerlink" title="路由与导航"></a>路由与导航</h2><ul><li>Route <ul><li>是页面的抽象，主要负责接收参数，创建页面，响应navigator的打开和关闭</li></ul></li><li>Navigator<ul><li>维护一个路由栈管理Route，可打开/关闭/替换</li></ul></li><li>路由管理<ul><li>基本路由<ul><li>无需提前注册，页面切换时需要自己构造页面实例</li><li>Navigator.push(context,MaterialPageRouter(builder:()=&gt;{}))</li></ul></li><li>命名路由<ul><li>需要提前注册，页面切换时根据注册的标示符打开</li><li>Navigator.pushNamed(context,”name”)</li><li>Navigator.of(context).pushNamed(“name”,arguments:”args”);</li></ul></li></ul></li><li>其他<ul><li>默认路由 UnknownRoute</li><li>路由页面打开参数<ul><li>RouteSettings </li><li>args = ModalRoute.of(context).settings.arguments as String;</li></ul></li><li>路由页面返回参数<ul><li>push页面时要设置目标页面关闭时的监听函数以获取返回参数Navigator.pushNamed(context,”name”).then(args =&gt; print args);</li><li>目标页面关闭路由时要传递相关返回参数 Navigator.pop(context,”args”);</li></ul></li></ul></li></ul><h1 id="flutter进阶"><a href="#flutter进阶" class="headerlink" title="flutter进阶"></a>flutter进阶</h1><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li>Animation<ul><li>flutter动画库的核心类</li><li>flutter的动画状态和渲染是分离的</li><li>fultter动画的生成器</li></ul></li><li>AnimationController<ul><li>flutter动画的控制器</li><li>管理Animation，可设置动画的时长、启动动画、暂停、反转等</li><li>controller.forward()启动动画</li><li>controller.repeat()重复动画</li><li>controller.dispose()释放资源</li></ul></li><li>Listener<ul><li>flutter动画的监听器</li><li>是Animation的回调函数，可监听动画的进度变化</li><li>监听变化后重新触发刷新实现动画</li><li>实践中尽量避免直接使用提高性能</li></ul></li><li>AnimatedWidget<ul><li>将Animation状态与其子widget视觉样式绑定，省去了状态监听和刷新UI</li><li>使用时要继承此widget并接收Animation对象作为初始化参数,build方法中读值初始化</li></ul></li><li>AnimatedBuilder<ul><li>自动监听Animation对象变化根据需要刷新UI</li><li>尺寸变化由builder(context,child)函数管理</li><li>此类实现了动画与渲染的职责分离</li></ul></li><li>跨页面共享的动画<ul><li>共享元素变换 SharedElementTransition</li><li>Hero(tag:”name”,child:Widget)</li></ul></li></ul><h2 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h2><ul><li>EventLoop机制<ul><li>MicrotaskQueue微任务队列<ul><li>表示短时间就会完成的异步任务</li><li>微任务在事件循环中的优先级最高，只要有任务就一直霸占着事件循环</li><li>scheduleMicroTask()</li><li>一般不需要此队列</li></ul></li><li>EventQueue事件队列<ul><li>优先级比较低，比较常用</li><li>dart为EventQueue任务提供了Future封装</li><li>Future提供了链式调用能力，可在异步完成后依次执行</li><li>then与Future函数体共用一个事件循环</li><li>Future执行完毕了又给引用添加了一个then方法或Future函数体为null时会把then方法体放入微任务队列，尽快执行<img src="/flutter/eventLoop.png" title="事件循环"><img src="/flutter/eventLoop.gif" title="事件循环"></li></ul></li></ul></li><li>异步处理<ul><li>async/await</li></ul></li><li>并发编程<ul><li>dart是基于单线程模型，但也提供了基于Isolate的多线程机制提高多核cpu利用率</li><li>Isolate都有自己的EventLoop和Queue，资源隔离做的很好</li><li>Isolate之间不共享任何资源，只能依靠消息机制SendPort通信，避免了资源抢占需要加锁的问题</li><li>Isolate.spawn(fnName,args)</li><li>主/并发Isolate之间通信靠ReceivePort.listen()和sendPort.send()</li><li>为了方便使用抽象了支持并发计算的compute函数</li></ul></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul><li>网络请求流程<ul><li>构造client，设置通用请求行为（超时）</li><li>构造URI，设置请求header/body</li><li>发起请求，等待响应</li><li>解析响应的内容</li></ul></li><li>flutter实现方式<ul><li>dart:io里的HttpClient</li><li>dart原生的http请求库</li><li>第三方库dio(支持拦截器/请求合并等高级能力)</li></ul></li><li>JSON解析<ul><li>flutter不支持运行时反射，所以不能自动解析JSON只能手动解析</li><li>dart:convert库中内置的JSON解码器把JSON字符串解析成对象</li><li>字符串传给JSON.decode()返回一个Map再传给自定义解析类</li><li>如果JSON数据格式比较复杂或量比较大推荐使用compute函数将解析放到新Isolate完成</li></ul></li></ul><h2 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h2><ul><li>文件<ul><li>目录<ul><li>临时目录Temporary(ios的NSTemporaryDirectory和andriod的getCacheDir)</li><li>文档目录Documents(ios的NSDocumentDirectory和andriod的AppData目录)</li></ul></li><li>编码<ul><li>非常耗时需要在异步环境中编码</li><li>防止异常需要try/catch</li></ul></li></ul></li><li>SharedPreferences<ul><li>以原生方式为简单的键值对数据提供存储（string/int/double/bool）</li><li>ios中使用NSUserDefaults</li><li>android中使用SharedPreferences</li></ul></li><li>数据库sqlite<ul><li>设定数据库存储地址时使用join方法自动处理路径分隔符</li><li>创建数据库时传入的version与onCreate方法的回调中的version一致</li><li>在app版本升级过程中需要对数据库存储字段改动需要onUpgrade方法处理</li><li>数据库只会创建1次即onCreate在app卸载前只会执行1次</li></ul></li></ul><h2 id="dart层兼容原生"><a href="#dart层兼容原生" class="headerlink" title="dart层兼容原生"></a>dart层兼容原生</h2><ul><li>方法通道MethodChannel 解决原生能力复用问题<ul><li>基于方法通道(MethodChannel)机制可以把原生代码接口形式暴露给Dart</li><li>构造方法通道时需要指定一个唯一的字符串标识符，然后在这个通道上发起方法调用</li><li>const mc = MethodChannel(‘com.ceair/utils’);</li><li>try { await mc.invokeMethod(‘methodName’) } catch(e){}</li><li>方法通道调用过程中涉及的跨平台数据格式flutter会使用StandardMessageCodec进行序列化</li><li>方法通道是非线程安全的，所以原生和flutter都需要在主线程操作否则可能会有奇怪的bug</li></ul></li><li>平台视图PlatformView 解决原生视图复用问题<ul><li>允许flutter里嵌入原生的视图并加入flutter渲染树中实现混合视图</li><li>flutter通过原生视图的封装类(UIKitView和AndroidView)传入视图标识符发起请求</li><li>原生代码交给PlatformViewFactory实现</li><li>原生代码把视图标识符和工厂进行关联注册让flutter可直接找到工厂</li></ul></li></ul><h2 id="原生工程混编flutter"><a href="#原生工程混编flutter" class="headerlink" title="原生工程混编flutter"></a>原生工程混编flutter</h2><ul><li>混编原理 <ul><li>android原生提供一个FLutterView</li><li>ios原生提供一个FlutterViewController</li></ul></li><li>混编方式<ul><li>原生工程作为flutter工程的子工程，flutter统一管理（开发效率低）</li><li>flutter工程作为原生工程共用的子模块，原生工程不变的三端分离模式（推荐使用）<ul><li>抽离flutter工程，将不同平台的构建产物依照标准组件化形式管理</li><li>android项目把flutter模块打包成aar，通过build.gradle进行依赖管理</li><li>ios项目把flutter模块打包成pod，通过Podfle进行依赖管理</li></ul></li></ul></li><li>flutter模块<ul><li>flutter create -t module flutter_library</li></ul></li><li>android模块集成<ul><li>依赖1 flutter库和引擎 Flutter.jar</li><li>依赖2 flutter工程产物 isolate_snapshot_instr/vm_snapshot_data/FLutter_assets…</li><li>集成1 flutter build apk –[debug|release]</li><li>集成2 把上一步的产物flutter-debug.aar放到安卓工程app/libs目录下</li><li>集成3 build.gradle中添加对aar的依赖后sync一下</li><li>集成4 MainActivity.java中进行调用</li></ul></li><li>ios模块集成<ul><li>依赖1 flutter库和引擎 Flutter.framework</li><li>依赖2 flutter工程产物 App.framework</li><li>集成1 flutter build ios –[debug|release]</li><li>集成2 把上一步的产物拷贝到原生项目根目录下的FlutterEngine目录并创建FlutterEngine.podspec</li><li>集成3 pod lib lint</li><li>集成4 Podfile中集成后需要pod install</li><li>集成5 AppDelegate.m中进行调用</li></ul></li></ul><h2 id="混合导航栈"><a href="#混合导航栈" class="headerlink" title="混合导航栈"></a>混合导航栈</h2><ul><li>原生采用单容器单页面机制(一个ViewController/Activity对应一个页面)</li><li>Flutter采用单容器多页面机制(一个ViewController/Activity对应多个flutter页面)</li><li>原生跳转到flutter<ul><li>ios初始化flutter容器(FlutterViewController)并设置初始路由页面即可</li><li>android需要把View包装到Activity的contentView中并设置初始化路由</li></ul></li><li>flutter跳转到原生<ul><li>flutter打开新的原生页面(通过方法通道进行实现)</li><li>flutter回退到旧的原生页面(需要关闭flutter容器也是通过方法通道进行实现)</li></ul></li><li>性能问题<ul><li>由于flutter容器初始化成本比较高，每启动一个实例都要创建一个新的engine和Isolate</li><li>尽量避免flutter跳到原生后又跳到flutter，尽量在flutter完成业务的闭环</li><li>业界解决方案<ul><li>今日头条修改flutterEngine源码，使多engine在底层共享Isolate</li><li>闲鱼的共享FlutterView，通过hack方法由原生层驱动flutter层渲染内容</li><li>上面2种解决方案都有自己的不足，所以尽量减少此应用场景<img src="/flutter/hybridNav.png" title="混合导航栈"></li></ul></li></ul></li></ul><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><ul><li>Provider<ul><li>官方推荐框架，是InheritWidget的语法糖</li><li>提供了依赖注入的功能，允许widget树灵活处理数据</li><li>可读写的ChangeNotifierProvider/MultiProvider和只读的Provider</li><li>Provider.of()可获取资源，但页面其他Widget也会刷新</li><li>ConsumerN可通过Builder(context,model,child)只更新依赖的widget提高性能</li></ul></li><li>使用<ul><li>pubspec.yaml中添加Provider依赖</li><li>封装: 定义需要共享的数据模型，通过混入ChangeNotifier管理听众，模型中调用notifyListeners()通知听众刷新</li><li>注入: 把模型放到widget的父级或更高ChangeNotifierProvider.value(value:SharedModel(),child:Widget())</li><li>读写: Provider.of()/ConsumerN()</li></ul></li></ul><h2 id="原生推送"><a href="#原生推送" class="headerlink" title="原生推送"></a>原生推送</h2><ul><li>ios<ul><li>使用APNS苹果推送通知服务</li><li>为了保证api统一，ios上也使用封装了APNs的第三方服务</li></ul></li><li>android<ul><li>类似Firebase云消息传递机制FCM(FirebaseCloudMessage)实现推送托管</li><li>大陆通常使用三方推送(极光/友盟)适配</li><li>第三方服务不能享受系统底层的优化，使用自建的长链接通道</li><li>但也是共享所有接入第三方推送的app的推送通道，只要有一个存活就可推送</li></ul></li><li>推送流程<ul><li>业务服务器调用APNS/FCM</li><li>消息到达用户终端设备</li><li>设备解析后把消息转给所属应用</li></ul></li><li>极光接入流程<ul><li>初始化SDK setup(调用原生接口)</li><li>获取地址id registrationID(调用原生接口)</li><li>注册消息通知 setOpenNotificationHandler(原生回调dart)</li><li>单例模式实现整个应用共享</li><li>android<ul><li>JCommonService是一个后台Service，极光共享长链接通道核心</li><li>JPushMessageReceiver是一个BroadcastReceiver可获取推送消息</li><li>AndroidManifest.xml中声明上面2个的注册</li><li>收到消息回调后首先启动MainActivity，等待Flutter初始化完成后再回调flutter推送消息</li></ul></li><li>ios<ul><li>podspec文件引入极光SDKjpush</li><li>用户点击了推送消息，防止是从后台唤醒，要确保flutter初始化好后再回调flutter推送消息</li></ul></li><li>提供应用推送证书，关联极光应用配置<ul><li>android注册appkey后根据包名进行注册并在build.gradle中绑定manifestPlaceholders</li><li>ios首先要申请推送证书(.p12证书或APNsAuthKey)并在平台配置绑定后工程开启push</li></ul></li></ul></li></ul><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul><li>本质是语言和地区的差异性配置</li><li>资源<ul><li>字符串文本</li><li>货币单位</li><li>时间格式</li><li>背景图资源</li></ul></li><li>步骤<ul><li>实现LocalizationsDelegate，将所有需要转换的资源声明为其属性</li><li>手动翻译适配</li><li>app初始化时，将代理类设置为应用程序的翻译回调</li><li>官方的方案可以先放弃，借鉴Flutter i18n插件</li></ul></li><li>Flutteri18n<ul><li>as中安装此插件</li><li>pubspec.yaml中声明flutter_localizations sdk: flutter依赖</li><li>res/values/strings_en.arb文件是JSON格式的配置，存放标识符和翻译的键值对</li><li>修改上面的arb文件会自动生成lib/generated/i18n.dart(支持静态映射和动态传参)</li><li>初始化时2个重要参数localizationsDelegates翻译回调和supportedLocales所支持的语言配置</li><li>配置翻译回调时需要GlobalMaterialLocalizations.delegate与GlobalWidgetsLocalizations.delegate是官方widgets本身的翻译回调</li><li>S.of(context)直接获取arb文件中翻译的文案</li><li>翻译的代码只能在获取到context的前提下才能生效即MaterialApp的子widget，通过MaterialApp的onGenerateTitle回调设置title的国际化</li><li>ios程序有一套自建的语言环境管理机制，默认是英文，为了支持国际化需要额外配置Localization</li><li>原生工程配置<ul><li>在flutter框架启动前的配置需要在原生中配置</li><li>android中应用名称在AndroidManifest.xml中application的android:label属性</li><li>并且要在android/app/src/main/res中为要支持的语言创建values目录和strings.xml</li><li>ios工程中的应用名称是在Info.plist文件中，需要一个字符串资源引用的文件InfoPlist.strings并在Localizations中添加多语言</li></ul></li></ul></li></ul><h2 id="适配屏幕分辨率"><a href="#适配屏幕分辨率" class="headerlink" title="适配屏幕分辨率"></a>适配屏幕分辨率</h2><ul><li>适配屏幕旋转<ul><li>竖屏模式/横屏模式2套布局方案</li><li>OrientationBuilder的builder函数可以回调屏幕状态orientation</li><li>MediaQuery.of(context).orientation可以在OrientationBuilder外获取状态</li><li>SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);关闭横屏</li></ul></li><li>适配分辨率<ul><li>将屏幕空间划分为多个窗格即用原生类似的Fragment/ChildViewController概念抽象独立区块视觉功能</li><li>多窗格布局可以在平板电脑和横屏模式上，实现更好的视觉平衡效果</li><li>页面的实现和区块的实现是相互独立的，所以可以实现区块的复用</li><li>MediaQuery.of(context).size.width可获取屏幕宽度</li></ul></li></ul><h2 id="编译模式"><a href="#编译模式" class="headerlink" title="编译模式"></a>编译模式</h2><ul><li>运行模式<ul><li>Debug JIT</li><li>Release AOT</li><li>Profile Release+Profile(Observatory) flutter run –profile</li></ul></li><li>编译模式<ul><li>JIT <ul><li>JustInTime运行时编译</li><li>动态编译/将dart代码编译成中间代码scriptSnapshot最终生成DartKernel(可动态更新)需要在设备上用DartVM解释执行实现widget重建</li><li>可以模拟器和真机运行</li><li>打开assert断言/debug调试/observatory调试/hotReload热重载</li><li>没有优化应用启动速度/代码执行速度/二进制包大小/部署</li><li>flutter run –debug</li></ul></li><li>AOT<ul><li>AheadOfTime运行前编译</li><li>静态编译/生成设备可执行的二进制码</li><li>只能真机运行</li><li>关闭assert断言/debug调试/observatory调试/hotReload热重载</li><li>优化应用启动速度/代码执行速度/二进制包大小/部署</li><li>flutter run –release</li></ul></li></ul></li><li>运行时识别编译模式<ul><li>区别<ul><li>debug模式下打印详细日志，调用开发接口</li><li>release模式下记录精简日志，调用生产接口</li></ul></li><li>识别<ul><li>通过断言识别 assert((){ // DoSth4Debug; return true;}()) release下此代码被删除</li><li>通过DartVM提供的编译常数识别 if(kReleaseMode){}else{/ DoSth4Debug;} 代码总会被打包</li></ul></li></ul></li><li>分离配置环境<ul><li>抽象配置并用InheritedWidget封装</li><li>配置多入口(main_dev.dart/main.dart)</li><li>读取配置(运行时通过InheritedWidget将配置部分应用到子widget)</li><li>编译打包(通过不同选项构建不同的安装包flutter run -t|–target main[_dev].dart)</li></ul></li><li>原生配置差异<ul><li>android: build flavor</li><li>ios: 多个build target</li></ul></li></ul><h2 id="hotReload"><a href="#hotReload" class="headerlink" title="hotReload"></a>hotReload</h2><img src="/flutter/hotReload.png" title="热重载流程"><ul><li>热重载流程<ul><li>扫描工程改动</li><li>增量编译</li><li>推送更新</li><li>代码合并</li><li>Widget重建</li></ul></li><li>不支持热重载场景(此场景可以用hotRestart)<ul><li>代码编译错误</li><li>widget状态无法兼容</li><li>全局变量和静态属性的更改</li><li>main()里的更改</li><li>initState()里的更改</li><li>枚举和泛类型的更改</li></ul></li></ul><h2 id="工具链优化"><a href="#工具链优化" class="headerlink" title="工具链优化"></a>工具链优化</h2><ul><li>输出日志<ul><li>print() 涉及IO操作，耗费系统资源</li><li>debugPrint() 可以定制打印能力如debugPrint = (String msg,{int wrapWidth}{})</li></ul></li><li>断点调试<ul><li>标记断点</li><li>调试应用</li><li>查看信息</li></ul></li><li>布局调试<ul><li>DebugPainting<ul><li>布局边界展示辅助线</li><li>debugPaintSizeEnabled=true</li></ul></li><li>FlutterInspector 查看具体信息</li></ul></li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>性能问题<ul><li>GPU线程问题<ul><li>涉及widget裁剪/蒙层等多视图叠加渲染可main中使用checkerboardOffscreenLayers=true检查</li><li>缺少缓存导致静态图像反复绘制可main中使用checkerboardRasterCacheImages=true检查，有问题可使用RepaintBoundary缓存</li></ul></li><li>UI线程问题(cpu)<ul><li>OpenDevTools</li><li>Performance性能工具<ul><li>可记录cpu帧图(火焰图)展示cpu调用栈表示cpu繁忙程度</li><li>y轴表示调用栈，每一层都是一个函数，调用栈越深火焰越高，底部就是正在执行的函数，上方是父函数</li><li>x轴表示单位时间，在x轴越长表示执行时间越长，平顶表示函数可能存在性能问题</li></ul></li><li>有问题可以使用Isolate或compute()将耗时的操作移到主Isolate外完成</li></ul></li></ul></li><li>性能图层<ul><li>PerformanceOverlay</li><li>为采集真实的环境需要使用Profile分析模式</li><li>模拟器使用x86指令集/真机使用ARM指令集</li><li>flutter run –profile</li><li>性能图层展示了最近300帧的表现</li><li>为了保证60Hz的刷新频率，每一帧都要小于16ms(1/60)</li></ul></li><li>经验<ul><li>控制build方法耗时，将widget拆小越小越可复用</li><li>不要使用widget半透明效果，而使用图片代替</li><li>列表采用懒加载</li></ul></li></ul><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><ul><li>单元测试<ul><li>对软件中最小可测试单元(语句/函数/方法/类)进行验证</li><li>pubspec.yaml中需要依赖test包 dev_dependencies: test:</li><li>测试用例<ul><li>定义 test()/group()测试用例封装类</li><li>执行</li><li>验证 expect()将执行结果与预期进行比较</li></ul></li><li>模拟mock<ul><li>pubspec.yaml中依赖mockito</li><li>Mock类可模拟任何外部依赖</li><li>when().thenAnswer()当符合条件时进行注入</li></ul></li></ul></li><li>UI测试<ul><li>pubspec.yaml中使用flutter_test包提供核心框架</li><li>testWidgets(‘name’,(tester) async{})测试用例封装类</li><li>await tester.pumpWidget(MyApp())触发MyApp渲染</li><li>find.text(str)查找字符串文本为str的widget</li><li>find.byIcon(Icons.add)查找到按钮控件</li><li>await tester.tap()点击</li><li>await tester.pump()强制渲染刷新</li></ul></li></ul><h1 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h1><h2 id="生产异常捕获和信息采集"><a href="#生产异常捕获和信息采集" class="headerlink" title="生产异常捕获和信息采集"></a>生产异常捕获和信息采集</h2><ul><li><p>flutter异常</p><ul><li>try/catch捕获异常</li><li>dart程序不强制要求必须处理异常(dart用事件循环机制来运行任务，各任务状态独立)</li></ul></li><li><p>dart异常</p><ul><li><p>App异常</p><ul><li>同步异常 通过try/catch捕获</li><li>异步异常 通过Future的catchError语句捕获</li><li>集中管理 通过Zone.runZoned Zone表示代码执行的范围相当于沙盒,onError回调捕获错误，统一处理异常可以把main()的runApp()放到Zone中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">runZoned&lt;Future&lt;Null&gt;&gt;(() async &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;, onError: (error, stackTrace) async &#123;</span><br><span class="line"> //Do sth for error</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Framework异常</p><ul><li>触发了底层的try/catch，有异常就会渲染ErrorWidget</li><li>为了提高用户体验需要重写ErrorWidget.builder()自定义错误页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ErrorWidget.builder = (FlutterErrorDetails flutterErrorDetails)&#123;</span><br><span class="line">  return Scaffold(</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Text(&quot;Custom Error Widget&quot;),</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>FlutterError</p><ul><li>为了集中处理框架异常</li><li>FlutterError.onError在接收到框架异常时执行相应的回调</li><li>可以把flutter框架的异常统一转发到当前Zone里统一处理，这样就可以捕获应用所有异常<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FlutterError.onError = (FlutterErrorDetails details) async &#123;</span><br><span class="line">  //转发至Zone中</span><br><span class="line">  Zone.current.handleUncaughtError(details.exception, details.stack);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">runZoned&lt;Future&lt;Null&gt;&gt;(() async &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;, onError: (error, stackTrace) async &#123;</span><br><span class="line"> //Do sth for error</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>异常上报</p><ul><li>三方服务厂商<ul><li>友盟</li><li>bugly(社区比较活跃)</li><li>sentry(开源)</li></ul></li><li>bugly接入<ul><li>dart接口封装(实现单例的FlutterCrashPlugin的setup/postException的方法通道)</li><li>ios<ul><li>flutter_crash_plugin.podspec引入BuglySDK</li><li>实现原生接口FlutterCrashPlugin</li></ul></li><li>android<ul><li>build.gradle引入BuglySDK(crashreport和nativecrashreport)</li><li>实现原生接口FlutterCrashPlugin</li><li>AndroidManifest.xml中配置网络/日志读取等的权限注册</li></ul></li><li>关联应用配置<ul><li>ios只需要调用dart的setup就可以</li><li>android需要build.gradle中增加NDK架构支持和AndroidP的network_security_config.xml允许http传输数据并在AndroidManifest.xml中新增同名的网络安全配置</li></ul></li><li>接入插件<ul><li>pubspec.yaml中添加dependencies</li><li>main()里拦截到应用所有的错误后调用上报接口</li></ul></li></ul></li><li>底层异常<ul><li>flutter只能拦截dart层的异常</li><li>engine层大部分代码都是C++写的，一旦有异常需要借助原生系统的Crash监听机制</li><li>bugly也可以自动收集原生代码的crash，开发者可以把flutterEngine层的符号表下载下来，使用安卓的ndk-stack或ios的symbolicatecrash或atos命令对对crash堆栈进行解析得出引擎层崩溃的代码</li></ul></li></ul></li></ul><h2 id="线上质量"><a href="#线上质量" class="headerlink" title="线上质量"></a>线上质量</h2><ul><li><p>页面异常率</p><ul><li>异常发生次数/页面pv数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 异常发生次数</span><br><span class="line">int exceptionCount = 0; </span><br><span class="line">Future&lt;Null&gt; _reportError(dynamic error, dynamic stackTrace) async &#123;</span><br><span class="line">  exceptionCount++; //累加异常次数</span><br><span class="line">  FlutterCrashPlugin.postException(error, stackTrace);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;Null&gt; main() async &#123;</span><br><span class="line">  FlutterError.onError = (FlutterErrorDetails details) async &#123;</span><br><span class="line">    //将异常转发至Zone</span><br><span class="line">    Zone.current.handleUncaughtError(details.exception, details.stack);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  runZoned&lt;Future&lt;Null&gt;&gt;(() async &#123;</span><br><span class="line">    runApp(MyApp());</span><br><span class="line">  &#125;, onError: (error, stackTrace) async &#123;</span><br><span class="line">    //拦截异常</span><br><span class="line">    await _reportError(error, stackTrace);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页面打开次数</span><br><span class="line">int totalPV = 0;</span><br><span class="line">//导航监听器</span><br><span class="line">class MyObserver extends NavigatorObserver&#123;</span><br><span class="line">  @override</span><br><span class="line">  void didPush(Route route, Route previousRoute) &#123;</span><br><span class="line">    super.didPush(route, previousRoute);</span><br><span class="line">    totalPV++;//累加PV</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return  MaterialApp(</span><br><span class="line">    //设置路由监听</span><br><span class="line">       navigatorObservers: [</span><br><span class="line">         MyObserver(),</span><br><span class="line">       ],</span><br><span class="line">       home: HomePage(),</span><br><span class="line">    ); </span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 页面异常率计算</span><br><span class="line"></span><br><span class="line">double pageException() &#123;</span><br><span class="line">  if(totalPV == 0) return 0;</span><br><span class="line">  return exceptionCount/totalPV;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>页面帧率</p><ul><li>FPS(60Hz，因为VSync信号周期就是每秒60次)</li><li>window.onReportTimings()回调最近绘制帧所耗费的时间</li><li>FPS = 60 * 实际渲染的帧数 / 本来应该渲染的帧数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &apos;dart:ui&apos;;</span><br><span class="line"></span><br><span class="line">var orginalCallback;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">  //设置帧回调函数并保存原始帧回调函数</span><br><span class="line">  orginalCallback = window.onReportTimings;</span><br><span class="line">  window.onReportTimings = onReportTimings;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//仅缓存最近25帧绘制耗时</span><br><span class="line">const maxframes = 25;</span><br><span class="line">final lastFrames = List&lt;FrameTiming&gt;();</span><br><span class="line">//基准VSync信号周期</span><br><span class="line">const frameInterval = const Duration(microseconds: Duration.microsecondsPerSecond ~/ 60);</span><br><span class="line"></span><br><span class="line">void onReportTimings(List&lt;FrameTiming&gt; timings) &#123;</span><br><span class="line">  lastFrames.addAll(timings);</span><br><span class="line">  //仅保留25帧</span><br><span class="line">  if(lastFrames.length &gt; maxframes) &#123;</span><br><span class="line">    lastFrames.removeRange(0, lastFrames.length - maxframes);</span><br><span class="line">  &#125;</span><br><span class="line">  //如果有原始帧回调函数，则执行</span><br><span class="line">  if (orginalCallback != null) &#123;</span><br><span class="line">    orginalCallback(timings);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double get fps &#123;</span><br><span class="line">  int sum = 0;</span><br><span class="line">  for (FrameTiming timing in lastFrames) &#123;</span><br><span class="line">    //计算渲染耗时</span><br><span class="line">    int duration = timing.timestampInMicroseconds(FramePhase.rasterFinish) - timing.timestampInMicroseconds(FramePhase.buildStart);</span><br><span class="line">    //判断耗时是否在Vsync信号周期内</span><br><span class="line">    if(duration &lt; frameInterval.inMicroseconds) &#123;</span><br><span class="line">      sum += 1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      //有丢帧，向上取整</span><br><span class="line">      int count = (duration/frameInterval.inMicroseconds).ceil();</span><br><span class="line">      sum += count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return lastFrames.length/sum * 60;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>页面加载时长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class MyHomePage extends StatefulWidget &#123;</span><br><span class="line">  int startTime;</span><br><span class="line">  int endTime;</span><br><span class="line">  MyHomePage(&#123;Key key&#125;) : super(key: key) &#123;</span><br><span class="line">    //页面初始化时记录启动时间</span><br><span class="line">    startTime = DateTime.now().millisecondsSinceEpoch;</span><br><span class="line">  &#125;</span><br><span class="line">  @override</span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line">    //通过帧绘制回调获取渲染完成时间</span><br><span class="line">    WidgetsBinding.instance.addPostFrameCallback((_) &#123;</span><br><span class="line">      widget.endTime = DateTime.now().millisecondsSinceEpoch;</span><br><span class="line">      int timeSpend = widget.endTime - widget.startTime;</span><br><span class="line">      print(&quot;Page render time:$&#123;timeSpend&#125; ms&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="工程架构"><a href="#工程架构" class="headerlink" title="工程架构"></a>工程架构</h2><ul><li>组件化<ul><li>独立的功能进行拆分</li><li>可以是一个包/页面/UI控件/常用函数</li><li>基本原则<ul><li>单一性原则，清晰自己的边界专注做自己单一的事</li><li>抽象化原则，抽象接口设计，变化因子尽量自己维护</li><li>稳定性原则，外部依赖尽量稳定，如果不稳定考虑下一条原则</li><li>自完备性原则，尽量自给自足减少外部依赖，除非上一条满足</li></ul></li><li>实施步骤<ul><li>剥离并实现基础功能<ul><li>网络请求</li><li>组件中间件</li><li>第三方库封装(尽量不直接依赖外部代码)</li><li>UI组件</li></ul></li><li>抽象并划分业务模块<ul><li>粒度可先粗后细</li><li>后续分步迭代</li></ul></li><li>最小化服务能力</li></ul></li></ul></li><li>平台化<ul><li>组件化的升级，在组件化的基础上增加了统一分层和依赖治理的概念</li><li>组件化关注组件的独立性，平台化关注组件之间的关系合理性(尽量符合单向依赖原则)</li><li>如果下层确实要依赖上层可以增加中间层(EventBus/Provider/Router)</li></ul></li></ul><h2 id="构建打包发布环境"><a href="#构建打包发布环境" class="headerlink" title="构建打包发布环境"></a>构建打包发布环境</h2><ul><li>travisCI</li><li>ios逆向之重签名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 列出所有开发者证书文件</span><br><span class="line">security find-identity -p codesigning -v</span><br><span class="line"></span><br><span class="line"># 找一个开发环境配置文件生成entitlements.plist</span><br><span class="line">security cms -D -i XX.mobileprovision  &gt; profile.plist</span><br><span class="line">/usr/libexec/PlistBuddy -x -c &apos;Print :Entitlements&apos; profile.plist &gt; entitlements.plist</span><br><span class="line">cat entitlements.plist</span><br><span class="line"></span><br><span class="line"># 把准备好的开发环境配置文件复制到XX.app文件夹下</span><br><span class="line">cp XX.mobileprovision Payload/XX.app/embedded.mobileprovision</span><br><span class="line"></span><br><span class="line"># 修改包Info.plist中的Bundle Identifier与配置文件中的Bundle Identifier保持一致</span><br><span class="line">/usr/libexec/PlistBuddy -c &quot;Set :CFBundleIdentifier com.XX.XX&quot; Payload/XX.app/Info.plist</span><br><span class="line"></span><br><span class="line"># 移除之前的签名文件夹</span><br><span class="line">rm -rf Payload/XX.app/_CodeSignature</span><br><span class="line"></span><br><span class="line"># 重签名framework</span><br><span class="line">/usr/bin/codesign --force --sign 84A4B9F1F902462CC33D01E9FF72C1BA04A97653 --entitlements entitlements.plist /Payload/XX.app/Frameworks/JSONModel.framework</span><br><span class="line"></span><br><span class="line"># 重签名app执行文件</span><br><span class="line">/usr/bin/codesign --force --sign 84A4B9F1F902462CC33D01E9FF72C1BA04A97653 --entitlements entitlements.plist Payload/XX.app/XX</span><br><span class="line"></span><br><span class="line"># 查看app签名信息</span><br><span class="line">codesign -vv -d Payload/XX.app</span><br><span class="line"></span><br><span class="line"># 安装调试</span><br><span class="line">ios-deploy -d -b Payload/XX.app</span><br><span class="line"></span><br><span class="line"># 打包</span><br><span class="line">zip -qry ppdest.ipa Payload</span><br><span class="line">rm -rf Payload/</span><br></pre></td></tr></table></figure></li></ul><h2 id="构建混合开发框架"><a href="#构建混合开发框架" class="headerlink" title="构建混合开发框架"></a>构建混合开发框架</h2><ul><li><p>混合开发</p><ul><li>原生负责提供容器和基础能力支撑</li><li>flutter负责业务和大部分渲染工作</li></ul></li><li><p>混合开发工程架构</p><ul><li>依赖分层管理<ul><li>原生对flutter的依赖抽象为依赖flutter模块封装的原生组件</li><li>flutter对原生的依赖抽象为依赖插件封装的原生行为</li></ul></li><li>flutter模块定义为原生工程的独立业务层，以原生基础业务层向flutter模块提供业务通用能力，原生基础能力层向flutter模块提供基础功能支撑 <img src="/flutter/projectArch.png" title="混合开发工程架构"></li></ul></li><li><p>混合开发工作模式</p><img src="/flutter/workflow.png" title="混合开发工作流"><img src="/flutter/cmd.png" title="flutter命令行"></li><li><p>原生插件依赖管理</p><ul><li>ios的AFNetworking</li><li>android的OkHttp</li></ul></li><li><p>flutter模块工程依赖管理</p><ul><li>使用flutter插件(pubspec.yaml)</li><li>模块工程的ios构建产物封装以提供原生ios工程依赖管理</li><li>模块工程的android构建产物封装以提供原生android工程依赖管理</li><li>flutter模块工程把所有原生的依赖都交给了原生工程管理所以其构建产物并不会携带原生插件的封装实现，我们需要遍历模块工程所使用的原生依赖组件，并为他们逐一生成插件代码对应的原生组件封装</li></ul></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul><li>TabBar<ul><li>TabBar 默认会在 widget 树中向上寻找离它最近的一个 DefaultTabController节点作为自己的 TabController</li><li>如果手动创建 TabController，那么必须将它作为参数传给 TabBar</li></ul></li><li>FocusScope.of(context).requestFocus(myFocusNode)</li><li>flutter drive –target=test_driver/app.dart</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;flutter开发起步&quot;&gt;&lt;a href=&quot;#flutter开发起步&quot; class=&quot;headerlink&quot; title=&quot;flutter开发起步&quot;&gt;&lt;/a&gt;flutter开发起步&lt;/h1&gt;&lt;h2 id=&quot;核心&quot;&gt;&lt;a href=&quot;#核心&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>k8s-mooc</title>
    <link href="https://prief.github.io/k8s-mooc/"/>
    <id>https://prief.github.io/k8s-mooc/</id>
    <published>2019-09-09T14:37:42.000Z</published>
    <updated>2020-05-19T15:13:11.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="k8s快速入门"><a href="#k8s快速入门" class="headerlink" title="k8s快速入门"></a>k8s快速入门</h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul><li>kubernetes 舵手</li><li>image</li><li>container</li><li>pod<ul><li>包含1个或多个container</li><li>container之间共享网络，ip</li></ul></li><li>replicaset</li><li>deployment</li><li>service<ul><li>通过labelSelector选择后端服务</li><li>通过clusterIp暴露服务</li></ul></li><li><a href="https://k8s.imroc.io/" target="_blank" rel="noopener">https://k8s.imroc.io/</a></li></ul><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><ul><li>master<ul><li>etcd</li><li>apiServer</li><li>scheduler</li><li>controllerManager</li></ul></li><li>worker<ul><li>kubelet</li><li>kube-proxy</li><li>docker</li></ul></li></ul><h4 id="认证授权"><a href="#认证授权" class="headerlink" title="认证授权"></a>认证授权</h4><ul><li>https<ul><li>ssl/tls</li><li>CA(浏览器的公共CA和自有CA)</li></ul></li><li>k8s认证<ul><li>集群外访问apiServer<ul><li>客户端证书认证(kubectl,tls双向认证)</li><li>BearerToken认证(apiServer内置了可信任的token)</li></ul></li><li>集群内pod访问apiServer<ul><li>serviceAccount<ul><li>三部分(namespace,token,ca)</li><li>上面的信息通过目录挂载到pod中，应用通过指定目录使用</li></ul></li></ul></li></ul></li><li>授权<ul><li>ABAC</li><li>webHook</li><li>RBAC(最新的主流方案，roleBasedAccessControl)<ul><li>User<ul><li>user</li><li>serviceAccount</li></ul></li><li>Role<ul><li>namespace</li><li>name</li><li>resource</li><li>verbs</li></ul></li><li>Authority<ul><li>resource</li><li>verbs</li></ul></li><li>RBAC<ul><li>Role/RoleBinding</li><li>ClusterRole/ClusterRoleBinding</li></ul></li></ul></li></ul></li><li>准入控制<ul><li>AdmisionControl，类似java中的filter</li><li>AlwaysAdmit</li><li>AlwaysDeny</li><li>ServiceAccount</li><li>DenyEscolatingExec</li></ul></li></ul><h4 id="集群搭建方案对比"><a href="#集群搭建方案对比" class="headerlink" title="集群搭建方案对比"></a>集群搭建方案对比</h4><ul><li>kubeadm<ul><li>优雅，几乎所有组件都在pod中</li><li>简单</li><li>支持高可用</li><li>升级方便</li></ul></li><li>二进制<ul><li>容易维护</li><li>灵活</li><li>支持高可用</li><li>升级方便</li><li>证书、配置等需要一步步操作</li></ul></li></ul><h3 id="kubeadm方式搭建"><a href="#kubeadm方式搭建" class="headerlink" title="kubeadm方式搭建"></a>kubeadm方式搭建</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li><p>统一主机名</p><ul><li>hostname</li><li>hostnamectl set-hostname name</li><li>vi /etc/hosts</li></ul></li><li><p>安装依赖包</p><ul><li>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></li><li>rhel更换免费的yum源 </li><li>yum install -y epel-release &amp;&amp; yum clean all &amp;&amp; yum makecache &amp;&amp; yum update -y</li><li>yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp ntpdate</li><li>ntpdate ip</li></ul></li><li><p>主机配置</p><ul><li>关闭防火墙 systemctl stop firewalld &amp;&amp; systemctl disable firewalld</li><li>关闭swap  swapoff -a &amp;&amp; sed -i &#39;/swap/s/^(.*)$/# \1/g&#39; /etc/fstab</li><li>重置iptables iptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT &amp;&amp; service iptables save</li><li>关闭selinux setenforce 0 &amp;&amp; sed -i ‘s/^SELINUX=.*$/SELINUX=disabled/‘ /etc/selinux/config</li><li>关闭dnsmasq systemctl stop dnsmasq &amp;&amp; systemctl disable dnsmasq</li><li>配置k8s系统文件 vim /etc/sysctl.d/kubernetes.conf &amp;&amp; sysctl -p /etc/sysctl.d/kubernetes.conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装docker</p><ul><li>mkdir -p /opt/kubernetes/docker &amp;&amp; cd /opt/kubernetes/docker</li><li>wget <a href="http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-selinux-17.03.1.ce-1.el7.centos.noarch.rpm" target="_blank" rel="noopener">http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-selinux-17.03.1.ce-1.el7.centos.noarch.rpm</a></li><li>wget <a href="http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-debuginfo-17.03.1.ce-1.el7.centos.x86_64.rpm" target="_blank" rel="noopener">http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-debuginfo-17.03.1.ce-1.el7.centos.x86_64.rpm</a></li><li>wget <a href="http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-17.03.1.ce-1.el7.centos.x86_64.rpm" target="_blank" rel="noopener">http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-17.03.1.ce-1.el7.centos.x86_64.rpm</a></li><li>yum remove -y docker* container-selinux</li><li>yum localinstall -y *.rpm</li><li>systemctl enable docker</li><li>df -h # 查看空间较大的分区并在分区下创建dockerdata目录准备存放docker数据</li><li>#设置docker数据目录并启动docker服务 systemctl start docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;graph&quot;: &quot;/var/lib/docker&quot;,</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://4vo01fev.mirror.aliyuncs.com&quot;],</span><br><span class="line">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">    &quot;log-opts&quot;: &#123;</span><br><span class="line">        &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">    &quot;storage-opts&quot;: [</span><br><span class="line">        &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=&quot; &quot;HTTPS_PROXY=&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装必要工具</p><ul><li>kubeadm/kubelet/kubectl</li><li>配置yum源</li><li>yum install -y kubelet kubeadm kubectl –disableexcludes=kubernetes</li><li>systemctl enable kubelet &amp;&amp; systemctl start kubelet</li><li>source &lt;(kubectl completion bash)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.0 </span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0</span><br><span class="line">docker pull coredns/coredns:1.6.5</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.0 k8s.gcr.io/kube-apiserver:v1.17.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.0 k8s.gcr.io/kube-controller-manager:v1.17.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.0 k8s.gcr.io/kube-scheduler:v1.17.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.0 k8s.gcr.io/kube-proxy:v1.17.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">docker tag coredns/coredns:1.6.5 k8s.gcr.io/coredns:1.6.5</span><br><span class="line"></span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.0 </span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.0</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1</span><br><span class="line">docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0</span><br><span class="line">docker rmi coredns/coredns:1.6.5</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="高可用部署"><a href="#高可用部署" class="headerlink" title="高可用部署"></a>高可用部署</h4><ul><li><p>实现apiServer的高可用与负载均衡，也可只用keepalived</p><ul><li>yum install -y socat keepalived haproxy ipvsadm</li><li>systemctl enable haproxy &amp;&amp; systemctl enable keepalived</li><li>systemctl start haproxy &amp;&amp; systemctl start keepalived</li><li>journalctl -f -u keepalived </li><li>ip a # 查看虚拟ip<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"># /etc/keepalived/keepalived.conf</span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id master01|master02|master03</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check &#123;</span><br><span class="line">    script /etc/keepalived/check_haproxy.sh｜check_apiserver.sh </span><br><span class="line">    interval 3</span><br><span class="line">    # weight -2 如果脚本非零退出，则权重-2，可动态配置权重,与check_apiserver.sh 搭配</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER|BACKUP|BACKUP</span><br><span class="line">    interface ens160|ens160|ens160</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 100|90|80</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.18.3.200</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;   </span><br><span class="line">        check</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#/etc/keepalived/check_haproxy.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">NUM=`ps -C haproxy --no-header |wc -l`</span><br><span class="line">if [ $NUM -eq 0 ];then</span><br><span class="line">    systemctl stop keepalived</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#/etc/keepalived/check_apiserver.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">errorExit()&#123;</span><br><span class="line">    echo &quot;*** $*&quot; 1&gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line">curl --silent --max-time 2 --insecure https://localhost:6443/ -o /dev/null || errorExit &quot;Error https://localhost:6443&quot;</span><br><span class="line">if ip addr | grep -q 10.18.3.200; then</span><br><span class="line">    curl --silent --max-time 2 --insecure https://10.18.3.200:6443 -o /dev/null || errorExit &quot;Error https://10.18.3.200:6443&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#/etc/haproxy/haproxy.cfg</span><br><span class="line">global</span><br><span class="line">    log         127.0.0.1 local3</span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     32768</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    nbproc      1</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode                    tcp</span><br><span class="line">    log                     global</span><br><span class="line">    option                  tcplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout check           10s</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">    mode   http</span><br><span class="line">    bind :8888</span><br><span class="line">    stats   enable</span><br><span class="line">    stats   uri     /admin</span><br><span class="line">    stats   auth    admin:admin</span><br><span class="line">    stats   admin   if TRUE</span><br><span class="line"></span><br><span class="line">frontend  k8s_https *:8443</span><br><span class="line">    mode      tcp</span><br><span class="line">    maxconn      2000</span><br><span class="line">    default_backend     https_sri</span><br><span class="line"></span><br><span class="line">backend https_sri</span><br><span class="line">    balance      roundrobin</span><br><span class="line">    server master1-api 10.18.3.178:6443  check inter 10000 fall 2 rise 2 weight 1</span><br><span class="line">    server master2-api 10.18.3.179:6443  check inter 10000 fall 2 rise 2 weight 1</span><br><span class="line">    server master3-api 10.18.3.180:6443  check inter 10000 fall 2 rise 2 weight 1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>部署master01</p><ul><li>kubeadm config print init-defaults &gt; ~/kubeadm_master01.yaml #默认配置文件</li><li>kubeadm config images list –config  ~/kubeadm_master01.yaml #查看所需镜像</li><li>kubeadm config images pull –config  ~/kubeadm_master01.yaml #拉取所需镜像，也可手动拉取</li><li>kubeadm init –control-plane-endpoint “LOAD_BALANCER_DNS:LOAD_BALANCER_PORT” –pod-network-cidr 10.96.0.0/16 –upload-certs</li><li>mkdir -p $HOME/.kube</li><li>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</li><li>sudo chown $(id -u):$(id -g) $HOME/.kube/config</li><li>kubectl get pods –all-namespaces #测试</li></ul></li><li><p>部署master02|master03</p><ul><li>kubeadm join 10.18.3.200:8443 –token XXX –discovery-token-ca-cert-hash XXX –control-plane –certificate-key XXX</li><li>mkdir -p $HOME/.kube</li><li>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</li><li>sudo chown $(id -u):$(id -g) $HOME/.kube/config</li><li>kubectl get pods –all-namespaces #测试</li></ul></li><li><p>部署worker</p><ul><li>kubeadm join 10.18.3.200:8443 –token XXX –discovery-token-ca-cert-hash XXX</li><li>kubeadm token create –print-join-command  #重新生成token</li></ul></li><li><p>部署网络插件</p><ul><li>#任意主节点下载配置文件并更改cidr</li><li>kubectl apply -f calico.yaml</li><li>kubectl get pods –all-namespaces #测试</li></ul></li><li><p>检测</p><ul><li>kubectl get nodes</li><li>kubectl cluster-info</li><li>kubectl get cs</li><li>kubectl exec -n kube-system etcd-m1 – etcdctl –cacert=”/etc/kubernetes/pki/etcd/ca.crt” –cert=”/etc/kubernetes/pki/etcd/peer.crt” –key=”/etc/kubernetes/pki/etcd/peer.key” –endpoints=<a href="https://10.18.3.178:2379" target="_blank" rel="noopener">https://10.18.3.178:2379</a> member list #查看etcd集群</li><li>journalctl -f #查看日志</li></ul></li></ul><h4 id="可用性测试"><a href="#可用性测试" class="headerlink" title="可用性测试"></a>可用性测试</h4><ul><li>kubectl apply -f nginx-ds.yaml  </li><li>ping podIp</li><li>curl svcIp:svcPort</li><li>curl nodeIp:nodePort</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds-svc</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx-ds-svc</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx-ds</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><ul><li>kubectl apply -f pod-nginx.yaml</li><li>kubectl exec -it nginx bash</li><li>cat /etc/resolve.conf #查看DNS</li><li>ping svc-name #如果不通可以按如下修改proxy模式为ipvs</li><li>kubectl logs kube-proxy-hash -n kube-system #查看proxy模式</li><li>kubectl edit cm kube-proxy -n kube-system #默认kube-proxy模式为iptables，可修改mode为ipvs，同时需要ipvs模块配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: my-nginx</span><br><span class="line">    image: nginx:1.7.9</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line"></span><br><span class="line"># ipvs模块配置</span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">#!/bin/bash </span><br><span class="line">modprobe -- ip_vs </span><br><span class="line">modprobe -- ip_vs_rr </span><br><span class="line">modprobe -- ip_vs_wrr </span><br><span class="line">modprobe -- ip_vs_sh </span><br><span class="line">modprobe -- nf_conntrack_ipv4 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#配置开机自加载并执行生效</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">#查看是否加载</span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line">#重启kube-proxy</span><br><span class="line">kubectl get pod -n kube-system | grep kube-proxy |awk &apos;&#123;system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)&#125;&apos;</span><br></pre></td></tr></table></figure><h4 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h4><ul><li>kubectl apply -f dashboard.yaml</li><li>bash dashboardToken.sh # 默认只支持token登陆<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># dashboardToken.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">kubectl describe secret -n kubernetes-dashboard $(kubectl get secret -n kubernetes-dashboard | grep dashboard-token | awk &apos;&#123;print $1&#125;&apos;) | grep -E &apos;^token&apos; | awk &apos;&#123;print $2&#125;&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gen-ingress-secret.sh</span><br><span class="line">openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout ingress.test.com.key -out ingress.test.com.pem -subj &quot;/CN=ingress.test.com&quot;</span><br><span class="line"></span><br><span class="line">kubectl create secret tls ingress-secret  --cert ingress.test.com.pem --key ingress.test.com.key</span><br><span class="line"></span><br><span class="line">kubectl  get secret -n kube-system | grep ingress</span><br></pre></td></tr></table></figure></li></ul><h3 id="二进制方式搭建"><a href="#二进制方式搭建" class="headerlink" title="二进制方式搭建"></a>二进制方式搭建</h3><h4 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li><p>统一主机名</p><ul><li>hostname</li><li>hostnamectl set-hostname name</li><li>vi /etc/hosts</li></ul></li><li><p>rhel更换yum</p><ul><li>rpm -qa | grep yum | xargs rpm -e –nodeps</li><li>mkdir yumrpm &amp;&amp; cd yumrpm</li><li>wget <a href="https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-3.4.3-163.el7.centos.noarch.rpm" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-3.4.3-163.el7.centos.noarch.rpm</a></li><li>wget <a href="https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</a></li><li>wget <a href="https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-utils-1.1.31-52.el7.noarch.rpm" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-utils-1.1.31-52.el7.noarch.rpm</a></li><li>wget <a href="https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-updateonboot-1.1.31-52.el7.noarch.rpm" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-updateonboot-1.1.31-52.el7.noarch.rpm</a></li><li>wget <a href="https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-52.el7.noarch.rpm" target="_blank" rel="noopener">https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-52.el7.noarch.rpm</a></li><li>rpm -ivh yum*</li></ul></li><li><p>安装依赖包</p><ul><li>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></li><li>yum install -y epel-release &amp;&amp; yum clean all &amp;&amp; yum makecache</li><li>yum update -y</li><li>yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp ntpdate</li><li>ntpdate ip</li></ul></li><li><p>主机配置</p><ul><li>关闭防火墙 systemctl stop firewalld &amp;&amp; systemctl disable firewalld</li><li>关闭swap  swapoff -a &amp;&amp; sed -i ‘/swap/s/^(.*)$/# \1/g’ /etc/fstab</li><li>重置iptables iptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT</li><li>关闭selinux setenforce 0 &amp;&amp; sed -i ‘s/^SELINUX=.*$/SELINUX=disabled/‘ /etc/selinux/config</li><li>关闭dnsmasq systemctl stop dnsmasq &amp;&amp; systemctl disable dnsmasq</li><li>配置k8s系统文件 vim /etc/sysctl.d/kubernetes.conf &amp;&amp; sysctl -p /etc/sysctl.d/kubernetes.conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装docker</p><ul><li>mkdir -p /opt/kubernetes/docker &amp;&amp; cd /opt/kubernetes/docker</li><li>wget <a href="http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-selinux-17.03.1.ce-1.el7.centos.noarch.rpm" target="_blank" rel="noopener">http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-selinux-17.03.1.ce-1.el7.centos.noarch.rpm</a></li><li>wget <a href="http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-debuginfo-17.03.1.ce-1.el7.centos.x86_64.rpm" target="_blank" rel="noopener">http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-debuginfo-17.03.1.ce-1.el7.centos.x86_64.rpm</a></li><li>wget <a href="http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-17.03.1.ce-1.el7.centos.x86_64.rpm" target="_blank" rel="noopener">http://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-17.03.1.ce-1.el7.centos.x86_64.rpm</a></li><li>yum remove -y docker* container-selinux</li><li>yum localinstall -y *.rpm</li><li>systemctl enable docker</li><li>df -h # 查看空间较大的分区并在分区下创建dockerdata目录准备存放docker数据</li><li>#设置docker数据目录并启动docker服务 systemctl start docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;graph&quot;: &quot;/var/lib/docker&quot;,</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://4vo01fev.mirror.aliyuncs.com&quot;],</span><br><span class="line">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">    &quot;log-opts&quot;: &#123;</span><br><span class="line">        &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">    &quot;storage-opts&quot;: [</span><br><span class="line">        &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=&quot; &quot;HTTPS_PROXY=&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置发布机免密登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id .ssh/id_rsa.pub user@ip</span><br></pre></td></tr></table></figure></li><li><p>准备二进制文件</p><ul><li>master<ul><li>etcd</li><li>etcdctl</li><li>kube-apiserver</li><li>kube-controller-manager</li><li>kube-scheduler</li><li>kubeadm</li><li>kubectl</li></ul></li><li>worker<ul><li>kubelet</li><li>kube-proxy</li></ul></li></ul></li><li><p>分发到各节点并配置PATH</p><ul><li>scp </li><li>echo “PATH=$PATH:/opt/k8s/bin” &gt;&gt; ~/.bashrc</li></ul></li><li><p>配置各服务参数</p></li></ul><h4 id="高可用部署-1"><a href="#高可用部署-1" class="headerlink" title="高可用部署"></a>高可用部署</h4><ul><li><p>CA证书</p><ul><li>安装工具，cfssl非常好用的CA工具，用来生成证书和密钥文件</li><li>生成根证书，后续所有的证书都由根证书签名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># getCfssl.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">mkdir -p ~/cfssl/bin</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O ~/cfssl/bin/cfssl</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O ~/cfssl/bin/cfssljson</span><br><span class="line">chmod +x ~/cfssl/bin/cfssl ~/cfssl/bin/cfssljson</span><br><span class="line">echo &quot;PATH=$PATH:~/cfssl/bin/&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">cfssl version</span><br><span class="line"></span><br><span class="line"># genCA.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">mkdir -p ~/cfssl/my/ &amp;&amp; cd ~/cfssl/my/</span><br><span class="line"># 生成证书ca.pem和私钥ca-key.pem</span><br><span class="line"># csr.json可参考官网</span><br><span class="line">cfssl genkey -initca csr.json | cfssljson -bare ca</span><br><span class="line"># 把根证书拷贝到主节点</span><br><span class="line">ssh root@MASTER_IP &quot;mkdir -p /etc/kubernetes/pki/&quot;</span><br><span class="line">scp ca*.pem root@MASTER_IP:/etc/kubernetes/pki/</span><br></pre></td></tr></table></figure></li></ul></li><li><p>etcd集群(3台master)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wget &apos;https://github.com/etcd-io/etcd/releases/download/v3.3.18/etcd-v3.3.18-linux-amd64.tar.gz&apos;</span><br><span class="line"></span><br><span class="line"># 生成etcd的证书和私钥</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span><br><span class="line"></span><br><span class="line"># 分发到每个etcd节点</span><br><span class="line">scp etcd*.pem root@MASTER_IP:/etc/kubernetes/pki/</span><br><span class="line"></span><br><span class="line"># 配置service 文件</span><br><span class="line">scp etcd.service MASTERIP:/etc/systemd/system/</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl restart etcd</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">journalctl -f -u etcd</span><br><span class="line"></span><br><span class="line"># 查看端口</span><br><span class="line">netstat -tunlp ｜ grep 23(79|80)</span><br></pre></td></tr></table></figure></li><li><p>apiserver集群(3台master)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 生成证书和私钥</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span><br><span class="line"></span><br><span class="line"># 分发到每个etcd节点</span><br><span class="line">scp kubernetes*.pem root@MASTER_IP:/etc/kubernetes/pki/</span><br><span class="line"></span><br><span class="line"># 配置service 文件</span><br><span class="line">scp kube-apiserver.service MASTERIP:/etc/systemd/system/</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable kube-apiserver &amp;&amp; systemctl restart kube-apiserver</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">journalctl -f -u kube-apiserver</span><br><span class="line"></span><br><span class="line"># 查看端口</span><br><span class="line">netstat -tunlp ｜ grep 6443</span><br></pre></td></tr></table></figure></li><li><p>部署keepalived(apiserver高可用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 一般部署一主一备2个节点即可</span><br><span class="line">yum install -y keepalived</span><br><span class="line"></span><br><span class="line"># 创建配置文件 /etc/keepalived/keepalived.conf</span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id master01|master02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check &#123;</span><br><span class="line">    script /etc/keepalived/check_apiserver.sh </span><br><span class="line">    interval 3</span><br><span class="line">    weight -2 如果脚本非零退出，则权重-2，与check_apiserver.sh 搭配</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER|BACKUP</span><br><span class="line">    interface ens160|ens160</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 100|90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        VIP</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;   </span><br><span class="line">        check</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建监控脚本 /etc/keepalived/check_apiserver.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">errorExit()&#123;</span><br><span class="line">    echo &quot;*** $*&quot; 1&gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line">curl --silent --max-time 2 --insecure https://localhost:6443/ -o /dev/null || errorExit &quot;Error https://localhost:6443&quot;</span><br><span class="line">if ip addr | grep -q VIP; then</span><br><span class="line">    curl --silent --max-time 2 --insecure https://VIP:6443 -o /dev/null || errorExit &quot;Error https://VIP:6443&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable keepalived &amp;&amp; systemctl restart keepalived</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">journalctl -f -u keepalived</span><br><span class="line"></span><br><span class="line"># 访问服务</span><br><span class="line">curl --insecure https://VIP:6443/</span><br></pre></td></tr></table></figure></li><li><p>kubectl</p><ul><li>是k8s集群的命令行管理工具</li><li>默认从 ~/.kube/config文件读取apiserver的地址、证书、token等信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 创建admin证书和私钥</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line"></span><br><span class="line"># 创建kubeconfig文件</span><br><span class="line"># 设置集群参数</span><br><span class="line">kubectl config set-cluster kubernetes</span><br><span class="line"># 设置客户端认证参数</span><br><span class="line">kubectl config set-credentials admin</span><br><span class="line"># 设置上下文参数</span><br><span class="line">kubectl config set-context kubernetes</span><br><span class="line"># 设置默认上下文</span><br><span class="line">kubectl config use-context kubernetes</span><br><span class="line"># 分发到目标节点</span><br><span class="line">scp kube.config root@MASTERIP:~/.kube/config</span><br><span class="line"></span><br><span class="line"># 授予k8s证书访问kubeletAPI的权限</span><br><span class="line">kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">kubectl cluster-info</span><br><span class="line">kubectl get all --all-namespaces</span><br><span class="line">kubectl get cs|componentstatuses</span><br></pre></td></tr></table></figure></li></ul></li><li><p>controller-manager</p><ul><li>启动后通过竞选产生一个leader，其他节点阻塞</li><li>当leader不可用后剩余节点再竞选，保证高可用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 创建证书和私钥</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes cm-csr.json | cfssljson -bare controller-manager</span><br><span class="line"></span><br><span class="line"># 分发到目标节点</span><br><span class="line">scp controller-manager*.pem root@MASTERIP:/etc/kubernetes/pki/</span><br><span class="line"></span><br><span class="line"># 创建kubeconfig文件</span><br><span class="line"># 设置集群参数</span><br><span class="line">kubectl config set-cluster kubernetes</span><br><span class="line"># 设置客户端认证参数</span><br><span class="line">kubectl config set-credentials system:kube-controller-manager</span><br><span class="line"># 设置上下文参数</span><br><span class="line">kubectl config set-context system:kube-controller-manager</span><br><span class="line"># 设置默认上下文</span><br><span class="line">kubectl config use-context system:kube-controller-manager</span><br><span class="line"># 分发到目标节点</span><br><span class="line">scp controller-manager.kubeconfig root@MASTERIP:/etc/kubernetes/</span><br><span class="line"></span><br><span class="line"># 创建service文件</span><br><span class="line"># vi /etc/systemd/system/kube-controller-manager.service</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable kube-controller-manager &amp;&amp; systemctl restart kube-controller-manager</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">journalctl -f -u kube-controller-manager</span><br><span class="line"></span><br><span class="line"># 查看leader</span><br><span class="line">kubectl get endpoints kube-controller-manager -n kube-system -o yaml</span><br></pre></td></tr></table></figure></li></ul></li><li><p>scheduler</p><ul><li>启动后通过竞选产生一个leader，其他节点阻塞</li><li>当leader不可用后剩余节点再竞选，保证高可用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 创建证书和私钥</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes scheduler-csr.json | cfssljson -bare kube-scheduler</span><br><span class="line"></span><br><span class="line"># 分发到目标节点</span><br><span class="line">scp kube-scheduler*.pem root@MASTERIP:/etc/kubernetes/pki/</span><br><span class="line"></span><br><span class="line"># 创建kubeconfig文件</span><br><span class="line"># 设置集群参数</span><br><span class="line">kubectl config set-cluster kubernetes</span><br><span class="line"># 设置客户端认证参数</span><br><span class="line">kubectl config set-credentials system:kube-scheduler</span><br><span class="line"># 设置上下文参数</span><br><span class="line">kubectl config set-context system:kube-scheduler</span><br><span class="line"># 设置默认上下文</span><br><span class="line">kubectl config use-context system:kube-scheduler</span><br><span class="line"># 分发到目标节点</span><br><span class="line">scp kube-scheduler.kubeconfig root@MASTERIP:/etc/kubernetes/</span><br><span class="line"></span><br><span class="line"># 创建service文件</span><br><span class="line"># vi /etc/systemd/system/kube-scheduler.service</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable kube-scheduler &amp;&amp; systemctl restart kube-scheduler</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">journalctl -f -u kube-scheduler</span><br><span class="line"></span><br><span class="line"># 查看leader</span><br><span class="line">kubectl get endpoints kube-scheduler -n kube-system -o yaml</span><br></pre></td></tr></table></figure></li></ul></li><li><p>kubelet(worker节点)</p><ul><li>下载所需镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 创建bootstrap配置文件</span><br><span class="line"># 创建token</span><br><span class="line">export BOOTSTRAP_TOKEN=$(kubeadm token create ) </span><br><span class="line"># 设置集群参数</span><br><span class="line">kubectl config set-cluster kubernetes</span><br><span class="line"># 设置客户端认证参数</span><br><span class="line">kubectl config set-credentials kubelet-bootstrap</span><br><span class="line"># 设置上下文参数</span><br><span class="line">kubectl config set-context default </span><br><span class="line"># 设置默认上下文</span><br><span class="line">kubectl config use-context default </span><br><span class="line"># 分发到目标节点</span><br><span class="line">scp kubelet-bootstrap.kubeconfig root@WORKER:/etc/kubernetes/kubelet-bootstrap.kubeconfig</span><br><span class="line"># 分发CA到worker节点</span><br><span class="line">scp ca.pem root@WORKER:/etc/kubernetes/pki/</span><br><span class="line"></span><br><span class="line"># 分发kubelet配置文件</span><br><span class="line">scp kubelet.config.json root@WORKER:/etc/kubernetes/</span><br><span class="line"></span><br><span class="line"># 设置kubelet服务文件</span><br><span class="line">vi /etc/systemd/system/kubelet.service</span><br><span class="line"></span><br><span class="line"># bootstrap授权</span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable kubelet &amp;&amp; systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"># master上通过请求</span><br><span class="line">kubectl get csr</span><br><span class="line">kubectl certificate approve &lt;name&gt;</span><br><span class="line"></span><br><span class="line"># worer节点日志</span><br><span class="line">journalctl -f</span><br></pre></td></tr></table></figure></li></ul></li><li><p>kube-proxy（所有节点）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 创建证书和私钥</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy </span><br><span class="line"></span><br><span class="line"># 创建kubeconfig文件</span><br><span class="line"># 设置集群参数</span><br><span class="line">kubectl config set-cluster kubernetes</span><br><span class="line"># 设置客户端认证参数</span><br><span class="line">kubectl config set-credentials kube-proxy</span><br><span class="line"># 设置上下文参数</span><br><span class="line">kubectl config set-context default</span><br><span class="line"># 设置默认上下文</span><br><span class="line">kubectl config use-context default</span><br><span class="line"># 分发到目标节点</span><br><span class="line">scp kube-proxy.kubeconfig root@NODEIP:/etc/kubernetes/</span><br><span class="line"></span><br><span class="line"># 创建service文件</span><br><span class="line"># vi /etc/systemd/system/kube-proxy.service</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl enable kube-proxy &amp;&amp; systemctl restart kube-proxy</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">journalctl -f -u kube-proxy</span><br></pre></td></tr></table></figure></li><li><p>部署插件</p><ul><li>calico</li><li>coredns</li></ul></li></ul><h4 id="可用性测试-1"><a href="#可用性测试-1" class="headerlink" title="可用性测试"></a>可用性测试</h4><ul><li>kubectl apply -f nginx-ds.yaml</li><li>ping podIp</li><li>curl svcIp:svcPort</li><li>curl nodeIp:nodePort</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds-svc</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx-ds-svc</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx-ds</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><ul><li>kubectl apply -f pod-nginx.yaml</li><li>kubectl exec -it nginx bash</li><li>cat /etc/resolve.conf #查看DNS</li><li>ping svc-name #如果不通可以按如下修改proxy模式为ipvs</li><li>kubectl logs kube-proxy-hash -n kube-system #查看proxy模式</li><li>kubectl edit cm kube-proxy -n kube-system #默认kube-proxy模式为iptables，可修改mode为ipvs，同时需要ipvs模块配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: my-nginx</span><br><span class="line">    image: nginx:1.7.9</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line"></span><br><span class="line"># ipvs模块配置</span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">#!/bin/bash </span><br><span class="line">modprobe -- ip_vs </span><br><span class="line">modprobe -- ip_vs_rr </span><br><span class="line">modprobe -- ip_vs_wrr </span><br><span class="line">modprobe -- ip_vs_sh </span><br><span class="line">modprobe -- nf_conntrack_ipv4 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#配置开机自加载并执行生效</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">#查看是否加载</span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line">#重启kube-proxy</span><br><span class="line">kubectl get pod -n kube-system | grep kube-proxy |awk &apos;&#123;system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)&#125;&apos;</span><br></pre></td></tr></table></figure><h4 id="dashboard-1"><a href="#dashboard-1" class="headerlink" title="dashboard"></a>dashboard</h4><ul><li>kubectl apply -f dashboard.yaml</li><li>bash dashboardToken.sh # 默认只支持token登陆<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># dashboardToken.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">kubectl describe secret -n kubernetes-dashboard $(kubectl get secret -n kubernetes-dashboard | grep dashboard-token | awk &apos;&#123;print $1&#125;&apos;) | grep -E &apos;^token&apos; | awk &apos;&#123;print $2&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="业务迁移到k8s"><a href="#业务迁移到k8s" class="headerlink" title="业务迁移到k8s"></a>业务迁移到k8s</h3><h4 id="harbor"><a href="#harbor" class="headerlink" title="harbor"></a>harbor</h4><ul><li><p>采用比较简单的高可用方案</p><ul><li>nginx做负载均衡</li><li>harbor原生安装方式部署2个节点提供服务</li></ul></li><li><p>部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 服务节点</span><br><span class="line">wget &apos;https://github.com/goharbor/harbor/releases/download/v1.9.4/harbor-offline-installer-v1.9.4.tgz&apos;</span><br><span class="line">tar xzvf harbor-offline-installer-v1.9.4.tgz</span><br><span class="line">cd harbor</span><br><span class="line"># 修改hostname为当前ip</span><br><span class="line">vi harbor.cfg</span><br><span class="line"># 查看镜像等文件目录是否在主机最大空间目录下</span><br><span class="line">vi docker-compose.yml </span><br><span class="line">sh install.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># nginx</span><br><span class="line">vi nginx.conf</span><br><span class="line">user nginx;</span><br><span class="line">worker_processes 1;</span><br><span class="line">error_log /var/log/nginx/error.log warn;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">  worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">  upstream hub &#123;</span><br><span class="line">    server 10.18.3.181:80;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    proxy_pass hub;</span><br><span class="line">  proxy_timeout 300s;</span><br><span class="line">  proxy_connect_timeout 5s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># restart.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">docker stop harbornginx &amp;&amp; docker rm harbornginx</span><br><span class="line">docker run -itd --net=host --name harbornginx -v /root/harbor/nginx.conf:/etc/nginx/nginx.conf nginx</span><br></pre></td></tr></table></figure></li><li><p>使用harbor</p><ul><li>本地配置host文件，域名指向ip</li><li>登陆harbor并新建kubernetes项目</li><li>docker tag nginx:latest 域名/项目名/镜像名:TAG</li><li>docker push 域名/项目名/镜像名:TAG</li><li>报错https则在/etc/docker/daemon.json中添加insecure-registries:[“域名”]并重启docker</li><li>配置harbor的同步规则，使2个仓库进行实时同步</li></ul></li></ul><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><ul><li>集群内相互访问<ul><li>ClusterIPService通过DNS把name解析成CluseterIP访问集群pod</li><li>客户端通过headlessService拿到集群endpoints然后客户端自己实现</li></ul></li><li>集群内访问集群外<ul><li>直接配置ip+port</li><li>空的service + 同名的endpoint自动绑定，endpoint里配置外部服务</li></ul></li><li>集群外访问集群内<ul><li>NodePortService</li><li>HostPortService(HostNetwork)</li><li>Ingress<ul><li>Ingress(host+path到service的配置信息)</li><li>IngressController(Ingress-nginx)</li></ul></li></ul></li></ul><h4 id="部署ingress-nginx"><a href="#部署ingress-nginx" class="headerlink" title="部署ingress-nginx"></a>部署ingress-nginx</h4><ul><li>wget <a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.0/deploy/static/mandatory.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.0/deploy/static/mandatory.yaml</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"># ingress-mandatory.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-configuration</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: tcp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: udp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-serviceaccount</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - endpoints</span><br><span class="line">      - nodes</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">    verbs:</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - nodes</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - services</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - events</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">      - patch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;extensions&quot;</span><br><span class="line">      - &quot;networking.k8s.io&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - ingresses</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;extensions&quot;</span><br><span class="line">      - &quot;networking.k8s.io&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - ingresses/status</span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">      - namespaces</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    resourceNames:</span><br><span class="line">      # Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span><br><span class="line">      # Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span><br><span class="line">      # This has to be adapted if you change either parameter</span><br><span class="line">      # when launching the nginx-ingress-controller.</span><br><span class="line">      - &quot;ingress-controller-leader-nginx&quot;</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - update</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - endpoints</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role-nisa-binding</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole-nisa-binding</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-controller</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/name: ingress-nginx</span><br><span class="line">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app.kubernetes.io/name: ingress-nginx</span><br><span class="line">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/port: &quot;10254&quot;</span><br><span class="line">        prometheus.io/scrape: &quot;true&quot;</span><br><span class="line">    spec:</span><br><span class="line">      # wait up to five minutes for the drain of connections</span><br><span class="line">      terminationGracePeriodSeconds: 300</span><br><span class="line">      serviceAccountName: nginx-ingress-serviceaccount</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      nodeSelector:</span><br><span class="line">        ingressController: &quot;true&quot;</span><br><span class="line">      # tolerations: #增加容忍，可分配到master节点</span><br><span class="line">      # - key: &quot;node-role.kubernetes.io/master&quot;</span><br><span class="line">        # operator: &quot;Exists&quot;</span><br><span class="line">        # effect: &quot;NoSchedule&quot;</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx-ingress-controller</span><br><span class="line">          image: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:0.24.1</span><br><span class="line">          args:</span><br><span class="line">            - /nginx-ingress-controller</span><br><span class="line">            - --configmap=$(POD_NAMESPACE)/nginx-configuration</span><br><span class="line">            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span><br><span class="line">            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services</span><br><span class="line">            - --publish-service=$(POD_NAMESPACE)/ingress-nginx</span><br><span class="line">            - --annotations-prefix=nginx.ingress.kubernetes.io</span><br><span class="line">            - --http-port=80 #默认80</span><br><span class="line">            - --https-port=433 #默认443</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: true</span><br><span class="line">            capabilities:</span><br><span class="line">              drop:</span><br><span class="line">                - ALL</span><br><span class="line">              add:</span><br><span class="line">                - NET_BIND_SERVICE</span><br><span class="line">            # www-data -&gt; 33</span><br><span class="line">            runAsUser: 33</span><br><span class="line">          env:</span><br><span class="line">            - name: POD_NAME</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.name</span><br><span class="line">            - name: POD_NAMESPACE</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.namespace</span><br><span class="line">          ports:</span><br><span class="line">            - name: http</span><br><span class="line">              containerPort: 80</span><br><span class="line">            - name: https</span><br><span class="line">              containerPort: 433</span><br><span class="line">          livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 10</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">          readinessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">          lifecycle:</span><br><span class="line">            preStop:</span><br><span class="line">              exec:</span><br><span class="line">                command:</span><br><span class="line">                  - /wait-shutdown</span><br></pre></td></tr></table></figure><ul><li>kubectl apply -f ingress-nginx-mandatory.yaml</li><li>kubectl get all -n ingress-nginx</li><li>wget <a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.0/deploy/static/provider/baremetal/service-nodeport.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.0/deploy/static/provider/baremetal/service-nodeport.yaml</a></li><li>kubectl apply -f service-nodeport.yaml #暴露NodePort的80/443</li><li>kubectl label node m1 app=ingress #通过label限制HostPort</li><li>vi ingress-nginx-mandatory.yaml #暴露HostPort，deployment的spec.hostNetwork=true,spec.nodeSelector={app:ingress}</li><li>kubectl get all -n ingress-nginx</li><li>kubectl apply -f ingress-demo.yaml #测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># ingress-demo.yaml</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-static</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: nginx-static</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">       name: nginx-static</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">       - name: nginx-static</span><br><span class="line">         image: nginx:latest</span><br><span class="line">         volumeMounts:</span><br><span class="line">          - mountPath: /etc/localtime</span><br><span class="line">            name: vol-localtime</span><br><span class="line">            readOnly: true</span><br><span class="line">         ports:</span><br><span class="line">          - containerPort: 80</span><br><span class="line">            name: http</span><br><span class="line">      volumes:</span><br><span class="line">         - name: vol-localtime</span><br><span class="line">           hostPath:</span><br><span class="line">            path: /etc/localtime</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-static</span><br><span class="line">  labels:</span><br><span class="line">   name: nginx-static</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    name: nginx-static</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: submodule-checker-ingress</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: &quot;nginx&quot;</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: ingress.ceair.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path:</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: nginx-static</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure></li></ul><h4 id="业务迁移实施步骤"><a href="#业务迁移实施步骤" class="headerlink" title="业务迁移实施步骤"></a>业务迁移实施步骤</h4><ul><li>做基础镜像</li><li>通过Dockerfile做业务镜像</li><li>通过yaml文件做调度</li></ul><h3 id="重要资源对象"><a href="#重要资源对象" class="headerlink" title="重要资源对象"></a>重要资源对象</h3><h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><ul><li>集群的共享和隔离<ul><li>只是逻辑隔离</li><li>对serviceName可以通过/etc/resolve.conf隔离，对serviceIp/podIp无法隔离</li></ul></li><li>隔离<ul><li>资源对象的隔离<ul><li>service</li><li>deployment</li><li>pod</li></ul></li><li>资源配额的隔离<ul><li>cpu</li><li>memory</li></ul></li></ul></li><li>切换默认命名空间<ul><li>kubectl config set-context ctx-dev –cluster=kubernetes –user=admin –namespace=dev –kubeconfig=/root/.kube/config</li><li>kubectl config use-context ctx-dev –kubeconfig=/root/.kube/config</li><li>kubectl get all</li><li>想完全隔离命名空间下的资源需要创建不同的user并做不同的绑定</li></ul></li><li>划分方式<ul><li>按环境划分: dev/test</li><li>按项目划分: pr1/pr2</li><li>多维度划分: pr1-dev/pr2-test</li></ul></li></ul><h4 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h4><ul><li>内容<ul><li>cpu</li><li>memory</li><li>gpu</li><li>persistantStorage</li></ul></li><li>核心设计<ul><li>requests(最低要求)<ul><li>memory: 100Mi(Mi|Gi分别为M|G)</li><li>cpu: 100m(1核心=1000m)</li></ul></li><li>limits(最高限额)<ul><li>memery: 100Mi</li><li>cpu: 200m</li></ul></li></ul></li><li>当pod内有进程占用内存比较大超过limits限制，pod会尝试杀掉占用内存大的进程，因为内存是不可压缩资源，只能杀掉</li><li>当pod内有进程占用cpu比较多超过limits限制，docker最多可分配limits的cpu给容器，而不会杀掉pod，因为cpu是可压缩资源</li><li>服务等级<ul><li>如果requests与limits相等，此类型服务等级比较高</li><li>如果没有配置requests和limits，此类型服务等级低，遇到资源竞争时首先杀掉此类型的资源</li><li>如果limits大于request，则按需分配</li></ul></li><li>资源管控(保证系统的稳定性)<ul><li>k8s使用LimitRange管理pod/container的resource使用范围</li><li>k8s使用ResourceQuota管理namespaces/configmaps/services等资源的数量限制</li><li>k8s使用eviction进行资源不足时的pod驱逐<ul><li>策略<ul><li>–eviction-soft=memory.available&lt;1.5Gi</li><li>–eviction-soft-grace-period=memory.avaiilable=1m30s</li><li>–eviction-hard=memory.available&lt;100Mi,nodefs.available&lt;1Gi,nodefs.inodesFree&lt;5%</li></ul></li><li>磁盘紧缺时<ul><li>删除死掉的pod</li><li>删除没用的镜像</li><li>按优先级、资源占用情况驱逐pod</li></ul></li><li>内存紧缺时<ul><li>驱逐不可靠的pod</li><li>驱逐基本可靠的pod</li><li>驱逐可靠的pod</li></ul></li></ul></li></ul></li></ul><h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><ul><li>本质就是key=value</li><li>使用方式<ul><li>选择器<ul><li>selector</li><li>nodeSelector</li></ul></li><li>匹配方式<ul><li>matchLabels</li><li>matchExpressions<ul><li>key</li><li>operator</li><li>value</li></ul></li></ul></li><li>命令行<ul><li>-l</li></ul></li></ul></li><li>不同的deployment的同label的pod是分开的，但service不会分开   </li></ul><h3 id="调度与编排"><a href="#调度与编排" class="headerlink" title="调度与编排"></a>调度与编排</h3><h4 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h4><ul><li>方式<ul><li>livnessProbe</li><li>readinessProbe</li></ul></li><li>配置<ul><li>exec|httpGet|tcpSocket</li><li>initialDelaySeconds</li><li>periodSeconds</li><li>failureThreshold</li><li>successThreshold</li><li>timeoutSeconds</li></ul></li></ul><h4 id="scheduler"><a href="#scheduler" class="headerlink" title="scheduler"></a>scheduler</h4><ul><li>调度策略<ul><li>预选策略<ul><li>predicate</li><li>硬性指标不符合的都排除，剩下的可调度</li></ul></li><li>优选策略<ul><li>priority</li><li>在可调度的节点上进行评分，选择最高分进行node和pod的绑定</li></ul></li></ul></li><li>亲和性<ul><li>affinity<ul><li>nodeAffinity<ul><li>requiredXXX 必须满足</li><li>preferredXXX 最好满足</li></ul></li><li>podAffinity<ul><li>requiredXXX</li><li>preferredXXX</li></ul></li><li>nodeAntiAffinity<ul><li>requiredXXX</li><li>preferredXXX</li></ul></li><li>podAntiAffinity<ul><li>requiredXXX</li><li>preferredXXX</li></ul></li></ul></li></ul></li><li>污点<ul><li>node打上污点，除非pod显示声明容忍，否则不可匹配</li><li>tolerations 污点容忍<ul><li>key</li><li>operator</li><li>value</li><li>effect</li></ul></li><li>污点构成<ul><li>key</li><li>value</li><li>effect<ul><li>NoSchedule #后面的pod不会调度过来，不影响已有的</li><li>PreferNoSchedule</li><li>NoExecute #如有已经调度的则会根据容忍时间进行驱逐</li></ul></li></ul></li><li>kubectl taint node NAME key=value:effect</li></ul></li></ul><h4 id="部署策略"><a href="#部署策略" class="headerlink" title="部署策略"></a>部署策略</h4><ul><li>重建<ul><li>Deployment.spec.strategy.type=Recreate</li><li>服务先停止后重建，会影响线上服务</li><li>适用于快速删除一批pod并重建</li></ul></li><li>滚动更新 RollingUpdate<ul><li>Deployment.spec.strategy.type=RollingUpdate</li><li>Deployment.spec.strategy.rollingUpdate.maxSurge=25% #滚动更新时最多新创建数量，默认25%</li><li>Deployment.spec.startegy.rollingUpdate.maxUnavailable=25% #滚动更新时最多不可用数量，默认25%</li><li>kubectl rollout pause deploy NAME #暂停滚动更新</li><li>kubectl rollout resume deploy NAME #恢复滚动更新</li><li>kubectl rollout undo deploy NAME #回退滚动更新</li></ul></li><li>蓝绿部署<ul><li>网络入口ingress/service不变，部署不同的deployment实现蓝绿</li><li>通过切割service的selector完成切换</li></ul></li><li>金丝雀部署<ul><li>在蓝绿的基础上，service接入不同版本的deployment，实现流量按比例分配</li></ul></li></ul><h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><ul><li>设计思想<ul><li>容器是单进程模型，一个容器尽量只跑一个服务</li><li>pod是个逻辑概念，本质上还是容器的隔离</li><li>pod通过第一个pause容器解决了容器依赖的问题</li><li>pod是共享网络/存储/hosts文件的一组容器，是k8s最小的调度单位</li><li>hosts文件是通过pod.spec.hostAliases.ip和pod.spec.hostAliases.hostnames配置</li><li>pod可以通过配置pod.spec.hostNetwork和pod.spec.hostPID配置pod是否使用主机的相关信息</li><li>pod里的容器可以配置生命周期钩子函数<ul><li>pod.spec.containers[0].lifecycle.postStart.exec # 和entrypoint并行</li><li>pod.spec.containers[0].lifecycle.preStop.exec # 串行，执行完钩子后退出容器</li></ul></li></ul></li><li>生命周期<ul><li>Pendding</li><li>ContainerCreating</li><li>Running</li><li>Ready</li><li>Succeeded</li><li>Failed</li><li>CrashLoopBackOff</li><li>Unknown</li></ul></li><li>ProjectedVolume<ul><li>在pod运行时需要的文件可以通过apiServer把ProjectedVolume投射进来</li><li>常见使用<ul><li>Secret</li><li>ConfigMap</li><li>DownwardAPI</li></ul></li></ul></li></ul><h3 id="日志和监控"><a href="#日志和监控" class="headerlink" title="日志和监控"></a>日志和监控</h3><h4 id="日志方案"><a href="#日志方案" class="headerlink" title="日志方案"></a>日志方案</h4><ul><li>问题<ul><li>容器的stdout/stderr默认保存在/var/lib/docker/cantainers/NAME/NAME-json.log</li><li>pod重启后应用的日志文件会丢失</li></ul></li><li>常见方案<ul><li>远程日志，应用直接对接远程日志</li><li>sidecar，pod内专门的一个容器转发日志，性能较低</li><li>logAgent，通常是ds部署在主机上，转发所有pod的日志，需要日志文件挂载到主机</li></ul></li><li>实践 <ul><li>logPilot作为logAgent的一种智能采集工具</li><li>logPilot + elasticSearch + kibana</li></ul></li></ul><h4 id="监控入门"><a href="#监控入门" class="headerlink" title="监控入门"></a>监控入门</h4><h2 id="部署实战"><a href="#部署实战" class="headerlink" title="部署实战"></a>部署实战</h2><h2 id="监控落地"><a href="#监控落地" class="headerlink" title="监控落地"></a>监控落地</h2><h1 id="istio"><a href="#istio" class="headerlink" title="istio"></a>istio</h1><h2 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h2><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h2 id="智能路由"><a href="#智能路由" class="headerlink" title="智能路由"></a>智能路由</h2><h2 id="指标收集和查询"><a href="#指标收集和查询" class="headerlink" title="指标收集和查询"></a>指标收集和查询</h2><h2 id="分布式追踪"><a href="#分布式追踪" class="headerlink" title="分布式追踪"></a>分布式追踪</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;k8s快速入门&quot;&gt;&lt;a href=&quot;#k8s快速入门&quot; class=&quot;headerlink&quot; title=&quot;k8s快速入门&quot;&gt;&lt;/a&gt;k8s快速入门&lt;/h3&gt;&lt;h4 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cli</title>
    <link href="https://prief.github.io/cli/"/>
    <id>https://prief.github.io/cli/</id>
    <published>2019-08-17T08:46:23.000Z</published>
    <updated>2019-09-09T10:45:24.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><ul><li>三种使用方式<ul><li>webpack.config.js</li><li>内联在import语句中</li><li>在cli命令中指定</li></ul></li><li>常用loader<ul><li>babel-loader</li><li>style-loader 在html中注入style标签</li><li>css-loader 解析@import url()等</li><li>postcss-loader</li><li>sass-loader</li><li>html-loader</li><li>vue-loader</li><li>file-loader</li><li>url-loader</li></ul></li></ul><h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><ul><li>常用plugin<ul><li>HtmlWebpackPlugin</li><li>CommonsChunkPlugin</li><li>DefinePlugin</li><li>DllPlugin</li><li>ExtractTextWebpackPlugin</li><li>HotModuleReplacementPlugin</li><li>UglifyjsWebpackPlugin</li><li>CopyWebpackPlugin</li></ul></li></ul><h1 id="工程化模版"><a href="#工程化模版" class="headerlink" title="工程化模版"></a>工程化模版</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>mkdir template &amp;&amp; cd template &amp;&amp; npm init -y</li><li>npm i -D webpack webpack-cli vue-loader vue-template-compiler html-webpack-plugin css-loader style-loader sass-loader sass postcss-loader  postcss-preset-env url-loader file-loader @babel/core @babel/preset-env babel-loader webpack-dev-server connect-multiparty mockjs concurrently</li><li>npm i vue vue-router @babel/polyfill axios</li><li>浏览器支持列表<ul><li>package.json.browserslist</li><li>.browserlistrc</li><li>browserlist</li><li>环境变量BROWSERLIST </li></ul></li><li>.babelrc</li><li>postcss.config.js</li><li>webpack.config.js</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>意义<ul><li>避免命名/变量冲突</li><li>更清晰的依赖关系</li><li>可维护</li><li>可复用</li><li>降低复杂度</li></ul></li><li>主流实现<ul><li>AMD<ul><li>异步加载，适合浏览器端</li><li>require</li><li>define([deps…],(deps…)=&gt;{return {}})</li></ul></li><li>CommonJS<ul><li>同步加载，适合服务端，因为大都在本地</li><li>require</li><li>module.exports | exports.</li></ul></li><li>ES6<ul><li>js语言层面支持的模块化，可做静态依赖分析，适合多端</li><li>import</li><li>export</li></ul></li></ul></li></ul><h2 id="本地开发环境"><a href="#本地开发环境" class="headerlink" title="本地开发环境"></a>本地开发环境</h2><ul><li><p>npm install –save-dev webpack-dev-server</p></li><li><p>“start”: “webpack-dev-server –open”</p></li><li><p>HMR</p><ul><li>hotModuleReplacement</li><li>能生效是因为模块实现了HMR接口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (module.hot) &#123;</span><br><span class="line">  module.hot.accept(&quot;./print.js&quot;, function() &#123;</span><br><span class="line">    console.log(&quot;接收更新后的模块&quot;);</span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sourceMap</p><ul><li>source-map 适合生产环境，映射关系完整但运行慢</li><li>eval-source-map 适合开发环境，只映射到行但运行快</li></ul></li></ul><h2 id="本地mock"><a href="#本地mock" class="headerlink" title="本地mock"></a>本地mock</h2><ul><li>服务 express</li><li>路由 url与数据的路由绑定</li><li>数据模拟 mockjs<ul><li>数据模版定义规范DTD(data template definition)<ul><li>属性名 与规则之间用|分割</li><li>生成规则 依赖属性值的类型，是可选的</li><li>属性值 可以有@占位符，指定了最终值的类型和初始值</li><li>例如：’name|rule’: value</li></ul></li><li>数据占位符定义规范DPD(data placeholder definition)</li><li>核心api<ul><li>mock 将模版输出为最终的数据</li><li>random 生成随机数据</li></ul></li></ul></li><li>concurrently<ul><li>同一终端同时运行多个npm命令，不管是否同一进程</li></ul></li></ul><h2 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h2><ul><li>eslint<ul><li>npm install -D eslint eslint-loader eslint-plugin-vue babel-eslint eslint-friendly-formatter</li><li>plugins指定需要的插件名称，可以忽略eslint-plugin-</li><li>默认使用espree解析器，因为有新的语言特性需要指定为babel-eslint</li><li>换解析器需要在parserOptions中，防止全局替换导致其他插件失败</li><li>es6模块的sourceType为module</li><li>禁用eslint规则<ul><li>文件开头/* eslint-disable */禁用整个文件的检查</li><li>行// eslint-disable-line 禁用行检查</li><li>行// eslint-disable-line no-console 禁用console规则</li></ul></li><li>自定义规则<ul><li>extends: eslint:recommended</li><li>rules:{ no-console: off, quotes:[“wanr”,”single”],indent:[“error”,2]}</li><li>数组值第一项表示级别，默认是error</li></ul></li></ul></li><li>stylelint<ul><li>npm install -D stylelint stylelint-webpack-plugin</li><li>.stylelintrc.js</li><li>禁用规则<ul><li>/* stylelint-disable unit-whitelist*/ 禁用unit规则校验</li><li>/* stylelint-disable */ 禁用所有规则校验</li></ul></li><li>自定义规则<ul><li>extends: “stylelint-config-standard”</li><li>rules: {“color-no-invalid-hex”: true}</li></ul></li></ul></li></ul><h2 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h2><ul><li>npm install -D webpack-spritesmith</li><li>resolve.modules如果是相对路径则按照规则一级一级向上查找，如果是绝对路径不会向上查找</li><li>使用<ul><li>@import “~sprite.scss”</li><li>.icon-picName{@include sprite($picName)}</li></ul></li><li>自定义生成2x样式表<ul><li>官网的templateFunction</li><li>customTemplates: {function_based_template: templateFunction},</li><li>target.css = [[],path.resolve(__dirname, “src/assets/generated/sprite.scss”)]</li><li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@import &apos;~sprite2.scss&apos;;</span><br><span class="line">&lt;li class=&quot;ico ico-picName&quot;&gt;&lt;/li&gt; </span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="按浏览器构建"><a href="#按浏览器构建" class="headerlink" title="按浏览器构建"></a>按浏览器构建</h2><ul><li>新版本浏览器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot;&gt;&lt;/script&gt; 可直接加载ES6</span><br><span class="line">&lt;link rel=&quot;modulepreload&quot;&gt;&lt;/link&gt; 预加载</span><br></pre></td></tr></table></figure></li><li>老版本浏览器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script nomodule&gt;加载旧版本js，新版本浏览器会忽略该引用</span><br></pre></td></tr></table></figure></li></ul><h2 id="按环境构建"><a href="#按环境构建" class="headerlink" title="按环境构建"></a>按环境构建</h2><ul><li>development</li><li>test</li><li>production</li><li>插件<ul><li>npm install –save-dev extract-text-webpack-plugin</li><li>npm install –save-dev optimize-css-assets-webpack-plugin</li><li>npm install terser-webpack-plugin –save-dev</li><li>HashedModuleIdsPlugin 避免不必要的hash变化</li></ul></li></ul><h2 id="集成调试工具"><a href="#集成调试工具" class="headerlink" title="集成调试工具"></a>集成调试工具</h2><ul><li>weinre / spy-debugger</li><li>vconsole<ul><li>npm install vconsole</li><li>DebugPlugin.js里面去实现 debugtool插件</li><li>vconsole.js 里面去new Vconsole</li><li>可以单独发一个npm包 debugtool-webpack-plugin</li></ul></li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul><li>chai作为断言库</li><li>Mocha编写测试用例、测试框架</li><li>Karma测试过程管理TestRunner及启动浏览器和生成测试报告</li><li>npm install –save-dev karma mocha karma-mocha karma-chrome-launcher karma-webpack karma-sourcemap-loader karma-spec-reporter chai @vue/test-utils karma-coverage babel-plugin-istanbul cross-env</li><li>覆盖率<ul><li>语句覆盖率</li><li>分支覆盖率</li><li>函数覆盖率</li><li>行覆盖率</li></ul></li></ul><h2 id="e2e测试"><a href="#e2e测试" class="headerlink" title="e2e测试"></a>e2e测试</h2><ul><li>npm install –save-dev nightwatch chromedriver</li><li>npm install –save-dev geckodriver # firefox</li><li>npm install –save-dev cross-spawn # 启动子进程</li><li>npm install –save-dev nightwatch-html-reporter</li><li>nightwatch接口<ul><li>断言相关<ul><li>expect.element()</li><li>.value</li><li>.text</li><li>.equal(val)/.contain(val)/.match(val)</li></ul></li><li>协议映射相关<ul><li>.click()</li><li>.url()</li><li>.setValue()</li><li>.pause()</li><li>.waitForElementVisible()</li></ul></li></ul></li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>缓存<ul><li>开启cache后，模块和生成的chunk如果内容不变则直接用cache，主要解决增量构建过程的性能</li><li>HardSourceWebpackPlugin，缓存编译过程中间结果 npm i -D hard-source-webpack-plugin</li></ul></li><li>多线程<ul><li>HappyPack</li><li>thread-loader #官方推荐</li></ul></li><li>预先编译<ul><li>DllPlugin 把基本不变的预先打包出单独dll文件</li><li>DllReferencePlugin 配置在文件中引用dll文件</li><li>运行一次npm run dll后不需在运行除非dll包有更新</li><li>npm i -D add-asset-html-webpack-plugin dll文件提前插入html</li><li>与splitChunks功能类似，可以去除splitChunks</li></ul></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li>ecs<ul><li>const { spawn } = require(“child_process”);</li><li>ssh免密登陆</li></ul></li><li>oss<ul><li>vinyl-fs</li><li>vinyl-ftp</li></ul></li></ul><h1 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h1><h2 id="聚合配置并模版化"><a href="#聚合配置并模版化" class="headerlink" title="聚合配置并模版化"></a>聚合配置并模版化</h2><ul><li>app.config.js 聚合用户自定义配置</li><li>相应的配置都要从app.config.js中获取</li></ul><h2 id="handlebars模版化"><a href="#handlebars模版化" class="headerlink" title="handlebars模版化"></a>handlebars模版化</h2><ul><li>template 存放模版</li><li>meta.js 配置入口<ul><li>helpers<ul><li>语法{{#helperName}}...{{/helperName}}</li><li>内置helper if,上面都语法可根据helperName的truthy进行判断</li><li>自定义registerHelper</li></ul></li><li>prompts</li><li>filters</li><li>completeMessage</li></ul></li></ul><h2 id="cli-1"><a href="#cli-1" class="headerlink" title="cli"></a>cli</h2><ul><li>工作流程<ul><li>运行命令 mc init weex pro</li><li>下载模版 </li><li>交互配置信息</li><li>渲染模版</li></ul></li><li>mc<ul><li>1个主命令</li><li>2个子命令<ul><li>mc init</li><li>mc help 默认子命令</li></ul></li></ul></li><li>主命令开发<ul><li>npm i commander</li><li>npm link #将包链接到全局</li></ul></li><li>子命令模块<ul><li>commander</li><li>chalk</li><li>inquirer</li><li>download-git-repo</li><li>rimraf</li><li>user-home</li><li>ora</li><li>metalsmith  <ul><li>文件处理工具,从哪里读，做什么处理，写到哪里去</li><li>use方法绑定插件</li><li>source设定源文件目录</li><li>destination指定文件写入的目录</li><li>clean(true|false)写入前是否删除原来已经存在的文件</li><li>build完成对文件的处理接收回调</li><li>metadata读取全局数据对象</li></ul></li><li>handlebars </li><li>async </li><li>consolidate<ul><li>各种模版引擎的整合库</li><li>还需要引用需要的模版引擎库</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin/mc</span><br><span class="line"></span><br><span class="line">#!/usr/bin/env node</span><br><span class="line">const program = require(&apos;commander&apos;);</span><br><span class="line">program</span><br><span class="line">  .version(require(&apos;../package&apos;).version)</span><br><span class="line">  .usage(&apos;&lt;command&gt; [options]&apos;)</span><br><span class="line">  .command(&apos;init&apos;, &apos;generate a new fe project&apos;);</span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h1&gt;&lt;h2 id=&quot;loader&quot;&gt;&lt;a href=&quot;#loader&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://prief.github.io/webpack/"/>
    <id>https://prief.github.io/webpack/</id>
    <published>2019-08-17T08:29:05.000Z</published>
    <updated>2020-04-01T06:40:05.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="webpack及发展历史"><a href="#webpack及发展历史" class="headerlink" title="webpack及发展历史"></a>webpack及发展历史</h2><ul><li>目的<ul><li>css的预处理</li><li>ES6等的支持</li><li>图片压缩</li><li>发布产物的压缩混淆</li></ul></li><li>同类<ul><li>rollup</li><li>parcel</li></ul></li><li>安装准备<ul><li>brew install nvm , windows可以安装nvm-windows</li><li>nvm install v10.16.3</li><li>node -v</li><li>npm -v</li><li>mkdir webpack-demo &amp;&amp; cd webpack-demo</li><li>npm init -y</li><li>npm i -D webpack webpack-cli</li><li>./node_modules/.bin/webpack -v</li></ul></li><li>模块路径解析<ul><li>绝对路径（不推荐）</li><li>相对路径<ul><li>查找相对路径下的同名的文件或目录</li><li>是文件则直接加载</li><li>是目录则查找目录下的package.json中的main字段</li><li>有则按其加载</li><li>没有main字段或没有package.json则加载index.js</li></ul></li><li>模块名<ul><li>查找当前目录/上级目录中node_modules中的同名目录</li><li>查找全局node_modules中的模块</li></ul></li></ul></li></ul><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ul><li>基础<ul><li>mode</li><li>entry</li><li>output</li><li>module</li><li>plugins</li></ul></li><li>mode<ul><li>production 默认</li><li>development</li><li>none</li></ul></li><li>entry<ul><li>单入口 “path”</li><li>多入口 {name:path}</li></ul></li><li>output<ul><li>path 输出路径</li><li>filename 构建文件名称<ul><li>‘[name]’ 对应入口中的name</li><li>‘[hash]’ 对应文件的hash</li></ul></li></ul></li><li>loaders<ul><li>本质是一个函数，接收源文件作为参数输出转换后的结果</li><li>执行顺序<ul><li>同一个rule中多个loader从后到前执行</li><li>多个loader匹配时用enforce:pre|post约定顺序</li><li>行内loader，在require(‘loader1!./file.json’)</li><li>所有的loader按照前置loader/行内loader/普通loader/后置loader顺序执行</li></ul></li><li>babel-loader<ul><li>解析ES6/7</li><li>需要安装@babel/core @babel/preset-env @babel/proposal-class-properties等</li><li>配置文件.babelrc中增加presets和plugins</li></ul></li><li>style-loader<ul><li>将css插入head的style标签</li></ul></li><li>css-loader<ul><li>解析.css文件转换成commonjs对象</li></ul></li><li>less-loader<ul><li>解析less代码成css，依赖less</li></ul></li><li>file-loader<ul><li>解析各种文件资源（图片/字体等）</li><li>如果希望能把小资源转成base64可以使用url-loader的limit</li><li>把二进制文件转成base64后文件大小会增加二进制文件的1/3左右</li></ul></li><li>raw-loader 将文件以字符串内容形式导入</li><li>thread-loader</li></ul></li><li>plugins<ul><li>本质是一个类，实现了apply方法</li><li>CommonsChunkPlugin chunk相同代码抽取成公共js</li><li>CleanWebpackPlugin 清理构建目录</li><li>CopyWebpackPlugin</li><li>ZipWebpackPlugin 将打包出的资源生成一个zip包</li><li>HtmlWebpackPlugin </li><li>ExtractTextWebpackPlugin</li><li>MiniCssExtractPlugin 需要配合.loader替换style-loader进行css文件提取</li><li>OptimizeCssAssetsWebpackPlugin</li><li>UglifyjsWebpackPlugin</li></ul></li></ul><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><ul><li><p>环境差异</p><ul><li>module.exports=(env,argv)=&gt;{console.log(argv.mode)}</li><li>生产环境<ul><li>压缩资源</li><li>分离资源</li></ul></li><li>开发环境<ul><li>debug</li><li>hotReload</li></ul></li><li>配置拆分<ul><li>base.js</li><li>dev.js</li><li>prod.js</li></ul></li></ul></li><li><p>构建监听</p><ul><li>webpack 命令行传 –watch</li><li>webpack.config.js中 watch:true</li><li>是通过轮询文件最后修改时间进行的，同时也有aggregateTimeout防止短时间多次修改，有poll指定每秒轮询多少次，ignore指定忽略，这些属性在watchOptions中</li></ul></li><li><p>WDS</p><ul><li>webpack-dev-server</li><li>WDS不输出文件都是存在内存中，所以不用手动刷新浏览器可实现HMR</li><li>dev: “webpack-dev-server –open”</li><li>webpack.config.js<ul><li>mode: ‘development’</li><li>plugins: [new webpack.HotModuleReplacementPlugin()]</li><li>devServer:{hot:true,contentBase:’./dist’,before(app){app.get(“path”,(req,res)=&gt;{res.json({})})},proxy:{“/api”:{target:’’,pathRewrite:{}}}}</li></ul></li><li>WDS灵活定制版WDM webapck-dev-middleware</li><li>HMR <ul><li>由compiler把源码编译成bundle和HMR的patch</li><li>bundle由本地的bundleServer返回给浏览器</li><li>HMR的patch由本地的HMRServer(WebSockt)返回浏览器的HMRRuntime</li><li>浏览器执行bundle和patch执行代码</li><li>核心api<ul><li>module.hot</li><li>module.hot.accept(“指定模块”,()=&gt;{})</li><li>module.hot.dispose((data)=&gt;{}) #当前模块</li></ul></li></ul></li></ul></li><li><p>文件指纹</p><ul><li>hash 和整个项目有关，只要项目内有变化hash就变，文件处理也可以用[hash:8]</li><li>chunkhash 不同的entry会生成不同的chunkhash，常用于js，常设置在output.filename中[chunkhash:8]</li><li>contenthash 文件内容不变contenthash不变，常用于css，常设置在MiniCssExtractPlugin的filename中[contenthash:8]</li></ul></li><li><p>代码压缩</p><ul><li>html 使用html-webpack-plugin的minify对象属性</li><li>css 使用optimize-css-assets-webpack-plugin和cssnano</li><li>js 内置了uglifyjs-webpack-plugin</li></ul></li><li><p>按需加载</p><ul><li>import(/* webpackChunkName: “lodash” */ ‘lodash’).then((_) =&gt; {})</li><li>webpackChunkName作为注释会告知webpack动态加载模块的名称，配合output.chunkFilename指定chunk输出的文件名，否则会以简单的数字标示</li><li>需要syntax-dynamic-import这个babel插件处理import()</li><li>按需动态加载的import()语法依赖promise，对于低版本的要promise的polyfill</li></ul></li><li><p>postcss</p><ul><li>autoprefixer<ul><li>o presto</li><li>ms trident</li><li>moz gecko</li><li>webkit webkit</li></ul></li><li>npm i -D postcss-loader autoprefixer</li></ul></li><li><p>屏幕分辨率</p><ul><li>rem: font-size of the root element，是相对单位</li><li>npm i -D px2rem-loader</li><li>options:{remUnit:75,remPrecision:8}</li><li>npm i lib-flexible lib-flexible在页面渲染时计算rem的值</li></ul></li><li><p>内联资源到html</p><ul><li>内联html/js<ul><li>raw-loader </li><li>html模版里写${ require(‘raw-loader!./meta.html’)} 直接内联html</li><li>script里写${ require(‘raw-loader!babel-loader!../node_modules/lib-flexible/flexible.js’) }内联js</li></ul></li><li>内联css<ul><li>style-loader options:{insertAt:’top’,singleton:true //所有style合并成1个 }</li><li>html-inline-css-webpack-plugin 将打包好的css内联</li></ul></li></ul></li><li><p>MPA</p><ul><li>手动的可增加1个entry，然后增加1个对应的htmlWP，不方便维护</li><li>通用的动态设置entry:glob.sync(path.join(__dirname,’./src/*/index.js’))和对应的htmlWP<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const setMPA = () =&gt; &#123;</span><br><span class="line">    const entry = &#123;&#125;;</span><br><span class="line">    const htmlWebpackPlugins = [];</span><br><span class="line">    const entryFiles = glob.sync(path.join(__dirname, &apos;./src/*/index.js&apos;));</span><br><span class="line">    Object.keys(entryFiles)</span><br><span class="line">        .map((index) =&gt; &#123;</span><br><span class="line">            const entryFile = entryFiles[index];</span><br><span class="line">            const match = entryFile.match(/src\/(.*)\/index\.js/);</span><br><span class="line">            const pageName = match &amp;&amp; match[1];</span><br><span class="line"></span><br><span class="line">            entry[pageName] = entryFile;</span><br><span class="line">            htmlWebpackPlugins.push(</span><br><span class="line">                new HtmlWP(&#123;</span><br><span class="line">                    inlineSource: &apos;.css$&apos;,</span><br><span class="line">                    template: path.join(__dirname, `src/$&#123;pageName&#125;/index.html`),</span><br><span class="line">                    filename: `$&#123;pageName&#125;.html`,</span><br><span class="line">                    chunks: [&apos;vendors&apos;, pageName],</span><br><span class="line">                    inject: true,</span><br><span class="line">                    minify: &#123;</span><br><span class="line">                        html5: true,</span><br><span class="line">                        collapseWhitespace: true,</span><br><span class="line">                        preserveLineBreaks: false,</span><br><span class="line">                        minifyCSS: true,</span><br><span class="line">                        minifyJS: true,</span><br><span class="line">                        removeComments: false</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        entry,</span><br><span class="line">        htmlWebpackPlugins</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123;entry,htmlWebpackPlugins&#125; = setMPA()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sourceMap</p><ul><li>开发环境使用，生产环境只需要传到监控平台</li><li>关键字<ul><li>eval 使用eval包裹模块代码，最后面制定对应的源文件，不生成单独的map文件</li><li>cheap 不包含列信息</li><li>source-map 生成.map文件</li><li>inline 将.map作为DataURI嵌入，不单独生成.map</li><li>module 包含loader的source-map,可对依赖分析</li></ul></li><li>类型<ul><li>生产环境使用source-map，map文件上传到监控平台</li><li>开发环境使用eval-source-map，加速打包</li></ul></li></ul></li><li><p>提取公共资源</p><ul><li>基础库(vue/react/react-dom)分离到cdn，可使用html-webpack-externals-plugin</li><li>也可以用webpack4内置的splitChunksPlugin代替CommonsChunkPlugin</li><li>chunks说明<ul><li>async 默认选项，表示异步引入的库进行分离</li><li>initial 同步引入的库进行分离</li><li>all 推荐使用，所有引入的库都进行分离</li></ul></li><li>chunks分离后需要把分离出的name添加到htmlWP中的chunks<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">       splitChunks:&#123;</span><br><span class="line">           minSize: 0,</span><br><span class="line">           maxSize:1000,</span><br><span class="line">           minChunks: 2,</span><br><span class="line">           cacheGroups:&#123;</span><br><span class="line">               vendors:&#123;</span><br><span class="line">                   test:/(react|react-dom)/,</span><br><span class="line">                   name:&quot;vendors&quot;,</span><br><span class="line">                   chunks:&quot;all&quot;</span><br><span class="line">               &#125;,</span><br><span class="line">               commons:&#123;</span><br><span class="line">                 name:&quot;commons&quot;,</span><br><span class="line">                 chunks:&quot;all&quot;,</span><br><span class="line">                 minChunks:2</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>treeShaking</p><ul><li>把模块中没被引用的方法在uglify阶段去除掉</li><li>使用<ul><li>必须是ES6的语法，不能用在CommonJS，ES6可以静态分析</li><li>在.babelrc里设置module:false把模块的静态分析交给webpack处理</li><li>对class类的treeShaking需要在.babelrc里配置loose:true</li><li>mode为production情况下默认开启了此功能</li><li>要求导出的函数不能有副作用，否则也会失效,即包的package.json.sideEffects:false声明</li></ul></li><li>原理<ul><li>DCE dead code elimination 无用代码擦除<ul><li>代码不可到达</li><li>代码执行的结果不会被用到</li><li>只写不读的代码</li></ul></li><li>ES6模块特点<ul><li>import只能出现在代码顶层</li><li>import的模块名只能是字符串常量</li><li>import的binding是immutable的</li></ul></li></ul></li></ul></li><li><p>ScopeHoisting</p><ul><li>问题<ul><li>构建后的模块代码都是通过闭包实现IIFE</li><li>大量的闭包导致代码体积增大，运行时内存开销增大</li></ul></li><li>分析<ul><li>把所有的模块都包裹一层函数形成IIFE</li><li>把import转换成_webpack_require,export转换成_webpack_exports</li><li>把所有模块都缓存到modules数组</li><li>通过WEBPACK_REQUIRE_METHOD(0) 启动程序</li></ul></li><li>scopeHoisting将模块代码按照引用顺序放在一个函数作用域，适当的做重命名防止变量冲突，达到减少函数声明和内存开销</li><li>使用时mode设置为production默认开启</li><li>手动开启使用 new webpack.optimize.ModuleConcatenationPlugin()</li></ul></li><li><p>动态import</p><ul><li>把相同的代码抽离到一个共享模块，在通过懒加载动态import使初始下载的代码更小</li><li>懒加载<ul><li>CommonJS使用方式require.ensure()</li><li>ES6使用方式 动态import目前还没有原生支持，需要babel插件<ul><li>npm i @babel/plugin-syntax-dynamic-import</li><li>.babelrc中plugins:[‘@babel/plugin-syntax-dynamic-import’]</li><li>代码中需要的地方用import(‘./dynamic.js’).then()</li></ul></li></ul></li></ul></li><li><p>ESLint</p><ul><li>制定规范<ul><li>基于eslint:recommmend配置进行改进，不重复造轮子</li><li>能够帮助发现错误的规则全部开启</li><li>保持风格统一，不要限制开发体验</li></ul></li><li>落地<ul><li>和CICD集成 如gitlab的pipline</li><li>和webpack集成</li></ul></li><li>本地开发增加precommit钩子(本地可以–no-verify绕过，所以CICD必须要有)<ul><li>npm i -D husky</li><li>“precommit”: “lint-staged”</li><li>“lint-staged”: {“linters”:”*.{js,scss}”:[“eslint –fix”, “git add”]}</li></ul></li><li>webpack集成ESLint<ul><li>.js文件先用eslint-loader再使用babel-loader</li><li>npm i -D eslint eslint-loader babel-eslint eslint-plugin-import …</li><li>.eslintrc.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    parser:&quot;babel-eslint&quot;,</span><br><span class="line">    extends:[&apos;&apos;],</span><br><span class="line">    env:&#123;</span><br><span class="line">        browser:true,</span><br><span class="line">        node:true</span><br><span class="line">    &#125;,</span><br><span class="line">    rules:&#123;</span><br><span class="line">        indent:[2,2]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>打包库和组件</p><ul><li>需求<ul><li>打包压缩版和非压缩版</li><li>支持AMD/CJS/ESM模块引入和script直接引入，统称UMD</li></ul></li><li>实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const TerserPlugin = require(&apos;terser-webpack-plugin&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode:&apos;none&apos;,</span><br><span class="line">  entry:&#123;</span><br><span class="line">    &apos;name&apos;:&apos;./src/index.js&apos;,</span><br><span class="line">    &apos;name.min&apos;:&apos;./src/index.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:&apos;[name].js&apos;,</span><br><span class="line">    library:&apos;libName&apos;, // 库的全局变量</span><br><span class="line">    libraryExport:&apos;default&apos;,</span><br><span class="line">    libraryTarget:&apos;umd&apos; // 库的引入方式</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    minimize:true,</span><br><span class="line">    minimizer:[</span><br><span class="line">      new TerserPlugin(&#123;</span><br><span class="line">        include:/\.min\.js$/, //只对.min压缩</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// package.json</span><br><span class="line">&quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">  &quot;prepublish&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// index.js</span><br><span class="line">if(process.env.NODE_ENV === &apos;production&apos;)&#123;</span><br><span class="line">  module.exports = require(&apos;./dist/name.min.js&apos;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  module.exports = require(&apos;./dist/name.js&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>SSR</p><ul><li>server side render</li><li>优势<ul><li>减少网络请求</li><li>减少白屏时间</li><li>对SEO友好</li></ul></li><li>实现思路<ul><li>服务端使用server的renderToString将组件渲染成字符串，路由返回对应的字符串模板</li><li>客户端进行环境判断请求对应的文件</li></ul></li><li>问题<ul><li>nodejs中没有浏览器的window需要hack：if(typeof window === ‘undefined’){ global.window = {} }</li><li>不兼容的组件需要根据打包环境进行适配</li><li>http请求需要改写成axios</li><li>css样式不显示可以采用浏览器端模板占位符替换的方式’<!--HTML_PLACEHOLDER-->‘</li><li>首屏业务数据也可用模板占位符替换的方式<!--INITIAL_DATA_PLACEHOLDER--></li></ul></li></ul></li><li><p>优化构建日志</p><ul><li>webpack.config.js中stats字段控制统计信息<ul><li>errors-only</li><li>minimal</li><li>none | false</li><li>normal | true</li><li>verbose </li></ul></li><li>friendly-errors-webpack-plugin<ul><li>stats: ‘errors-only’</li><li>new FriendlyErrorsWebpackPlugin()</li><li>日志提示<ul><li>success</li><li>warning</li><li>error</li></ul></li></ul></li></ul></li><li><p>构建异常和中断</p><ul><li>如果没有错误则process.exit(0)</li><li>如果有错误则process.exit(非0)，回调函数err.code则为非0数值</li><li>compiler每次构建结束后都会触发done这个hook</li><li>hook回调stats.compilation.errors错误对象</li></ul></li></ul><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="可维护的配置"><a href="#可维护的配置" class="headerlink" title="可维护的配置"></a>可维护的配置</h2><ul><li><p>抽离成npm包的意义</p><ul><li>通用性<ul><li>开发者无需关注构建配置</li><li>统一团队构建脚本</li></ul></li><li>可维护性<ul><li>构建配置合理拆分</li><li>README/CHANGELOG</li></ul></li><li>质量<ul><li>冒烟测试/单元测试/测试覆盖率</li><li>CI</li></ul></li></ul></li><li><p>构建配置管理的可选方案</p><ul><li>通过多个配置文件管理对应环境 webpack –config参数控制</li><li>构建配置设计成一个库 如neutrino webpack-blocks</li><li>设计成一个工具 如create-react-app nwb</li><li>配置放在一个文件，通过–env控制</li></ul></li><li><p>构建配置包设计</p><ul><li>通过多个配置文件管理对应环境<ul><li>webpack.base.js<ul><li>资源解析(es6/react/css/less/图片/字体)</li><li>样式增强(css前缀自动补齐/px2rem)</li><li>目录清理</li><li>多页面打包</li><li>构建过程日志优化</li><li>构建错误捕获和处理</li><li>css提取成一个单独的文件</li></ul></li><li>webpack.dev.js<ul><li>hmr</li><li>sourcemap</li></ul></li><li>webpack.prod.js<ul><li>代码压缩</li><li>文件指纹</li><li>treeShaking</li><li>scopeHoisting</li><li>速度优化 基础包放cdn</li><li>体积优化 代码分割动态import</li></ul></li><li>webpack.ssr.js<ul><li>output.libraryTarget</li><li>css解析</li></ul></li></ul></li><li>npm包<ul><li>规范(git commit/READMEESLINT/SemVer)</li><li>质量(冒烟测试/单元测试/测试覆盖率/CI)</li></ul></li><li>配置组合<ul><li>webpack-merge</li><li>module.exports=merge(baseConf,devConf)</li></ul></li><li>目录结构<ul><li>test/</li><li>lib/</li><li>README.md</li><li>CHANGELOG.md</li><li>.eslintrc.js</li><li>.gitignore</li><li>package.json</li><li>index.js</li></ul></li></ul></li><li><p>构建包使用ESLINT</p><ul><li>使用eslint-config-airbnb-base规则集</li><li>使用eslint –fix做自动修复</li><li>package.json “lint”:”eslint ./lib –fix”</li><li>.eslintrc.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends:[&apos;airbnb-base&apos;],</span><br><span class="line">  parser:&apos;babel-eslint&apos;,</span><br><span class="line">  env:&#123;</span><br><span class="line">    browser:true,</span><br><span class="line">    node:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>冒烟测试smoke testing</p><ul><li>指对提交测试的软件在进行详细测试前的预测试</li><li>主要目的是暴露基本功能失效的严重问题</li><li>执行<ul><li>构建是否成功 webpack(conf,(err,stats)=&gt;{})</li><li>是否生成对应文件 glob.sync([‘*.js’]).length</li></ul></li></ul></li><li><p>单元测试和测试覆盖率</p><ul><li>框架<ul><li>mocha(单纯的测试框架)+chai(断言库)</li><li>jasmine/jest 集成框架，开箱即用</li></ul></li><li>mocha接入<ul><li>npm i -D mocha chai</li><li>test.js中编写describe/it/expect</li><li>package.json中”test”:”mocha “</li><li>npm run test</li></ul></li><li>测试覆盖率<ul><li>npm i -D istanbul</li><li>package.json中”test”:”istanbul cover mocha”</li></ul></li></ul></li><li><p>CI</p><ul><li>作用<ul><li>快速发现错误</li><li>防止分支大幅偏离主干</li></ul></li><li>措施<ul><li>集成前必须跑通测试，否则不予集成</li></ul></li><li>排名<ul><li>travis-ci</li><li>circle-ci</li><li>jenkins-ci</li></ul></li></ul></li><li><p>发布npm包</p><ul><li>npm login</li><li>npm version patch|minor|major(自动git提交和tag)</li><li>npm publish</li></ul></li><li><p>git提交规范和changeLog生成</p><ul><li>提交规范优势<ul><li>加快review流程</li><li>根据提交生成changeLog</li><li>可追溯可回顾</li></ul></li><li>技术方案<ul><li>目地统一提交日志标准</li><li>使用angular的git commit规范<ul><li>信息分3部分，空行分割<ul><li>标题(首字母不大写，末尾不要标点)<ul><li>type(scope): subject</li></ul></li><li>主题内容</li><li>尾注</li></ul></li><li>提交类型type限制<ul><li>feat：新增feature</li><li>fix：修复bug</li><li>docs：仅仅修改了文档</li><li>style：仅仅修改文件样式，不改变逻辑</li><li>perf：优化相关，提升体验性能等</li><li>refactor：代码重构无新功能或bug修复</li><li>test：测试用例</li><li>chore：改变构建流程或增加依赖库工具</li><li>revert：回滚到上一版本</li></ul></li><li>scope(可根项目分成大类如docs/components)</li><li>主题内容可以详细列明每个修改点影响点</li><li>尾注可以增加链接或关闭issue等</li></ul></li><li>日志提交时友好的提示工具:commitize</li><li>不符合要求的拒绝提交:validate-commit-msg</li><li>统一changeLog文档信息生成:conventional-changelog-cli</li></ul></li><li>本地增加precommit钩子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i -D husky validate-commit-msg conventional-changelog-cli</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">  &quot;commitmsg&quot;:&quot;validate-commit-msg&quot;,</span><br><span class="line">  &quot;changelog&quot;:&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语义化版本号</p><ul><li>semantic versioning<ul><li>major 做了不兼容api的修改</li><li>minor 做了向下兼容的功能新增</li><li>patch 做了向下兼容的问题修正</li><li>major.minor.patch版本号严格递增</li></ul></li><li>优势<ul><li>避免出现循环依赖</li><li>减少依赖冲突</li></ul></li><li>发布重要版本时可以发先行版本<ul><li>alpha 内测版</li><li>beta 外部小范围测试版，可以加新功能</li><li>rc 公测版release candidate不会加新功能，主要用排错</li><li>major.minor.patch-alpha.2</li></ul></li></ul></li></ul><h2 id="构建速度和体积优化"><a href="#构建速度和体积优化" class="headerlink" title="构建速度和体积优化"></a>构建速度和体积优化</h2><ul><li><p>初级分析</p><ul><li>使用webpack内置的stats<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">  &quot;build:stats&quot;:&quot;webpack --env production --json &gt; stats.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>速度分析</p><ul><li>使用speed-measure-webpack-plugin插件</li><li>可以看到每个loader和插件执行耗时和总耗时<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i -D speed-measure-webpack-plugin</span><br><span class="line"></span><br><span class="line">const SMWP = require(&apos;speed-measure-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">const smp = new SMWP();</span><br><span class="line"></span><br><span class="line">module.exports = smp.wrap(WEBPACK_CONFIG)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>体积分析</p><ul><li>使用webpack-bundle-analyzer插件</li><li>构建完毕自动在8888端口展示结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-bundle-analyzer</span><br><span class="line"></span><br><span class="line">const &#123; BundleAnalyzerPlugin&#125; = require(&apos;webpack-bundle-analyzer&apos;);</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">  new webpack-bundle-analyzer()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>速度提升</p><ul><li>使用高版本nodejs和webpack，从底层做了优化</li><li>多进程多实例构建 thread-loader </li><li>多进程多实例并行压缩terser-webpack-plugin<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">npm i -D thread-loader terser-webpack-plugin</span><br><span class="line"></span><br><span class="line">use:[</span><br><span class="line">  &#123;</span><br><span class="line">    loader:&quot;thread-loader&quot;,</span><br><span class="line">    options:&#123;</span><br><span class="line">      workers:3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;babel-loader&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">optimization:&#123;</span><br><span class="line">  minimizer:[</span><br><span class="line">    new TerserWebpackPlugin(&#123;</span><br><span class="line">      parallel:true // 默认cpu核心2倍-1</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进一步分包</p><ul><li>htmlWebpackExternalsPlugin将基础包分离到cdn引入的缺点是可能有很多基础包很多script请求</li><li>splitChunks缺点是每次都要分析依赖的基础包</li><li>DLLPlugin分包可以把框架基础包和业务基础包进行预编译，打包成一个文件，然后通过DLLReferencePlugin对manifest.json引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// webpack.dll.js</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">    library:[</span><br><span class="line">      &apos;react&apos;,</span><br><span class="line">      &apos;react-dom&apos;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:&quot;[name]_[chunkhash]_dll.js&quot;,</span><br><span class="line">    path:path.join(__dirname,&apos;dll&apos;),</span><br><span class="line">    library:&quot;[name]&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    new webpack.DllPlugin(&#123;</span><br><span class="line">      name:&quot;[name]_[hash]&quot;,</span><br><span class="line">      path:path.join(__dirname,&apos;dll/[name].json&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// package.json</span><br><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">  &quot;dll&quot;:&quot;webpack --config webpack.dll.js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// webpack.prod.js</span><br><span class="line"></span><br><span class="line">new webpack.DllReferencePlugin(&#123;</span><br><span class="line">  manifest: require(&apos;./dll/library.json&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>缓存</p><ul><li>提升二次构建速度</li><li>思路<ul><li>babel-loader开启缓存</li><li>terser-webpack-plugin开启缓存</li><li>hard-source-webpack-plugin开启缓存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// babel-loader</span><br><span class="line">&apos;babel-loader?cacheDirectory=true&apos;</span><br><span class="line"></span><br><span class="line">// terser-webpack-plugin</span><br><span class="line">optimization:&#123;</span><br><span class="line">  minimizer:[</span><br><span class="line">    new TerserWebpackPlugin(&#123;</span><br><span class="line">      parallel:true,</span><br><span class="line">      cache:true</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// hard-source-webpack-plugin</span><br><span class="line">let HSWP= require(&apos;hard-source-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">  new HSWP()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>缩小构建目标</p><ul><li>尽可能少的构建模块 exclude:’node_modules’</li><li>减少文件搜索范围<ul><li>优化resolve.modules [path.resolve(__dirname,’node_modules’)]</li><li>优化resolve.mainFields [‘main’]</li><li>优化resolve.extensions [‘.js’,’.json’]</li><li>优化resolve.alias {react:path.resolve(__dirname,’node_modules/….js’)}</li></ul></li></ul></li><li><p>图片压缩</p><ul><li>基于nodejs的imagemin或tinypng的api，使用image-webpack-loader</li><li>imagemin优势<ul><li>很多可配置项目</li><li>可引入第三方优化插件</li><li>可处理多种图片格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  loader: &apos;image-webpack-loader&apos;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    mozjpeg: &#123;</span><br><span class="line">      progressive: true,</span><br><span class="line">      quality: 65</span><br><span class="line">    &#125;,</span><br><span class="line">    // optipng.enabled: false will disable optipng</span><br><span class="line">    optipng: &#123;</span><br><span class="line">      enabled: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    pngquant: &#123;</span><br><span class="line">      quality: &apos;65-90&apos;,</span><br><span class="line">      speed: 4</span><br><span class="line">    &#125;,</span><br><span class="line">    gifsicle: &#123;</span><br><span class="line">      interlaced: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    // the webp option will enable WEBP</span><br><span class="line">    webp: &#123;</span><br><span class="line">      quality: 75</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>treeShaking擦除无用css</p><ul><li>默认模块中只要有一个方法被引用整个文件会被打入bundle中，treeShaking是在uglify阶段擦除无用</li><li>webpack4中production默认开启treeShaking</li><li>前提必须是ESM语法，CJS不支持</li><li>手动开启需要在.babelrc中设置modules:false</li><li>删除无用css2种方案<ul><li>purifyCSS 遍历代码，识别已经用到的css</li><li>uncss 通过document.querySelector进行识别</li></ul></li><li>实践<ul><li>purgecss-webpack-plugin + mini-css-extract-plugin</li></ul></li></ul></li><li><p>动态polyfill</p><ul><li>减少构建体积</li><li>polyfill是根据UA下发需要的polyfill来按需加载</li><li>可以直接script[src=’’]来引用polyfill.io服务</li><li>也可以基于官方开源的方案自建polyfill的cdn服务</li><li>ua篡改也可以根据代码结果降级为获取全部polyfill</li></ul></li></ul><h1 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h1><h2 id="源码掌握原理"><a href="#源码掌握原理" class="headerlink" title="源码掌握原理"></a>源码掌握原理</h2><ul><li><p>webpack源码</p><ul><li>本质<ul><li>基于事件流的编程范例，运行一系列的插件</li><li>compiler = webpack(options)</li></ul></li><li>启动流程<ul><li>npm scripts</li><li>webpack cli</li><li>实际都是执行的node_modules/webpack/bin/webpack.js</li></ul></li><li>主要步骤<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">process.exitCode = 0;</span><br><span class="line">const runCommand = (cmd,args)=&gt;&#123;&#125;</span><br><span class="line">const installed = packageName=&gt;&#123;&#125;</span><br><span class="line">const CLIs = []</span><br><span class="line">const installedCLIs = CLIs.filter()</span><br><span class="line">if(installedCLIs.length ===0 )&#123;</span><br><span class="line"></span><br><span class="line">&#125;else if(installedCLIs.length ===1)&#123;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>webpack-cli源码</p><ul><li>主要流程<ul><li>引入yargs，对命令行进行定制</li><li>分析命令行参数，对参数进行转换，组成编译配置项</li><li>引入webpack，根据配置项进行编译</li></ul></li><li>不需编译的子命令<ul><li>init</li><li>migrate</li><li>add</li><li>remote</li><li>serve</li><li>info</li><li>generate-loader</li><li>generate-plugin</li></ul></li></ul></li><li><p>tapable</p><ul><li>类似nodejs的EventEmitter,主要控制钩子的发布和订阅</li><li>插件系统发布或订阅钩子函数进行处理</li><li>9大hook类<ul><li>SyncHook</li><li>SyncBailHook</li><li>SyncWaterfallHook</li><li>SyncLoopHook</li><li>AsyncParallelHook</li><li>AsyncParallelBailHook</li><li>AsyncSeriesHook</li><li>AsyncSeriesBailHook</li><li>AsyncSeriesWaterfallHook</li></ul></li><li>绑定和执行<ul><li>同步:tap和call</li><li>异步:tapAsync/tapPromise/tap和callAsync/<br>promise<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const hook1 = new SyncHook([&quot;a1&quot;,&quot;a2&quot;,&quot;a3&quot;])</span><br><span class="line"></span><br><span class="line">hook1.tap(&quot;hook1&quot;,(a1,a2,a3)=&gt;&#123;&#125;)</span><br><span class="line">hook1.call(1,2,3)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>简易实现webpack</p><ul><li>babel语法转换 babylon</li><li>依赖分析 babel-traverse</li></ul></li></ul><h2 id="自定义loader"><a href="#自定义loader" class="headerlink" title="自定义loader"></a>自定义loader</h2><ul><li><p>loader链式调用和执行顺序</p><ul><li>loader只是一个导出为函数的js模块</li><li>module.exports = function(source){return s}</li><li>链式调用时从右到左从后到前依次串行执行</li><li>函数组合的2种方式<ul><li>unix的pipline从左到右</li><li>compose的方式从右到左compose=(f,g)=&gt;(…args)=&gt;f(g(…args)) webpack采用此方式</li></ul></li></ul></li><li><p>loader-runner</p><ul><li>可用webpack-cli的generate-loader命令</li><li>loader-runner可以在不安装webpack情况下运行loaders</li><li>webpack也使用loader-runner执行loader</li><li>开发中也可以用loader-runner进行loader的开发和调试</li></ul></li><li><p>pitchLoader</p><ul><li>可以跳过loader的处理</li><li>实现简单，可以更灵活的定义loader的执行</li></ul></li><li><p>实战</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mkdir raw-loader &amp;&amp; cd raw-loader</span><br><span class="line">npm init -y </span><br><span class="line">npm i loader-runner</span><br><span class="line"></span><br><span class="line">/src/demo.txt</span><br><span class="line">demotxt</span><br><span class="line"></span><br><span class="line">/src/raw-loader.js</span><br><span class="line">module.exports=function(src)&#123;</span><br><span class="line">  const json = JSON.stringify(src)</span><br><span class="line">              .replace(/\u2028/g,&apos;\\u2028&apos;)</span><br><span class="line">              .replace(/\u2029/g,&apos;\\u2029&apos;)</span><br><span class="line"></span><br><span class="line">  // 正常返回 return `export default $&#123;json&#125;`; </span><br><span class="line">  // 抛错 throw new Error(&apos;myError&apos;);</span><br><span class="line">  // 也可通过this.callback(error,data1 [,data2...])</span><br><span class="line">  this.callback(null, json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/run-loader.js</span><br><span class="line">const &#123;runLoaders &#125; = require(&apos;loader-runner&apos;);</span><br><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">runLoaders(&#123;</span><br><span class="line">    resource:path.join(__dirname,&apos;./src/demo.txt&apos;),</span><br><span class="line">    loaders:[</span><br><span class="line">        path.join(__dirname,&apos;./src/raw-loader.js&apos;)</span><br><span class="line">    ],</span><br><span class="line">    context:&#123;</span><br><span class="line">        minimize:true</span><br><span class="line">    &#125;,</span><br><span class="line">    readResource:fs.readFile.bind(fs)</span><br><span class="line">&#125;,function(err,res)&#123;</span><br><span class="line">    console.log(err,res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">node run-loader.js</span><br></pre></td></tr></table></figure></li><li><p>高级用法</p><ul><li><p>loader-utils的getOptions获取loader参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const loaderUtils = require(&apos;loader-utils&apos;);</span><br><span class="line">module.exports = function(source)&#123;</span><br><span class="line">  const &#123;name&#125; = loaderUtils.getOptions(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>loader的异步处理</p><ul><li>通过this.async()返回的一个函数进行异步处理</li><li>第一个参数是error，第二个参数是处理结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(source)&#123;</span><br><span class="line">  const callback = this.async();</span><br><span class="line"></span><br><span class="line">  fs.readFile(path,&apos;utf-8&apos;,(err,data)=&gt;&#123;</span><br><span class="line">    callback(err,data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>loader的缓存</p><ul><li>webpack中默认开启缓存</li><li>可使用this.cacheable(false)关掉缓存</li><li>缓存的条件是相同的输入有相同的输出</li><li>有依赖的loader无法使用缓存</li></ul></li><li><p>loader的文件输出</p><ul><li>this.emitFile(outputPath,content)</li></ul></li></ul></li></ul><h2 id="自定义plugin"><a href="#自定义plugin" class="headerlink" title="自定义plugin"></a>自定义plugin</h2><ul><li><p>插件</p><ul><li>没有loader那样的独立运行环境，只能在webpack内运行</li><li>插件需要导出一个类，类需要实现apply方法</li><li>apply方法接收到一个compiler对象参数</li><li>插件内通过compiler的hooks和compilation的hooks做逻辑处理</li></ul></li><li><p>搭建插件运行环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const DemoPlugin = require(&apos;./plugins/demo.js&apos;);</span><br><span class="line">const options = &#123;&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">    lib: path.join(__dirname,&apos;src/lib.js&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.join(__dirname,&apos;dist&apos;),</span><br><span class="line">    filename:&apos;[name].js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    new DemoPlugin(options)</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// plugins/demo.js</span><br><span class="line">module.exports = class DemoPlugin &#123;</span><br><span class="line">  constructor(options)&#123;</span><br><span class="line">    this.options = options</span><br><span class="line">  &#125;</span><br><span class="line">  apply(compiler)&#123;</span><br><span class="line">    console.log(this.options);</span><br><span class="line">    compiler.hooks.done.tap(&apos;demo&apos;,()=&gt;&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误处理</p><ul><li>接收参数时可以直接throw new Error()</li><li>hooks处理阶段通过compilation.warnings或errors.push(‘msg’)</li></ul></li><li><p>文件输出</p><ul><li>通过compilation.assets配合webpack-sources包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const JSZip = require(&apos;jszip&apos;)</span><br><span class="line">const RawSource = require(&apos;webpack-sources&apos;).RawSource</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const zip = new JSZip()</span><br><span class="line">module.exports = class DemoPlugin &#123;</span><br><span class="line">  constructor (options) &#123;</span><br><span class="line">    this.options = options</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  apply (compiler) &#123;</span><br><span class="line">    compiler.hooks.emit.tapAsync(&apos;zipPlugin&apos;, (compilation, cb) =&gt; &#123;</span><br><span class="line">      const folder = zip.folder(this.options.name)</span><br><span class="line">      for (const filename in compilation.assets) &#123;</span><br><span class="line">        const source = compilation.assets[filename].source()</span><br><span class="line">        folder.file(filename, source)</span><br><span class="line">      &#125;</span><br><span class="line">      zip.generateAsync(&#123;</span><br><span class="line">        type: &apos;nodebuffer&apos;</span><br><span class="line">      &#125;).then((content) =&gt; &#123;</span><br><span class="line">        console.log(compilation.options)</span><br><span class="line">        const outputPath = path.join(compilation.options.output.path, this.options.name + &apos;.zip&apos;)</span><br><span class="line">        const relativePath = path.relative(compilation.options.output.path, outputPath)</span><br><span class="line">        compilation.assets[relativePath] = new RawSource(content)</span><br><span class="line">        cb()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h1&gt;&lt;h2 id=&quot;webpack及发展历史&quot;&gt;&lt;a href=&quot;#webpack及发展历史&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="webpack" scheme="https://prief.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vscode</title>
    <link href="https://prief.github.io/vscode/"/>
    <id>https://prief.github.io/vscode/</id>
    <published>2019-08-15T14:44:49.000Z</published>
    <updated>2019-09-09T10:40:17.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul><li>cmd + shift + P<ul><li>shell &amp;&amp; install code in PATH</li><li>transfrom upper|lower</li></ul></li><li>cmd + P<ul><li>快速搜索打开文件</li></ul></li><li>cmd<ul><li>code –help</li><li>code -r reuseWindow folder|file</li><li>code -r -g package.json:128 #打开文件128行</li><li>code -r -d file1 file2 #对比2个文件</li><li>ls | code -r - #接受管道数据</li></ul></li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h2><ul><li>option + 左箭头 #单词为单位向左跳动</li><li>option + 右箭头 #单词为单位向右跳动</li><li>cmd + 左箭头  #直接跳到行首</li><li>cmd + 右箭头  #直接跳到行尾</li><li>cmd + 上箭头  #直接跳到文件头部</li><li>cmd + 下箭头  #直接跳到文件尾部</li><li>cmd + Enter  #下面开始一行</li><li>cmd + option + 上下 # 创建多光标</li><li>ctrl + g #跳到指定行</li><li>cmd + shift + O #跳到指定符号</li></ul><h2 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h2><ul><li>移动光标的同时按住shift进行文本的选择</li><li>cmd + D #多文本选择</li></ul><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ul><li>option + 上下 #移动当前行</li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ul><li>option + shift + 上下 #复制当前行</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul><li>cmd + delete #删除光标到行首</li><li>cmd + shift + K #删除当前行</li><li>cmd + X #剪切</li></ul><h2 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h2><ul><li>option + shift + F </li></ul><h1 id="vscode相关"><a href="#vscode相关" class="headerlink" title="vscode相关"></a>vscode相关</h1><h2 id="创建codeSnippets"><a href="#创建codeSnippets" class="headerlink" title="创建codeSnippets"></a>创建codeSnippets</h2><ul><li>cmd + shift + P</li><li>user snippets<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &quot;Print to console&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &quot;log&quot;,</span><br><span class="line">    &quot;body&quot;: [</span><br><span class="line">        &quot;console.log($&#123;1:i&#125;);&quot;,</span><br><span class="line">        &quot;console.log($&#123;1:i&#125; + 1); // $&#123;1:i&#125; + 1&quot;,</span><br><span class="line">        &quot;$2&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;description&quot;: &quot;Log output to console&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="vscode"><a href="#vscode" class="headerlink" title=".vscode"></a>.vscode</h2><ul><li>settings.json</li><li>tasks.json</li><li>launch.json</li><li>extensions.json</li></ul><h2 id="语言支持"><a href="#语言支持" class="headerlink" title="语言支持"></a>语言支持</h2><ul><li>json<ul><li>可自己定义jsonSchema做智能提示</li></ul></li><li>markdown<ul><li>open preview</li></ul></li><li>js<ul><li>jsDoc(可做接口文档/编码提示)</li><li>d.ts(ts接口定义)</li><li>// @ts-check 开启ts校验逐步过度到ts</li><li>logpoint 把原本调试时需要的console.log与断点结合 { str + “” }</li></ul></li><li>emmet<ul><li>emmet.triggerExpansionOnTab: true #输入后按tab自动展开</li><li>“emmet.includeLanguages”: {“vue-html”: “html”}</li><li>ui&gt;li*3</li><li>div+p</li><li>div#list&gt;li.list-item</li><li>#page&gt;div.logo+ul#navigation&gt;li*5&gt;a{Item $}</li><li>转到匹配对/删除节点(自动删除开闭节点)</li></ul></li></ul><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><ul><li>是一个nodejs应用</li><li>可以操作vscodeAPI进行插件功能实现</li></ul><h2 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yeoman generator-code</span><br><span class="line">yo code myExtName</span><br><span class="line">// extension.js</span><br><span class="line">const vscode = require(&quot;vscode&quot;);</span><br><span class="line">exports.activate = function activate(ctx)&#123;&#125;</span><br><span class="line">exports.deactivate = function deactivate()&#123;&#125;</span><br><span class="line"></span><br><span class="line">//package.json</span><br><span class="line">engines : &#123; &quot;vscode&quot;: &quot;^1.29.0&quot; &#125;</span><br><span class="line">&quot;activationEvents&quot;: [ &quot;onCommand:extension.sayHello&quot; ]</span><br><span class="line">&quot;contributes&quot;: &#123; &quot;commands&quot;: [ &#123;&quot;command&quot;: &quot;extension.sayHello&quot;, &quot;title&quot;: &quot;Hello World&quot; &#125;]&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令面板&quot;&gt;&lt;a href=&quot;#命令面板&quot; class=&quot;headerlink&quot; title=&quot;命令面板&quot;&gt;&lt;/a&gt;命令面板&lt;/h1&gt;&lt;h2 id=&quot;常用&quot;&gt;&lt;a href=&quot;#常用&quot; class=&quot;headerlink&quot; title=&quot;常用&quot;&gt;&lt;/a&gt;常用&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my tools</title>
    <link href="https://prief.github.io/my-tools/"/>
    <id>https://prief.github.io/my-tools/</id>
    <published>2019-08-11T03:13:12.000Z</published>
    <updated>2020-03-30T03:44:28.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><ul><li>git</li><li>iterm</li><li>wireshark</li></ul><h1 id="fe"><a href="#fe" class="headerlink" title="fe"></a>fe</h1><ul><li>chrome</li><li>vscode<ul><li>vscode-icons</li><li>markdown TOC</li><li>gitlens</li><li>debugger for chrome</li><li>code runner</li><li>Java Extension Pack</li><li>go</li><li>python</li><li>vetur</li><li>eslint</li></ul></li><li>node<ul><li></li></ul></li></ul><h1 id="android"><a href="#android" class="headerlink" title="android"></a>android</h1><ul><li>as</li></ul><h1 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h1><ul><li>homebrew</li><li>xcode</li></ul><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><ul><li><p>split</p><ul><li>-d 以数字自动命名</li><li>-b 按大小切分 100M split -b 1000M -d filename prefix</li><li>-l 按行数切分 1000 split -l 10000 -d filename prefix</li></ul></li><li><p>git</p><img src="/my-tools/devopsGitFlow.png" title="devopsGit工作流"></li><li><p>批量修改密码</p><ul><li>yum -y install expect tcl</li><li>touch ~/ip.txt<ul><li>ip root密码</li><li>10.6.23.23 root123</li></ul></li><li>touch ~/passwd.sh</li><li>touch ~/action.exp</li><li>chmod 755 ~/passwd.sh</li><li>chmod 755 ~/action.exp</li><li>sh ~/passwd.sh<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># ~/passwd.sh</span><br><span class="line">#! /bin/bash</span><br><span class="line">for ip in `awk &apos;&#123;print $1&#125;&apos; ~/ip.txt`</span><br><span class="line">do</span><br><span class="line">  pass=`grep $ip ~/ip.txt | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">  expect ~/action.exp $ip $pass</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># ~/action.exp</span><br><span class="line">#! /bin/expect</span><br><span class="line">set ipaddr [lindex $argv 0]</span><br><span class="line">set passwd [lindex $argv 1]</span><br><span class="line">set timeout 30</span><br><span class="line">spawn ssh root@$ipaddr</span><br><span class="line">expect &#123;</span><br><span class="line">  &quot;yes|no&quot; &#123;send &quot;yes\r&quot;;exp_continue&#125;</span><br><span class="line">  &quot;password&quot; &#123;send &quot;$passwd\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;#&quot;</span><br><span class="line">send &quot;echo newpasswd | passwd --stdin root\r&quot;</span><br><span class="line">send &quot;exit\r&quot;</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;os&quot;&gt;&lt;a href=&quot;#os&quot; class=&quot;headerlink&quot; title=&quot;os&quot;&gt;&lt;/a&gt;os&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;iterm&lt;/li&gt;
&lt;li&gt;wireshark&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;fe&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="tools" scheme="https://prief.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>net protocol &amp; capature packets</title>
    <link href="https://prief.github.io/net-protocol-capature-packets/"/>
    <id>https://prief.github.io/net-protocol-capature-packets/</id>
    <published>2019-08-10T23:30:55.000Z</published>
    <updated>2019-08-15T13:54:34.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="协议栈"><a href="#协议栈" class="headerlink" title="协议栈"></a>协议栈</h2><ul><li>应用层<ul><li>http/1.1</li><li>websocket</li><li>http/2.0</li></ul></li><li>表示层<ul><li>tls/ssl</li></ul></li><li>传输层<ul><li>tcp</li></ul></li><li>网络层<ul><li>ip</li></ul></li><li>链路层<ul><li>以太网</li></ul></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>chrome</li><li>wireshark</li><li>dig</li><li>tcpdump</li></ul><h1 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http/1.1"></a>http/1.1</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>RFC: request for comments</li><li>http/1.1<ul><li>无状态</li><li>请求/响应模式</li><li>可扩展的语义</li><li>自描述的消息格式</li></ul></li><li>ABNF: 扩充巴科斯-瑙尔范式<ul><li>空白字符SP来分割各个元素</li><li>/表示可供选择的规则</li><li>%x##-##表示值的范围</li><li>()组合，视为一个元素</li><li>m*n表示重复m-n次</li><li>[]表示可选序列</li><li>DIGIT表示数字</li><li>HEXDIG表示十六进制数字</li><li>SP表示空格</li><li>CRLF表示兼容的回车换行</li></ul></li><li>OSI: open system interconnection reference model概念模型<ul><li>应用层（http/email/dns/smtp/ftp/telnet）</li><li>表示层（ssl）</li><li>会话层（session）</li><li>传输层（tcp/udp）</li><li>网络层（ip，广域网路由器）</li><li>数据链路层（mac，局域网交换机）</li><li>物理层</li></ul></li><li>TCP/IP 事实实现方案<ul><li>应用层（http/email/dns/smtp/ftp/telnet）</li><li>传输层（tcp/udp）</li><li>网络层（ip/icmp/arp）</li><li>物理层（ethernet）</li></ul></li><li>评估web架构的关键属性<ul><li>性能performance<ul><li>网络性能 throughput吞吐量&lt;=bandwidth</li><li>用户感知性能</li><li>网络效率 缓存/cdn/减少交互次数</li></ul></li><li>可伸缩性scalability</li><li>简单性simplicity</li><li>可见性visiable</li><li>可移植性portablity</li><li>可靠性reliability</li><li>可修改性modifiability<ul><li>可进化</li><li>可定制</li><li>可扩展</li><li>可配置</li><li>可重用</li></ul></li></ul></li><li>URI<ul><li>URI是URL+URN的超集，统一掉概念</li><li>schema://user:pass@hostname:port/path?query#fragment</li></ul></li><li>method<ul><li>GET</li><li>HEAD</li><li>POST</li><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li></ul></li><li>status<ul><li>1xx 请求服务器已经收到，需要进一步处理<ul><li>100 Continue常用上传大文件前</li><li>101 Switch Protocols升级协议ws/h2</li><li>102 Processing webdav协议</li></ul></li><li>2xx 成功处理了请求，当接收到不认识的2xx时默认用200<ul><li>200 OK</li><li>201 Created成功创建</li><li>202 Accepted</li><li>206 Partial Content 使用range协议返回部分内容</li></ul></li><li>3xx 重定向<ul><li>301 Moved Permanently 永久重定向，可被缓存</li><li>302 Found 临时重定向，不能被缓存</li><li>304 Not Modified 可复用缓存</li></ul></li><li>4xx 客户端错误<ul><li>400 Bad Request</li><li>401 Unauthorized未认证</li><li>403 Forbidden</li><li>404 Not Found</li></ul></li><li>5xx 服务端错误<ul><li>500 Internel Server Error 内部服务器错误，当接收到不认识的5xx时默认用500</li><li>501 Not Implemented</li><li>502 Bad Gateway</li><li>503 Service Unavailable</li><li>504 Gateway Timeout</li></ul></li></ul></li><li>长短连接 <ul><li>Connection: Keep-Alive | Close</li><li>http/1.1默认支持长连接</li><li>如果Connection后面跟header字段则表示对代理服务器要求不做此header转发</li><li>Connection只表示tcp连接的两端，不能表示跨中间的服务器</li></ul></li><li>header<ul><li>X-Forwarded-For 用于传递ip，每走一层都会append一个ip</li><li>X-Real-IP 只记录用户外网ip</li><li>Referer 来源，通常做防盗链</li><li>User-Agent</li><li>From 通常是爬虫添加的后面跟邮件地址告诉server可通过邮件联系</li><li>Allow server支持的method</li><li>Accept* 协商资源表现形式<ul><li>Accept: MIME q=0.8;</li><li>Accept-Language: zh-CN,zh q=0.8</li><li>Accept-Encoding: gzip | br | deflate</li><li>Accept-Range: bytes | none 是否支持range请求</li></ul></li><li>Transer-Encoding: chunked | gzip 不定长包体传输格式</li><li>Content-Disposition: inline | attachment[; filename=xx.xx]</li></ul></li><li>MIME<ul><li>Multipurpose Internet Mail Extensions</li><li>格式：type/subType(;params)</li><li>type<ul><li>text</li><li>image</li><li>audio</li><li>video</li><li>application</li></ul></li><li>params<ul><li>attribute=value</li></ul></li></ul></li><li>Form关键属性<ul><li>action表示uri</li><li>method表示方法<ul><li>GET</li><li>POST</li></ul></li><li>enctype<ul><li>application/x-www-form-urlencoded 默认编码方式 k=v&amp;k=v 需要encode</li><li>multipart/form-data 有boundary做分割，一般用于文件传输</li></ul></li></ul></li><li>Range请求<ul><li>做多线程下载/断点续传/点播视频等</li><li>请求头部标明<ul><li>Range: bytes=0-499[,500-1000[,1001-]]</li><li>Range: bytes=-4 最后3个字节</li><li>If-Range: Etag | httpDate 验证已经下载的部分是否有变动</li></ul></li><li>响应头部标明<ul><li>Content-Range: bytes 0-100/2000 表示共2000长度，返回了前101字节</li><li>Content-Range: bytes 0-100/* 表示不知道总长度但返回了前101字节  </li><li>Content-Range: multipart/byterages; boundary=…</li></ul></li></ul></li><li>cookie<ul><li>Set-Cookie<ul><li>每一个Set-Cookie只能设置一个name=value，如需多个需要多个Set-Cookie</li><li>name=value; expires= httpDate; max-age=X; domain=X; path=/; secure; httpOnly;</li></ul></li><li>Cookie<ul><li>可以把多个Set-Cookie返回的name组合成一个进行请求</li><li>name=value;[ name=value;]</li></ul></li></ul></li><li>同源三要素<ul><li>schema</li><li>hostname</li><li>port</li></ul></li><li>跨域<ul><li>可跨域的组件（满足可扩展可用性）<ul><li>script</li><li>link</li><li>img</li><li>iframe</li><li>video</li><li>audio</li></ul></li><li>攻击与防护<ul><li>csrf <ul><li>cross-site request forgery</li><li>通过referer可做一层防护</li><li>通过csrfToken即服务器响应表单时添加隐藏的token信息已备后续验证也可做防护</li></ul></li><li>xss cross-site scripting</li></ul></li><li>cors<ul><li>cross origin resource sharing</li><li>简单请求三要素<ul><li>GET/HEAD/POST之一</li><li>Accepte/Accept-Language/Content-Type安全header之一</li><li>Content-Type是text/plain|application/x-www-form-urlencoded|multipart/form-data之一</li></ul></li><li>复杂请求<ul><li>简单请求之外的都是复杂请求</li><li>复杂请求必须先走一个OPTIONS请求</li></ul></li><li>请求相关头部<ul><li>Origin</li><li>Access-Control-Request-Method</li><li>Access-Control-Request-Headers</li></ul></li><li>响应相关头部<ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Methods</li><li>Access-Control-Allow-Headers</li><li>Access-Control-Allow-Credentials</li><li>Access-Control-Max-Age</li></ul></li></ul></li></ul></li><li>缓存<ul><li>优先级<ul><li>s-maxage</li><li>max-age</li><li>Expires</li><li>预估过期时间（浏览器实现实现的”10%算法”）</li></ul></li><li>Cache-Control<ul><li>请求中<ul><li>max-age=t | max-stale=t | min-fresh=t </li><li>no-store | no-cache | no-transform | only-if-cached</li></ul></li><li>响应中<ul><li>must-revalidate | proxy-revalidate</li><li>public | private </li><li>no-cache | no-store | no-transform</li></ul></li></ul></li></ul></li><li>重定向<ul><li>301 http/1.0 永久重定向，可以被缓存，重定向后的请求可以改变method，通常使用get</li><li>302 http/1.0 临时重定向，不可被缓存，重定向后的请求可以改变method，通常使用get</li><li>307 http/1.1 临时重定向，不可被缓存，重定向后的请求不能改变method</li><li>308 http/1.1 永久重定向，可以被缓存，重定向后的请求不能改变method</li></ul></li><li>隧道<ul><li>tunnel通过http连接来传输非http协议格式的数据</li><li>常用于穿越防火墙/传递ssl消息</li><li>通过connect建立连接后变为双向传输，不必遵守http协议</li></ul></li><li>爬虫<ul><li>robots.txt<ul><li>User-Agent 允许哪些机器人</li><li>Disallow 禁止哪些目录</li><li>Crawl-delay 访问间隔防止流量过大</li><li>Allow 允许哪些目录</li><li>Sitemap 站点地图</li></ul></li></ul></li></ul><h2 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h2><ul><li>域名与ip之间的映射数据库</li><li>查询方式<ul><li>迭代查询</li><li>递归查询</li></ul></li><li>query<ul><li>questions<ul><li>QNAME<ul><li>.分割多段，每段字节数打头再跟其ASCII编码</li><li>最终以 00 结尾</li></ul></li><li>QTYPE<ul><li>1 A ipv4地址</li><li>2 NS 权威域名服务器</li><li>5 CNAME 别名</li><li>28 AAAA ipv6地址</li></ul></li><li>QCLASS<ul><li>IN 表示internet</li></ul></li></ul></li></ul></li><li>response<ul><li>NAME</li><li>TTL time to live</li><li>RDLENGTH RDATA length</li><li>RDATA 查询值，如ip或CNAME值</li></ul></li></ul><h1 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h1><h2 id="BPF过滤器"><a href="#BPF过滤器" class="headerlink" title="BPF过滤器"></a>BPF过滤器</h2><ul><li>Berkeley Packet Filter</li><li>在设备驱动级别提供抓包接口</li><li>表达式<ul><li>原语<ul><li>Type: host port portrange…</li><li>Dir: dst src…</li><li>proto: tcp udp…</li></ul></li><li>操作符<ul><li>&amp;&amp; and</li><li>|| or</li><li>! not</li></ul></li></ul></li></ul><h2 id="独有的显示过滤器"><a href="#独有的显示过滤器" class="headerlink" title="独有的显示过滤器"></a>独有的显示过滤器</h2><ul><li>view -&gt; internels -&gt; support protocols</li><li>操作符<ul><li>eq ==</li><li>ne !=</li><li>gt &gt;</li><li>ge &gt;=</li><li>lt &lt;</li><li>le &lt;=</li><li>contains</li><li>matches ~</li></ul></li><li>函数<ul><li>upper</li><li>lower</li><li>len</li><li>count</li><li>string</li></ul></li></ul><h1 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><ul><li>demo页面：<a href="http://www.websocket.org" target="_blank" rel="noopener">http://www.websocket.org</a></li><li>客户端发送数据要进行掩码处理防止针对代理服务器的缓存污染攻击</li><li>pingpong心跳保持会话</li><li>优点<ul><li>浏览器支持率比较高</li><li>支持服务器推送</li></ul></li><li>不足<ul><li>设计比较简单，很多功能和性能上的问题没有真正解决</li></ul></li></ul><h2 id="握手"><a href="#握手" class="headerlink" title="握手"></a>握手</h2><img src="/net-protocol-capature-packets/handshake.png" title="websocket握手包头"><h2 id="解密tls"><a href="#解密tls" class="headerlink" title="解密tls"></a>解密tls</h2><ul><li>通过浏览器DEBUG日志获得tls握手阶段生成的密钥</li><li>步骤<ul><li>配置环境变量SSLKEYLOGFILE=path2log使chrome输出DEBUG日志</li><li>wireshark配置解析DEBUG日志(编辑/首选项/protocols/tls)</li></ul></li></ul><h1 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h1><h2 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h2><ul><li>http1.1的问题<ul><li>高延迟<ul><li>带宽在增加，延迟却没办法降低</li><li>浏览器并发限制</li><li>同一连接串行处理请求</li></ul></li><li>无状态特性带来了巨大的http头部</li><li>不支持服务器推送</li></ul></li><li>h2主要特性<ul><li>传输数据量大幅减小<ul><li>标头压缩</li><li>二进制传输</li></ul></li><li>多路复用并支持优先级</li><li>服务器推送</li><li>必须使用tls</li></ul></li><li>tls握手通讯过程<ul><li>验证身份</li><li>达成安全套件共识</li><li>传递密钥</li><li>加密通讯</li></ul></li><li>h2核心概念<ul><li>连接connection</li><li>数据流stream<ul><li>通过stream实现多路复用</li></ul></li><li>消息message<ul><li>header帧</li><li>data帧</li></ul></li><li>数据帧frame</li></ul></li></ul><h2 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h2><ul><li>帧头部<img src="/net-protocol-capature-packets/frameHeader.png" title="帧头部"></li><li>作用<ul><li>多路复用(同一stream内的frame必须是有序的，接收端根据streamID并发组装消息)</li><li>客户端建立的流必须是奇数，服务端建立的是偶数</li><li>状态管理的约束(ID不能复用，只能递增，超出最大值后必须断掉tcp连接重新建立)</li></ul></li><li>帧类型type<ul><li>DATA</li><li>HEADERS</li><li>PRIORITY</li><li>RST_STREAM</li><li>SETTINGS</li><li>PUSH_PROMISE</li><li>PINNG</li><li>GOAWAY</li><li>WINDOW_UPDATE</li><li>CONTINUATION</li></ul></li><li>hpack<ul><li>头部压缩算法</li><li>三种压缩方式相结合<ul><li>静态字典</li><li>动态字典</li><li>压缩算法huffman编码</li></ul></li></ul></li></ul><h2 id="服务推送"><a href="#服务推送" class="headerlink" title="服务推送"></a>服务推送</h2><ul><li>每一条推送都基于一个请求</li><li>在请求的响应中可以恢复即将推送的资源</li><li>再开一个stream进行资源的推送，不同的stream可以实现并发</li></ul><h2 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h2><ul><li>应用层和tcp层都可以做</li><li>发送和接口流量控制是可以分开作用的</li><li>只有DATA帧才受流控限制</li><li>流控不能被禁用</li></ul><h2 id="h2现存问题"><a href="#h2现存问题" class="headerlink" title="h2现存问题"></a>h2现存问题</h2><ul><li>tcp+tls建链握手过多<ul><li>必须建立在tls之上</li></ul></li><li>多路复用与tcp队头阻塞问题<ul><li>本质还是在tcp流中是串行的</li><li>串行对头中丢失一个包就会阻塞后面的包</li></ul></li><li>tcp是由操作系统内核实现的，内核更新慢</li></ul><h2 id="http3"><a href="#http3" class="headerlink" title="http3"></a>http3</h2><ul><li>基于quick协议与h2协议共同成为h3</li><li>quick协议基于udp/ip协议之上，h2协议之下</li><li>quick协议实现了<ul><li>多路复用</li><li>tls</li><li>拥塞控制</li><li>丢包重发</li></ul></li><li>优势<ul><li>可以连接迁移</li><li>解决了队头阻塞问题</li><li>1RTT完全就握手完毕</li></ul></li></ul><h1 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h1><h2 id="基础-3"><a href="#基础-3" class="headerlink" title="基础"></a>基础</h2><ul><li>概念<ul><li>ssl secure sockets layer</li><li>tls transport layer security</li></ul></li><li>发展历史<ul><li>ssl3.0</li><li>tls1.0</li><li>tls1.1</li><li>tls1.2</li><li>tls1.3</li></ul></li><li>设计目的<ul><li>身份验证</li><li>保密性</li><li>完整性</li></ul></li><li>主要功能<ul><li>握手</li><li>交换密钥</li><li>告警</li><li>对称加密数据</li><li>记录</li></ul></li><li>tls握手通讯过程<ul><li>验证身份</li><li>达成安全套件共识</li><li>传递密钥</li><li>加密通讯</li></ul></li><li>安全加密套件<ul><li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li><li>ECDHE 密钥交换算法</li><li>RSA 身份验证算法</li><li>AES 对称加密算法</li><li>128 对称加密强度</li><li>GCM 对称加密模式</li><li>SHA256 签名hash算法</li></ul></li></ul><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><ul><li>工作原理<ul><li>XOR运算 速度快</li><li>padding填充 <ul><li>会把明文进行blockCipher分组进行加密</li><li>当分组后最后一个block可能长度不够XOR运算，需要padding</li><li>填充时可以按bit位进行填充也可按byte字节填充</li><li>RFC中常用按byte字节进行填充，填充内容是多少个字节就填充多少个数字，即PKCS7填充算法</li></ul></li><li>工作模式<ul><li>常用GCM工作模式</li><li>Galois/Counter Mode</li></ul></li></ul></li><li>AES<ul><li>advanced encryption standard加密算法</li><li>常用填充算法PKCS7</li><li>常用工作模式GCM</li><li>三种密钥长度<ul><li>AES-128密钥长度16字节，加密轮数10</li><li>AES-192密钥长度24字节，加密轮数12</li><li>AES-256密钥长度32字节，加密轮数14</li></ul></li><li>加密步骤<ul><li>明文按照16字节拆分成若干块，每个块是4*4矩阵</li><li>按填充算法进行最后一块的填充</li><li>每一个明文块用AES加密算法和密钥进行加密</li><li>拼接所有密文块</li></ul></li></ul></li></ul><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><ul><li>RSA </li><li>openssl<ul><li>生成私钥 openssl genrsa -out private.pem</li><li>提取公钥 openssl rsa -in private.pem -pubout -out public.pem</li><li>加密文件 openssl rsautl -encrypt -in hello.txt -inkey public.pem -pubin -out hello.en </li><li>解密文件 openssl rsautl -decrypt -in hello.en -inkey private.pem -out hello.de</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;协议栈&quot;&gt;&lt;a href=&quot;#协议栈&quot; class=&quot;headerlink&quot; title=&quot;协议栈&quot;&gt;&lt;/a&gt;协议栈&lt;/h2&gt;&lt;u
      
    
    </summary>
    
    
      <category term="wireshark" scheme="https://prief.github.io/tags/wireshark/"/>
    
      <category term="tcp/ip" scheme="https://prief.github.io/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>spring boot &amp; k8s</title>
    <link href="https://prief.github.io/spring-boot-k8s/"/>
    <id>https://prief.github.io/spring-boot-k8s/</id>
    <published>2019-08-10T15:01:19.000Z</published>
    <updated>2019-08-17T03:01:46.852Z</updated>
    
    <content type="html"><![CDATA[<p>记录spring boot &amp; k8s学习过程 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录spring boot &amp;amp; k8s学习过程 &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="spring" scheme="https://prief.github.io/tags/spring/"/>
    
      <category term="k8s" scheme="https://prief.github.io/tags/k8s/"/>
    
  </entry>
  
</feed>
